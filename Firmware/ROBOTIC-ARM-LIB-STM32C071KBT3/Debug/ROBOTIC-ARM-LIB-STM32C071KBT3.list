
ROBOTIC-ARM-LIB-STM32C071KBT3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f04  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08005fc4  08005fc4  00006fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006188  08006188  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08006188  08006188  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006188  08006188  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006188  08006188  00007188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800618c  0800618c  0000718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006190  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  20000068  080061f8  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  080061f8  000085f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117ae  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002608  00000000  00000000  0001983e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  0001be48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9e  00000000  00000000  0001cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e52  00000000  00000000  0001d8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116ec  00000000  00000000  00034700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d652  00000000  00000000  00045dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d343e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b8  00000000  00000000  000d3484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d753c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005fac 	.word	0x08005fac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005fac 	.word	0x08005fac

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b08f      	sub	sp, #60	@ 0x3c
 8000430:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 ffde 	bl	80013f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f8b7 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043a:	f000 fa0b 	bl	8000854 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800043e:	f000 f965 	bl	800070c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000442:	f000 f907 	bl	8000654 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000446:	f000 f9b7 	bl	80007b8 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800044a:	f000 f8f5 	bl	8000638 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800044e:	4b4b      	ldr	r3, [pc, #300]	@ (800057c <main+0x150>)
 8000450:	0018      	movs	r0, r3
 8000452:	f002 f8cf 	bl	80025f4 <HAL_TIM_Base_Start>
  stepper_init(&M1_DRIVER,
 8000456:	4a4a      	ldr	r2, [pc, #296]	@ (8000580 <main+0x154>)
 8000458:	4949      	ldr	r1, [pc, #292]	@ (8000580 <main+0x154>)
 800045a:	484a      	ldr	r0, [pc, #296]	@ (8000584 <main+0x158>)
 800045c:	2380      	movs	r3, #128	@ 0x80
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	9308      	str	r3, [sp, #32]
 8000462:	4b47      	ldr	r3, [pc, #284]	@ (8000580 <main+0x154>)
 8000464:	9307      	str	r3, [sp, #28]
 8000466:	2380      	movs	r3, #128	@ 0x80
 8000468:	021b      	lsls	r3, r3, #8
 800046a:	9306      	str	r3, [sp, #24]
 800046c:	23a0      	movs	r3, #160	@ 0xa0
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	9305      	str	r3, [sp, #20]
 8000472:	2308      	movs	r3, #8
 8000474:	9304      	str	r3, [sp, #16]
 8000476:	4b42      	ldr	r3, [pc, #264]	@ (8000580 <main+0x154>)
 8000478:	9303      	str	r3, [sp, #12]
 800047a:	2310      	movs	r3, #16
 800047c:	9302      	str	r3, [sp, #8]
 800047e:	4b40      	ldr	r3, [pc, #256]	@ (8000580 <main+0x154>)
 8000480:	9301      	str	r3, [sp, #4]
 8000482:	2320      	movs	r3, #32
 8000484:	9300      	str	r3, [sp, #0]
 8000486:	0013      	movs	r3, r2
 8000488:	2240      	movs	r2, #64	@ 0x40
 800048a:	f000 fcc7 	bl	8000e1c <stepper_init>
		       GLOBAL_MS1_PORT, GLOBAL_MS1_PIN,
			   GLOBAL_MS2_PORT, GLOBAL_MS2_PIN,
			   M1_STEP_PORT, M1_STEP_PIN,
			   M1_DIR_PORT, M1_DIR_PIN,
		       M2_ENDSTOP_PORT, M2_ENDSTOP_PIN);
  stepper_init(&M2_DRIVER,
 800048e:	4c3c      	ldr	r4, [pc, #240]	@ (8000580 <main+0x154>)
 8000490:	2380      	movs	r3, #128	@ 0x80
 8000492:	015a      	lsls	r2, r3, #5
 8000494:	23a0      	movs	r3, #160	@ 0xa0
 8000496:	05d9      	lsls	r1, r3, #23
 8000498:	483b      	ldr	r0, [pc, #236]	@ (8000588 <main+0x15c>)
 800049a:	2380      	movs	r3, #128	@ 0x80
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	9308      	str	r3, [sp, #32]
 80004a0:	4b37      	ldr	r3, [pc, #220]	@ (8000580 <main+0x154>)
 80004a2:	9307      	str	r3, [sp, #28]
 80004a4:	2380      	movs	r3, #128	@ 0x80
 80004a6:	00db      	lsls	r3, r3, #3
 80004a8:	9306      	str	r3, [sp, #24]
 80004aa:	23a0      	movs	r3, #160	@ 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	9305      	str	r3, [sp, #20]
 80004b0:	2380      	movs	r3, #128	@ 0x80
 80004b2:	011b      	lsls	r3, r3, #4
 80004b4:	9304      	str	r3, [sp, #16]
 80004b6:	23a0      	movs	r3, #160	@ 0xa0
 80004b8:	05db      	lsls	r3, r3, #23
 80004ba:	9303      	str	r3, [sp, #12]
 80004bc:	2310      	movs	r3, #16
 80004be:	9302      	str	r3, [sp, #8]
 80004c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000580 <main+0x154>)
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	2320      	movs	r3, #32
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	0023      	movs	r3, r4
 80004ca:	f000 fca7 	bl	8000e1c <stepper_init>
			   GLOBAL_MS1_PORT, GLOBAL_MS1_PIN,
			   GLOBAL_MS2_PORT, GLOBAL_MS2_PIN,
			   M2_STEP_PORT, M2_STEP_PIN,
			   M2_DIR_PORT, M2_DIR_PIN,
			   M2_ENDSTOP_PORT, M2_ENDSTOP_PIN);
  stepper_init(&M3_DRIVER,
 80004ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000580 <main+0x154>)
 80004d0:	492e      	ldr	r1, [pc, #184]	@ (800058c <main+0x160>)
 80004d2:	482f      	ldr	r0, [pc, #188]	@ (8000590 <main+0x164>)
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	9308      	str	r3, [sp, #32]
 80004d8:	4b29      	ldr	r3, [pc, #164]	@ (8000580 <main+0x154>)
 80004da:	9307      	str	r3, [sp, #28]
 80004dc:	2380      	movs	r3, #128	@ 0x80
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	9306      	str	r3, [sp, #24]
 80004e2:	23a0      	movs	r3, #160	@ 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	9305      	str	r3, [sp, #20]
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	9304      	str	r3, [sp, #16]
 80004ee:	23a0      	movs	r3, #160	@ 0xa0
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	9303      	str	r3, [sp, #12]
 80004f4:	2310      	movs	r3, #16
 80004f6:	9302      	str	r3, [sp, #8]
 80004f8:	4b21      	ldr	r3, [pc, #132]	@ (8000580 <main+0x154>)
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	2320      	movs	r3, #32
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	0013      	movs	r3, r2
 8000502:	2240      	movs	r2, #64	@ 0x40
 8000504:	f000 fc8a 	bl	8000e1c <stepper_init>
		       GLOBAL_MS2_PORT, GLOBAL_MS2_PIN,
		       M3_STEP_PORT, M3_STEP_PIN,
		       M3_DIR_PORT, M3_DIR_PIN,
		       M3_ENDSTOP_PORT, M3_ENDSTOP_PIN);

  const char debug_msg[] = "STARTING UP!!!\n";
 8000508:	003b      	movs	r3, r7
 800050a:	4a22      	ldr	r2, [pc, #136]	@ (8000594 <main+0x168>)
 800050c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800050e:	c313      	stmia	r3!, {r0, r1, r4}
 8000510:	6812      	ldr	r2, [r2, #0]
 8000512:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000514:	2301      	movs	r3, #1
 8000516:	425b      	negs	r3, r3
 8000518:	0039      	movs	r1, r7
 800051a:	481f      	ldr	r0, [pc, #124]	@ (8000598 <main+0x16c>)
 800051c:	220f      	movs	r2, #15
 800051e:	f002 fb69 	bl	8002bf4 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)temp_buffer, 1);
 8000522:	491e      	ldr	r1, [pc, #120]	@ (800059c <main+0x170>)
 8000524:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <main+0x16c>)
 8000526:	2201      	movs	r2, #1
 8000528:	0018      	movs	r0, r3
 800052a:	f002 fc07 	bl	8002d3c <HAL_UART_Receive_IT>
  stepper_enable(&M1_DRIVER);
 800052e:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <main+0x158>)
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fd35 	bl	8000fa0 <stepper_enable>
  stepper_enable(&M2_DRIVER);
 8000536:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <main+0x15c>)
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fd31 	bl	8000fa0 <stepper_enable>
  stepper_enable(&M3_DRIVER);
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <main+0x164>)
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fd2d 	bl	8000fa0 <stepper_enable>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_SET);
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <main+0x154>)
 8000548:	2201      	movs	r2, #1
 800054a:	2104      	movs	r1, #4
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fb16 	bl	8001b7e <HAL_GPIO_WritePin>

  stepper_home(&M1_DRIVER, &M2_DRIVER, &M3_DRIVER);
 8000552:	4a0f      	ldr	r2, [pc, #60]	@ (8000590 <main+0x164>)
 8000554:	490c      	ldr	r1, [pc, #48]	@ (8000588 <main+0x15c>)
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <main+0x158>)
 8000558:	0018      	movs	r0, r3
 800055a:	f000 fe8d 	bl	8001278 <stepper_home>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(commandReady)
 800055e:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <main+0x174>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0fa      	beq.n	800055e <main+0x132>
	 {
	   stepper_process_command(&M1_DRIVER, &M3_DRIVER, commandBuffer);
 8000568:	4a0e      	ldr	r2, [pc, #56]	@ (80005a4 <main+0x178>)
 800056a:	4909      	ldr	r1, [pc, #36]	@ (8000590 <main+0x164>)
 800056c:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <main+0x158>)
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fd9a 	bl	80010a8 <stepper_process_command>
	   commandReady = 0; // Clear the flagM1_DRIVER
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <main+0x174>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	 if(commandReady)
 800057a:	e7f0      	b.n	800055e <main+0x132>
 800057c:	20000084 	.word	0x20000084
 8000580:	50000400 	.word	0x50000400
 8000584:	20000400 	.word	0x20000400
 8000588:	20000434 	.word	0x20000434
 800058c:	50000800 	.word	0x50000800
 8000590:	20000468 	.word	0x20000468
 8000594:	08005fc4 	.word	0x08005fc4
 8000598:	200000d0 	.word	0x200000d0
 800059c:	200002f8 	.word	0x200002f8
 80005a0:	200002fc 	.word	0x200002fc
 80005a4:	20000300 	.word	0x20000300

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b08f      	sub	sp, #60	@ 0x3c
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	2418      	movs	r4, #24
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	0018      	movs	r0, r3
 80005b4:	2320      	movs	r3, #32
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f004 fc1d 	bl	8004df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	0018      	movs	r0, r3
 80005c2:	2314      	movs	r3, #20
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f004 fc16 	bl	8004df8 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <SystemClock_Config+0x8c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2207      	movs	r2, #7
 80005d2:	4393      	bics	r3, r2
 80005d4:	001a      	movs	r2, r3
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <SystemClock_Config+0x8c>)
 80005d8:	2101      	movs	r1, #1
 80005da:	430a      	orrs	r2, r1
 80005dc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2210      	movs	r2, #16
 80005e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	03d2      	lsls	r2, r2, #15
 80005ea:	61da      	str	r2, [r3, #28]

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 fae2 	bl	8001bb8 <HAL_RCC_OscConfig>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005f8:	f000 fa3c 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2207      	movs	r2, #7
 8000600:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSIUSB48;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2202      	movs	r2, #2
 8000606:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2101      	movs	r1, #1
 800061e:	0018      	movs	r0, r3
 8000620:	f001 fcf0 	bl	8002004 <HAL_RCC_ClockConfig>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000628:	f000 fa24 	bl	8000a74 <Error_Handler>
  }
}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b00f      	add	sp, #60	@ 0x3c
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	40022000 	.word	0x40022000

08000638 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2100      	movs	r1, #0
 8000640:	201b      	movs	r0, #27
 8000642:	f000 ffff 	bl	8001644 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000646:	201b      	movs	r0, #27
 8000648:	f001 f811 	bl	800166e <HAL_NVIC_EnableIRQ>
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065a:	2310      	movs	r3, #16
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	0018      	movs	r0, r3
 8000660:	2310      	movs	r3, #16
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f004 fbc7 	bl	8004df8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	0018      	movs	r0, r3
 800066e:	230c      	movs	r3, #12
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f004 fbc0 	bl	8004df8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000678:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <MX_TIM1_Init+0xac>)
 800067a:	4a22      	ldr	r2, [pc, #136]	@ (8000704 <MX_TIM1_Init+0xb0>)
 800067c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_TIM1_Init+0xac>)
 8000680:	222f      	movs	r2, #47	@ 0x2f
 8000682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_TIM1_Init+0xac>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800068a:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <MX_TIM1_Init+0xac>)
 800068c:	4a1e      	ldr	r2, [pc, #120]	@ (8000708 <MX_TIM1_Init+0xb4>)
 800068e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000690:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <MX_TIM1_Init+0xac>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_TIM1_Init+0xac>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_TIM1_Init+0xac>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_TIM1_Init+0xac>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 ff4d 	bl	8002544 <HAL_TIM_Base_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80006ae:	f000 f9e1 	bl	8000a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b2:	2110      	movs	r1, #16
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2280      	movs	r2, #128	@ 0x80
 80006b8:	0152      	lsls	r2, r2, #5
 80006ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006bc:	187a      	adds	r2, r7, r1
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <MX_TIM1_Init+0xac>)
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 ffe2 	bl	800268c <HAL_TIM_ConfigClockSource>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006cc:	f000 f9d2 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e2:	1d3a      	adds	r2, r7, #4
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_TIM1_Init+0xac>)
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f002 f9c5 	bl	8002a78 <HAL_TIMEx_MasterConfigSynchronization>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80006f2:	f000 f9bf 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b008      	add	sp, #32
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	20000084 	.word	0x20000084
 8000704:	40012c00 	.word	0x40012c00
 8000708:	0000ffff 	.word	0x0000ffff

0800070c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <MX_USART1_UART_Init+0xa8>)
 8000714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000716:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000718:	22e1      	movs	r2, #225	@ 0xe1
 800071a:	0252      	lsls	r2, r2, #9
 800071c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b24      	ldr	r3, [pc, #144]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000750:	2230      	movs	r2, #48	@ 0x30
 8000752:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000756:	2280      	movs	r2, #128	@ 0x80
 8000758:	0152      	lsls	r2, r2, #5
 800075a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 800075e:	2280      	movs	r2, #128	@ 0x80
 8000760:	0192      	lsls	r2, r2, #6
 8000762:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000766:	0018      	movs	r0, r3
 8000768:	f002 f9ee 	bl	8002b48 <HAL_UART_Init>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000770:	f000 f980 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000774:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000776:	2100      	movs	r1, #0
 8000778:	0018      	movs	r0, r3
 800077a:	f004 f8f9 	bl	8004970 <HAL_UARTEx_SetTxFifoThreshold>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000782:	f000 f977 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000786:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 8000788:	2100      	movs	r1, #0
 800078a:	0018      	movs	r0, r3
 800078c:	f004 f930 	bl	80049f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 f96e 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000798:	4b05      	ldr	r3, [pc, #20]	@ (80007b0 <MX_USART1_UART_Init+0xa4>)
 800079a:	0018      	movs	r0, r3
 800079c:	f004 f8ae 	bl	80048fc <HAL_UARTEx_DisableFifoMode>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART1_UART_Init+0x9c>
  {
    Error_Handler();
 80007a4:	f000 f966 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	200000d0 	.word	0x200000d0
 80007b4:	40013800 	.word	0x40013800

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b23      	ldr	r3, [pc, #140]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007be:	4a24      	ldr	r2, [pc, #144]	@ (8000850 <MX_USART2_UART_Init+0x98>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c2:	4b22      	ldr	r3, [pc, #136]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007c4:	22e1      	movs	r2, #225	@ 0xe1
 80007c6:	0252      	lsls	r2, r2, #9
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b20      	ldr	r3, [pc, #128]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b1e      	ldr	r3, [pc, #120]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b18      	ldr	r3, [pc, #96]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f4:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_USART2_UART_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_USART2_UART_Init+0x94>)
 8000802:	0018      	movs	r0, r3
 8000804:	f002 f9a0 	bl	8002b48 <HAL_UART_Init>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800080c:	f000 f932 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000810:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_USART2_UART_Init+0x94>)
 8000812:	2100      	movs	r1, #0
 8000814:	0018      	movs	r0, r3
 8000816:	f004 f8ab 	bl	8004970 <HAL_UARTEx_SetTxFifoThreshold>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800081e:	f000 f929 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000822:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <MX_USART2_UART_Init+0x94>)
 8000824:	2100      	movs	r1, #0
 8000826:	0018      	movs	r0, r3
 8000828:	f004 f8e2 	bl	80049f0 <HAL_UARTEx_SetRxFifoThreshold>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000830:	f000 f920 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <MX_USART2_UART_Init+0x94>)
 8000836:	0018      	movs	r0, r3
 8000838:	f004 f860 	bl	80048fc <HAL_UARTEx_DisableFifoMode>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000840:	f000 f918 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	20000164 	.word	0x20000164
 8000850:	40004400 	.word	0x40004400

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b089      	sub	sp, #36	@ 0x24
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	240c      	movs	r4, #12
 800085c:	193b      	adds	r3, r7, r4
 800085e:	0018      	movs	r0, r3
 8000860:	2314      	movs	r3, #20
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f004 fac7 	bl	8004df8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b43      	ldr	r3, [pc, #268]	@ (8000978 <MX_GPIO_Init+0x124>)
 800086c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800086e:	4b42      	ldr	r3, [pc, #264]	@ (8000978 <MX_GPIO_Init+0x124>)
 8000870:	2102      	movs	r1, #2
 8000872:	430a      	orrs	r2, r1
 8000874:	635a      	str	r2, [r3, #52]	@ 0x34
 8000876:	4b40      	ldr	r3, [pc, #256]	@ (8000978 <MX_GPIO_Init+0x124>)
 8000878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800087a:	2202      	movs	r2, #2
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b3d      	ldr	r3, [pc, #244]	@ (8000978 <MX_GPIO_Init+0x124>)
 8000884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000886:	4b3c      	ldr	r3, [pc, #240]	@ (8000978 <MX_GPIO_Init+0x124>)
 8000888:	2104      	movs	r1, #4
 800088a:	430a      	orrs	r2, r1
 800088c:	635a      	str	r2, [r3, #52]	@ 0x34
 800088e:	4b3a      	ldr	r3, [pc, #232]	@ (8000978 <MX_GPIO_Init+0x124>)
 8000890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000892:	2204      	movs	r2, #4
 8000894:	4013      	ands	r3, r2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b37      	ldr	r3, [pc, #220]	@ (8000978 <MX_GPIO_Init+0x124>)
 800089c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800089e:	4b36      	ldr	r3, [pc, #216]	@ (8000978 <MX_GPIO_Init+0x124>)
 80008a0:	2101      	movs	r1, #1
 80008a2:	430a      	orrs	r2, r1
 80008a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008a6:	4b34      	ldr	r3, [pc, #208]	@ (8000978 <MX_GPIO_Init+0x124>)
 80008a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008aa:	2201      	movs	r2, #1
 80008ac:	4013      	ands	r3, r2
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008b2:	4b32      	ldr	r3, [pc, #200]	@ (800097c <MX_GPIO_Init+0x128>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	217c      	movs	r1, #124	@ 0x7c
 80008b8:	0018      	movs	r0, r3
 80008ba:	f001 f960 	bl	8001b7e <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008be:	239f      	movs	r3, #159	@ 0x9f
 80008c0:	0219      	lsls	r1, r3, #8
 80008c2:	23a0      	movs	r3, #160	@ 0xa0
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	2200      	movs	r2, #0
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 f958 	bl	8001b7e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80008ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <MX_GPIO_Init+0x12c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	2140      	movs	r1, #64	@ 0x40
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 f952 	bl	8001b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_8;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	22e0      	movs	r2, #224	@ 0xe0
 80008de:	0092      	lsls	r2, r2, #2
 80008e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2201      	movs	r2, #1
 80008ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	4a22      	ldr	r2, [pc, #136]	@ (800097c <MX_GPIO_Init+0x128>)
 80008f2:	0019      	movs	r1, r3
 80008f4:	0010      	movs	r0, r2
 80008f6:	f000 ffb3 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	227c      	movs	r2, #124	@ 0x7c
 80008fe:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2201      	movs	r2, #1
 8000904:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	193b      	adds	r3, r7, r4
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	193b      	adds	r3, r7, r4
 8000914:	4a19      	ldr	r2, [pc, #100]	@ (800097c <MX_GPIO_Init+0x128>)
 8000916:	0019      	movs	r1, r3
 8000918:	0010      	movs	r0, r2
 800091a:	f000 ffa1 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800091e:	0021      	movs	r1, r4
 8000920:	187b      	adds	r3, r7, r1
 8000922:	229f      	movs	r2, #159	@ 0x9f
 8000924:	0212      	lsls	r2, r2, #8
 8000926:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	000c      	movs	r4, r1
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2201      	movs	r2, #1
 800092e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	193a      	adds	r2, r7, r4
 800093e:	23a0      	movs	r3, #160	@ 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	0011      	movs	r1, r2
 8000944:	0018      	movs	r0, r3
 8000946:	f000 ff8b 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800094a:	0021      	movs	r1, r4
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2240      	movs	r2, #64	@ 0x40
 8000950:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2201      	movs	r2, #1
 8000956:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000964:	187b      	adds	r3, r7, r1
 8000966:	4a06      	ldr	r2, [pc, #24]	@ (8000980 <MX_GPIO_Init+0x12c>)
 8000968:	0019      	movs	r1, r3
 800096a:	0010      	movs	r0, r2
 800096c:	f000 ff78 	bl	8001860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	46c0      	nop			@ (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b009      	add	sp, #36	@ 0x24
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	40021000 	.word	0x40021000
 800097c:	50000400 	.word	0x50000400
 8000980:	50000800 	.word	0x50000800

08000984 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b0c5      	sub	sp, #276	@ 0x114
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a2f      	ldr	r2, [pc, #188]	@ (8000a50 <HAL_UART_RxCpltCallback+0xcc>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d157      	bne.n	8000a46 <HAL_UART_RxCpltCallback+0xc2>
  {
    // Store the received byte in rx_buffer.
    rx_buffer[idx++] = temp_buffer[0];
 8000996:	4b2f      	ldr	r3, [pc, #188]	@ (8000a54 <HAL_UART_RxCpltCallback+0xd0>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	b29b      	uxth	r3, r3
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	b291      	uxth	r1, r2
 80009a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000a54 <HAL_UART_RxCpltCallback+0xd0>)
 80009a2:	8011      	strh	r1, [r2, #0]
 80009a4:	001a      	movs	r2, r3
 80009a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a58 <HAL_UART_RxCpltCallback+0xd4>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b2d9      	uxtb	r1, r3
 80009ac:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <HAL_UART_RxCpltCallback+0xd8>)
 80009ae:	5499      	strb	r1, [r3, r2]
    // Re-arm UART reception for the next byte.
    HAL_UART_Receive_IT(&huart1, (uint8_t*)temp_buffer, 1);
 80009b0:	4929      	ldr	r1, [pc, #164]	@ (8000a58 <HAL_UART_RxCpltCallback+0xd4>)
 80009b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <HAL_UART_RxCpltCallback+0xdc>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	0018      	movs	r0, r3
 80009b8:	f002 f9c0 	bl	8002d3c <HAL_UART_Receive_IT>

    // If the received byte is a newline, the command is complete.
    if(temp_buffer[0] == '\n')
 80009bc:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <HAL_UART_RxCpltCallback+0xd4>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b0a      	cmp	r3, #10
 80009c4:	d13f      	bne.n	8000a46 <HAL_UART_RxCpltCallback+0xc2>
    {
      rx_buffer[idx - 1] = '\0';  // Replace newline with null terminator.
 80009c6:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <HAL_UART_RxCpltCallback+0xd0>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	3b01      	subs	r3, #1
 80009ce:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <HAL_UART_RxCpltCallback+0xd8>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	54d1      	strb	r1, [r2, r3]

      // Construct an echo message and send it.
      uint8_t echo_msg[256] = {0};
 80009d4:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <HAL_UART_RxCpltCallback+0xe0>)
 80009d6:	2288      	movs	r2, #136	@ 0x88
 80009d8:	0052      	lsls	r2, r2, #1
 80009da:	189b      	adds	r3, r3, r2
 80009dc:	19db      	adds	r3, r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	3304      	adds	r3, #4
 80009e4:	22fc      	movs	r2, #252	@ 0xfc
 80009e6:	2100      	movs	r1, #0
 80009e8:	0018      	movs	r0, r3
 80009ea:	f004 fa05 	bl	8004df8 <memset>
      int len = snprintf((char*)echo_msg, sizeof(echo_msg), "ECHO: %s\r\n", rx_buffer);
 80009ee:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <HAL_UART_RxCpltCallback+0xd8>)
 80009f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a68 <HAL_UART_RxCpltCallback+0xe4>)
 80009f2:	2180      	movs	r1, #128	@ 0x80
 80009f4:	0049      	lsls	r1, r1, #1
 80009f6:	240c      	movs	r4, #12
 80009f8:	1938      	adds	r0, r7, r4
 80009fa:	f004 f95d 	bl	8004cb8 <sniprintf>
 80009fe:	0003      	movs	r3, r0
 8000a00:	2286      	movs	r2, #134	@ 0x86
 8000a02:	0052      	lsls	r2, r2, #1
 8000a04:	18b9      	adds	r1, r7, r2
 8000a06:	600b      	str	r3, [r1, #0]
      HAL_UART_Transmit(&huart1, echo_msg, len, HAL_MAX_DELAY);
 8000a08:	18bb      	adds	r3, r7, r2
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	2301      	movs	r3, #1
 8000a10:	425b      	negs	r3, r3
 8000a12:	1939      	adds	r1, r7, r4
 8000a14:	4812      	ldr	r0, [pc, #72]	@ (8000a60 <HAL_UART_RxCpltCallback+0xdc>)
 8000a16:	f002 f8ed 	bl	8002bf4 <HAL_UART_Transmit>

      // Copy the complete command into commandBuffer and set the flag.
      memcpy((void*)commandBuffer, (void*)rx_buffer, idx);
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <HAL_UART_RxCpltCallback+0xd0>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	001a      	movs	r2, r3
 8000a22:	490e      	ldr	r1, [pc, #56]	@ (8000a5c <HAL_UART_RxCpltCallback+0xd8>)
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_UART_RxCpltCallback+0xe8>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f004 fac9 	bl	8004fbe <memcpy>
      commandReady = 1;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <HAL_UART_RxCpltCallback+0xec>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]

      // Clear the receive buffer and reset the index.
      memset((void*)rx_buffer, 0, sizeof(rx_buffer));
 8000a32:	2380      	movs	r3, #128	@ 0x80
 8000a34:	005a      	lsls	r2, r3, #1
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_UART_RxCpltCallback+0xd8>)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f004 f9dc 	bl	8004df8 <memset>
      idx = 0;
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <HAL_UART_RxCpltCallback+0xd0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b045      	add	sp, #276	@ 0x114
 8000a4c:	bd90      	pop	{r4, r7, pc}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	40013800 	.word	0x40013800
 8000a54:	200002fa 	.word	0x200002fa
 8000a58:	200002f8 	.word	0x200002f8
 8000a5c:	200001f8 	.word	0x200001f8
 8000a60:	200000d0 	.word	0x200000d0
 8000a64:	fffffefc 	.word	0xfffffefc
 8000a68:	08005fd4 	.word	0x08005fd4
 8000a6c:	20000300 	.word	0x20000300
 8000a70:	200002fc 	.word	0x200002fc

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	2201      	movs	r2, #1
 8000a98:	4013      	ands	r3, r2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aa4:	2180      	movs	r1, #128	@ 0x80
 8000aa6:	0549      	lsls	r1, r1, #21
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <HAL_MspInit+0x44>)
 8000aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	055b      	lsls	r3, r3, #21
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <HAL_TIM_Base_MspInit+0x38>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d10d      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ada:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <HAL_TIM_Base_MspInit+0x3c>)
 8000adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae0:	2180      	movs	r1, #128	@ 0x80
 8000ae2:	0109      	lsls	r1, r1, #4
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_TIM_Base_MspInit+0x3c>)
 8000aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b004      	add	sp, #16
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	40012c00 	.word	0x40012c00
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b095      	sub	sp, #84	@ 0x54
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	233c      	movs	r3, #60	@ 0x3c
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	0018      	movs	r0, r3
 8000b16:	2314      	movs	r3, #20
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f004 f96c 	bl	8004df8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	241c      	movs	r4, #28
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	0018      	movs	r0, r3
 8000b26:	2320      	movs	r3, #32
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f004 f964 	bl	8004df8 <memset>
  if(huart->Instance==USART1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a3e      	ldr	r2, [pc, #248]	@ (8000c30 <HAL_UART_MspInit+0x128>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d13f      	bne.n	8000bba <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f001 fbff 	bl	800234c <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b52:	f7ff ff8f 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b56:	4b37      	ldr	r3, [pc, #220]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b5a:	4b36      	ldr	r3, [pc, #216]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000b5c:	2180      	movs	r1, #128	@ 0x80
 8000b5e:	01c9      	lsls	r1, r1, #7
 8000b60:	430a      	orrs	r2, r1
 8000b62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b64:	4b33      	ldr	r3, [pc, #204]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b68:	2380      	movs	r3, #128	@ 0x80
 8000b6a:	01db      	lsls	r3, r3, #7
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b30      	ldr	r3, [pc, #192]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b76:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000b78:	2101      	movs	r1, #1
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b82:	2201      	movs	r2, #1
 8000b84:	4013      	ands	r3, r2
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b8a:	213c      	movs	r1, #60	@ 0x3c
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2203      	movs	r2, #3
 8000b90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2202      	movs	r2, #2
 8000b96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	187a      	adds	r2, r7, r1
 8000bac:	23a0      	movs	r3, #160	@ 0xa0
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 fe54 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb8:	e035      	b.n	8000c26 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART2)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000c38 <HAL_UART_MspInit+0x130>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d130      	bne.n	8000c26 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bca:	2180      	movs	r1, #128	@ 0x80
 8000bcc:	0289      	lsls	r1, r1, #10
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bd6:	2380      	movs	r3, #128	@ 0x80
 8000bd8:	029b      	lsls	r3, r3, #10
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000be6:	2101      	movs	r1, #1
 8000be8:	430a      	orrs	r2, r1
 8000bea:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <HAL_UART_MspInit+0x12c>)
 8000bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf8:	213c      	movs	r1, #60	@ 0x3c
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	220c      	movs	r2, #12
 8000bfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2202      	movs	r2, #2
 8000c04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2201      	movs	r2, #1
 8000c16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	187a      	adds	r2, r7, r1
 8000c1a:	23a0      	movs	r3, #160	@ 0xa0
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 fe1d 	bl	8001860 <HAL_GPIO_Init>
}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b015      	add	sp, #84	@ 0x54
 8000c2c:	bd90      	pop	{r4, r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	40013800 	.word	0x40013800
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40004400 	.word	0x40004400

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 fc26 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <USART1_IRQHandler+0x14>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f002 f8b8 	bl	8002dec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	200000d0 	.word	0x200000d0

08000c88 <_getpid>:
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	0018      	movs	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_kill>:
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	f004 f961 	bl	8004f64 <__errno>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	2216      	movs	r2, #22
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	425b      	negs	r3, r3
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b002      	add	sp, #8
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_exit>:
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	425a      	negs	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ffe5 	bl	8000c94 <_kill>
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	e7fd      	b.n	8000cca <_exit+0x16>

08000cce <_read>:
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	e00a      	b.n	8000cf6 <_read+0x28>
 8000ce0:	e000      	b.n	8000ce4 <_read+0x16>
 8000ce2:	bf00      	nop
 8000ce4:	0001      	movs	r1, r0
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	60ba      	str	r2, [r7, #8]
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	dbf0      	blt.n	8000ce0 <_read+0x12>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b006      	add	sp, #24
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_write>:
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e009      	b.n	8000d2e <_write+0x26>
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	60ba      	str	r2, [r7, #8]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	0018      	movs	r0, r3
 8000d24:	e000      	b.n	8000d28 <_write+0x20>
 8000d26:	bf00      	nop
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	dbf1      	blt.n	8000d1a <_write+0x12>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b006      	add	sp, #24
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_close>:
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_fstat>:
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	2280      	movs	r2, #128	@ 0x80
 8000d62:	0192      	lsls	r2, r2, #6
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	2300      	movs	r3, #0
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_isatty>:
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b002      	add	sp, #8
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_lseek>:
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b004      	add	sp, #16
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_sbrk>:
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	4a14      	ldr	r2, [pc, #80]	@ (8000df4 <_sbrk+0x5c>)
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <_sbrk+0x60>)
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d102      	bne.n	8000dba <_sbrk+0x22>
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <_sbrk+0x64>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <_sbrk+0x68>)
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	18d3      	adds	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d207      	bcs.n	8000dd8 <_sbrk+0x40>
 8000dc8:	f004 f8cc 	bl	8004f64 <__errno>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	425b      	negs	r3, r3
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x54>
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	18d2      	adds	r2, r2, r3
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <_sbrk+0x64>)
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b006      	add	sp, #24
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20006000 	.word	0x20006000
 8000df8:	00000400 	.word	0x00000400
 8000dfc:	2000049c 	.word	0x2000049c
 8000e00:	200005f0 	.word	0x200005f0

08000e04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <SystemInit+0x14>)
 8000e0a:	2280      	movs	r2, #128	@ 0x80
 8000e0c:	0512      	lsls	r2, r2, #20
 8000e0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e10:	46c0      	nop			@ (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <stepper_init>:
                  GPIO_TypeDef* enable_port, uint16_t enable_pin,
                  GPIO_TypeDef* ms1_port, uint16_t ms1_pin,
                  GPIO_TypeDef* ms2_port, uint16_t ms2_pin,
                  GPIO_TypeDef* step_port, uint16_t step_pin,
                  GPIO_TypeDef* dir_port, uint16_t dir_pin,
				  GPIO_TypeDef* endstop_port, uint16_t endstop_pin) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	1dbb      	adds	r3, r7, #6
 8000e2a:	801a      	strh	r2, [r3, #0]

    driver->ENABLE_PORT = enable_port;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	601a      	str	r2, [r3, #0]
    driver->ENABLE_PIN = enable_pin;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1dba      	adds	r2, r7, #6
 8000e36:	8812      	ldrh	r2, [r2, #0]
 8000e38:	809a      	strh	r2, [r3, #4]

    driver->MS1_PORT = ms1_port;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	609a      	str	r2, [r3, #8]
    driver->MS1_PIN = ms1_pin;
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	2318      	movs	r3, #24
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	8193      	strh	r3, [r2, #12]

    driver->MS2_PORT = ms2_port;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	69fa      	ldr	r2, [r7, #28]
 8000e4e:	611a      	str	r2, [r3, #16]
    driver->MS2_PIN = ms2_pin;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2220      	movs	r2, #32
 8000e54:	18ba      	adds	r2, r7, r2
 8000e56:	8812      	ldrh	r2, [r2, #0]
 8000e58:	829a      	strh	r2, [r3, #20]

    driver->STEP_PORT = step_port;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e5e:	619a      	str	r2, [r3, #24]
    driver->STEP_PIN = step_pin;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2228      	movs	r2, #40	@ 0x28
 8000e64:	18ba      	adds	r2, r7, r2
 8000e66:	8812      	ldrh	r2, [r2, #0]
 8000e68:	839a      	strh	r2, [r3, #28]

    driver->DIR_PORT = dir_port;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e6e:	621a      	str	r2, [r3, #32]
    driver->DIR_PIN = dir_pin;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2130      	movs	r1, #48	@ 0x30
 8000e74:	187a      	adds	r2, r7, r1
 8000e76:	8812      	ldrh	r2, [r2, #0]
 8000e78:	849a      	strh	r2, [r3, #36]	@ 0x24

    driver->DIR_PORT = dir_port;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e7e:	621a      	str	r2, [r3, #32]
    driver->DIR_PIN = dir_pin;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	187a      	adds	r2, r7, r1
 8000e84:	8812      	ldrh	r2, [r2, #0]
 8000e86:	849a      	strh	r2, [r3, #36]	@ 0x24

    driver->ENDSTOP_PORT = endstop_port;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
    driver->ENDSTOP_PIN = endstop_pin;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2238      	movs	r2, #56	@ 0x38
 8000e92:	18ba      	adds	r2, r7, r2
 8000e94:	8812      	ldrh	r2, [r2, #0]
 8000e96:	859a      	strh	r2, [r3, #44]	@ 0x2c

    driver->ENDSTOP_FLAG = 0;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	222e      	movs	r2, #46	@ 0x2e
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	5499      	strb	r1, [r3, r2]

    driver->position = 0; 		    // Default Position
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	861a      	strh	r2, [r3, #48]	@ 0x30
    driver->position_max = 32*1.8;  // Max Steps 32 degrees 1/64th microstep...
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2239      	movs	r2, #57	@ 0x39
 8000eaa:	865a      	strh	r2, [r3, #50]	@ 0x32

    stepper_configure_steps(driver, 2); // 0'b01 1/64th Microstep Default
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2102      	movs	r1, #2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f000 f808 	bl	8000ec6 <stepper_configure_steps>
    stepper_enable(driver);				// Enable motor by default...
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f000 f871 	bl	8000fa0 <stepper_enable>
}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b004      	add	sp, #16
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <stepper_configure_steps>:

void stepper_configure_steps(stepper_driver_t *driver, uint8_t step_mode)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	000a      	movs	r2, r1
 8000ed0:	1cfb      	adds	r3, r7, #3
 8000ed2:	701a      	strb	r2, [r3, #0]
	switch (step_mode)
 8000ed4:	1cfb      	adds	r3, r7, #3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d03b      	beq.n	8000f54 <stepper_configure_steps+0x8e>
 8000edc:	dc4b      	bgt.n	8000f76 <stepper_configure_steps+0xb0>
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d027      	beq.n	8000f32 <stepper_configure_steps+0x6c>
 8000ee2:	dc48      	bgt.n	8000f76 <stepper_configure_steps+0xb0>
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <stepper_configure_steps+0x28>
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d011      	beq.n	8000f10 <stepper_configure_steps+0x4a>
 8000eec:	e043      	b.n	8000f76 <stepper_configure_steps+0xb0>
	{
		case 0:	// {MS2,MS1} = 2'b00 : 1/8th Microstep
		  HAL_GPIO_WritePin(driver->MS2_PORT, driver->MS2_PIN, GPIO_PIN_RESET);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6918      	ldr	r0, [r3, #16]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	8a9b      	ldrh	r3, [r3, #20]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	0019      	movs	r1, r3
 8000efa:	f000 fe40 	bl	8001b7e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(driver->MS1_PORT, driver->MS1_PIN, GPIO_PIN_RESET);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6898      	ldr	r0, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	899b      	ldrh	r3, [r3, #12]
 8000f06:	2200      	movs	r2, #0
 8000f08:	0019      	movs	r1, r3
 8000f0a:	f000 fe38 	bl	8001b7e <HAL_GPIO_WritePin>
		  break;
 8000f0e:	e043      	b.n	8000f98 <stepper_configure_steps+0xd2>
		case 1:	// {MS2,MS1} = 2'b01 : 1/32nd Microstep
		  HAL_GPIO_WritePin(driver->MS2_PORT, driver->MS2_PIN, GPIO_PIN_RESET);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6918      	ldr	r0, [r3, #16]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	8a9b      	ldrh	r3, [r3, #20]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	f000 fe2f 	bl	8001b7e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(driver->MS1_PORT, driver->MS1_PIN, GPIO_PIN_SET);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6898      	ldr	r0, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	899b      	ldrh	r3, [r3, #12]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	f000 fe27 	bl	8001b7e <HAL_GPIO_WritePin>
		  break;
 8000f30:	e032      	b.n	8000f98 <stepper_configure_steps+0xd2>
		case 2:	// {MS2,MS1} = 2'b10 : 1/64th Microstep
		  HAL_GPIO_WritePin(driver->MS2_PORT, driver->MS2_PIN, GPIO_PIN_SET);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6918      	ldr	r0, [r3, #16]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	8a9b      	ldrh	r3, [r3, #20]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	f000 fe1e 	bl	8001b7e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(driver->MS1_PORT, driver->MS1_PIN, GPIO_PIN_RESET);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6898      	ldr	r0, [r3, #8]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	899b      	ldrh	r3, [r3, #12]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	f000 fe16 	bl	8001b7e <HAL_GPIO_WritePin>
		  break;
 8000f52:	e021      	b.n	8000f98 <stepper_configure_steps+0xd2>
		case 3: 	// {MS2,MS1} = 2'b11 : 1/16th Microstep
		  HAL_GPIO_WritePin(driver->MS2_PORT, driver->MS2_PIN, GPIO_PIN_SET);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6918      	ldr	r0, [r3, #16]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	8a9b      	ldrh	r3, [r3, #20]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	0019      	movs	r1, r3
 8000f60:	f000 fe0d 	bl	8001b7e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(driver->MS1_PORT, driver->MS1_PIN, GPIO_PIN_SET);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6898      	ldr	r0, [r3, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	899b      	ldrh	r3, [r3, #12]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	0019      	movs	r1, r3
 8000f70:	f000 fe05 	bl	8001b7e <HAL_GPIO_WritePin>
		  break;
 8000f74:	e010      	b.n	8000f98 <stepper_configure_steps+0xd2>
		default:	// {MS2,MS1} = 2'b00 : 1/8th Microstep
		  HAL_GPIO_WritePin(driver->MS2_PORT, driver->MS2_PIN, GPIO_PIN_RESET);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6918      	ldr	r0, [r3, #16]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	8a9b      	ldrh	r3, [r3, #20]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	0019      	movs	r1, r3
 8000f82:	f000 fdfc 	bl	8001b7e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(driver->MS1_PORT, driver->MS1_PIN, GPIO_PIN_RESET);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6898      	ldr	r0, [r3, #8]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	899b      	ldrh	r3, [r3, #12]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	0019      	movs	r1, r3
 8000f92:	f000 fdf4 	bl	8001b7e <HAL_GPIO_WritePin>
		  break;
 8000f96:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <stepper_enable>:

void stepper_enable(stepper_driver_t *driver)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	// ENABLE MOTOR (ACTIVE LOW, DRIVE LOW TO ENABLE)
	HAL_GPIO_WritePin(driver->ENABLE_PORT, driver->ENABLE_PIN, GPIO_PIN_RESET);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	889b      	ldrh	r3, [r3, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	0019      	movs	r1, r3
 8000fb4:	f000 fde3 	bl	8001b7e <HAL_GPIO_WritePin>

}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <delay_us>:
	// DISABLE MOTOR (ACTIVE LOW, DRIVE HIGH TO DISABLE)
	HAL_GPIO_WritePin(driver->ENABLE_PORT, driver->ENABLE_PIN, GPIO_PIN_SET);
}

void delay_us (uint16_t delay) //REMEMBER TO CONFIGURE TIMER CORRECTLY!!!
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	1dbb      	adds	r3, r7, #6
 8000fca:	801a      	strh	r2, [r3, #0]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <delay_us+0x30>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <delay_us+0x30>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fdc:	1dbb      	adds	r3, r7, #6
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d3f8      	bcc.n	8000fd6 <delay_us+0x16>
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	20000084 	.word	0x20000084

08000ff4 <stepper_move>:

void stepper_move(stepper_driver_t *driver_one, stepper_driver_t *driver_two, uint16_t steps, bool move_x, bool move_y)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	0019      	movs	r1, r3
 8001000:	1dbb      	adds	r3, r7, #6
 8001002:	801a      	strh	r2, [r3, #0]
 8001004:	1d7b      	adds	r3, r7, #5
 8001006:	1c0a      	adds	r2, r1, #0
 8001008:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < steps; i++)
 800100a:	2316      	movs	r3, #22
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]
 8001012:	e03d      	b.n	8001090 <stepper_move+0x9c>
    {
        if (move_x)
 8001014:	1d7b      	adds	r3, r7, #5
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d007      	beq.n	800102c <stepper_move+0x38>
        {
            HAL_GPIO_WritePin(driver_one->STEP_PORT, driver_one->STEP_PIN, GPIO_PIN_SET);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6998      	ldr	r0, [r3, #24]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	8b9b      	ldrh	r3, [r3, #28]
 8001024:	2201      	movs	r2, #1
 8001026:	0019      	movs	r1, r3
 8001028:	f000 fda9 	bl	8001b7e <HAL_GPIO_WritePin>
        }
        if (move_y)
 800102c:	2320      	movs	r3, #32
 800102e:	18fb      	adds	r3, r7, r3
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <stepper_move+0x52>
        {
            HAL_GPIO_WritePin(driver_two->STEP_PORT, driver_two->STEP_PIN, GPIO_PIN_SET);
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	6998      	ldr	r0, [r3, #24]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	8b9b      	ldrh	r3, [r3, #28]
 800103e:	2201      	movs	r2, #1
 8001040:	0019      	movs	r1, r3
 8001042:	f000 fd9c 	bl	8001b7e <HAL_GPIO_WritePin>
        }
        delay_us(125);
 8001046:	207d      	movs	r0, #125	@ 0x7d
 8001048:	f7ff ffba 	bl	8000fc0 <delay_us>

        if (move_x)
 800104c:	1d7b      	adds	r3, r7, #5
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d007      	beq.n	8001064 <stepper_move+0x70>
        {
            HAL_GPIO_WritePin(driver_one->STEP_PORT, driver_one->STEP_PIN, GPIO_PIN_RESET);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6998      	ldr	r0, [r3, #24]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	8b9b      	ldrh	r3, [r3, #28]
 800105c:	2200      	movs	r2, #0
 800105e:	0019      	movs	r1, r3
 8001060:	f000 fd8d 	bl	8001b7e <HAL_GPIO_WritePin>
        }
        if (move_y)
 8001064:	2320      	movs	r3, #32
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <stepper_move+0x8a>
        {
            HAL_GPIO_WritePin(driver_two->STEP_PORT, driver_two->STEP_PIN, GPIO_PIN_RESET);
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	6998      	ldr	r0, [r3, #24]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	8b9b      	ldrh	r3, [r3, #28]
 8001076:	2200      	movs	r2, #0
 8001078:	0019      	movs	r1, r3
 800107a:	f000 fd80 	bl	8001b7e <HAL_GPIO_WritePin>
        }
        delay_us(250);
 800107e:	20fa      	movs	r0, #250	@ 0xfa
 8001080:	f7ff ff9e 	bl	8000fc0 <delay_us>
    for (uint16_t i = 0; i < steps; i++)
 8001084:	2116      	movs	r1, #22
 8001086:	187b      	adds	r3, r7, r1
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	187b      	adds	r3, r7, r1
 800108c:	3201      	adds	r2, #1
 800108e:	801a      	strh	r2, [r3, #0]
 8001090:	2316      	movs	r3, #22
 8001092:	18fa      	adds	r2, r7, r3
 8001094:	1dbb      	adds	r3, r7, #6
 8001096:	8812      	ldrh	r2, [r2, #0]
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d3ba      	bcc.n	8001014 <stepper_move+0x20>
    }
}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b006      	add	sp, #24
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <stepper_process_command>:

void stepper_process_command(stepper_driver_t *driver_one, stepper_driver_t *driver_two, volatile char* command)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b093      	sub	sp, #76	@ 0x4c
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]



    // Temporary buffers for extracting directions from the command string
    char *dx_command = strtok(command, ",");
 80010b4:	4a69      	ldr	r2, [pc, #420]	@ (800125c <stepper_process_command+0x1b4>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	0011      	movs	r1, r2
 80010ba:	0018      	movs	r0, r3
 80010bc:	f003 fea4 	bl	8004e08 <strtok>
 80010c0:	0003      	movs	r3, r0
 80010c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    char *dy_command = strtok(NULL, ",");  // Assumes command is in the format "DX, DY"
 80010c4:	4b65      	ldr	r3, [pc, #404]	@ (800125c <stepper_process_command+0x1b4>)
 80010c6:	0019      	movs	r1, r3
 80010c8:	2000      	movs	r0, #0
 80010ca:	f003 fe9d 	bl	8004e08 <strtok>
 80010ce:	0003      	movs	r3, r0
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34

    bool move_x = false;
 80010d2:	243f      	movs	r4, #63	@ 0x3f
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
    bool move_y = false;
 80010da:	233e      	movs	r3, #62	@ 0x3e
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
    uint16_t steps = 64;
 80010e2:	2332      	movs	r3, #50	@ 0x32
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	2240      	movs	r2, #64	@ 0x40
 80010e8:	801a      	strh	r2, [r3, #0]

    if (dx_command != NULL && dy_command != NULL)
 80010ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d100      	bne.n	80010f2 <stepper_process_command+0x4a>
 80010f0:	e09b      	b.n	800122a <stepper_process_command+0x182>
 80010f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d100      	bne.n	80010fa <stepper_process_command+0x52>
 80010f8:	e097      	b.n	800122a <stepper_process_command+0x182>
    {
        // Handle the dx direction (LEFT/RIGHT or NONE)
        if(strcmp(dx_command, "LEFT") == 0)
 80010fa:	4a59      	ldr	r2, [pc, #356]	@ (8001260 <stepper_process_command+0x1b8>)
 80010fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010fe:	0011      	movs	r1, r2
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff f801 	bl	8000108 <strcmp>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d10b      	bne.n	8001122 <stepper_process_command+0x7a>
        {
            HAL_GPIO_WritePin(driver_one->DIR_PORT, driver_one->DIR_PIN, GPIO_PIN_RESET);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6a18      	ldr	r0, [r3, #32]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001112:	2200      	movs	r2, #0
 8001114:	0019      	movs	r1, r3
 8001116:	f000 fd32 	bl	8001b7e <HAL_GPIO_WritePin>
            move_x = true;
 800111a:	193b      	adds	r3, r7, r4
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e013      	b.n	800114a <stepper_process_command+0xa2>
        }
        else if(strcmp(dx_command, "RIGHT") == 0)
 8001122:	4a50      	ldr	r2, [pc, #320]	@ (8001264 <stepper_process_command+0x1bc>)
 8001124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f7fe ffed 	bl	8000108 <strcmp>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d10b      	bne.n	800114a <stepper_process_command+0xa2>
        {
            HAL_GPIO_WritePin(driver_one->DIR_PORT, driver_one->DIR_PIN, GPIO_PIN_SET);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6a18      	ldr	r0, [r3, #32]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800113a:	2201      	movs	r2, #1
 800113c:	0019      	movs	r1, r3
 800113e:	f000 fd1e 	bl	8001b7e <HAL_GPIO_WritePin>
            move_x = true;
 8001142:	233f      	movs	r3, #63	@ 0x3f
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
        }

        // Handle the dy direction (UP/DOWN or NONE)
        if(strcmp(dy_command, "DOWN") == 0)
 800114a:	4a47      	ldr	r2, [pc, #284]	@ (8001268 <stepper_process_command+0x1c0>)
 800114c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800114e:	0011      	movs	r1, r2
 8001150:	0018      	movs	r0, r3
 8001152:	f7fe ffd9 	bl	8000108 <strcmp>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	d11f      	bne.n	800119a <stepper_process_command+0xf2>
        {
            if(driver_two->position + steps <= driver_two->position_max)
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800115e:	001a      	movs	r2, r3
 8001160:	2432      	movs	r4, #50	@ 0x32
 8001162:	193b      	adds	r3, r7, r4
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	18d3      	adds	r3, r2, r3
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800116c:	4293      	cmp	r3, r2
 800116e:	dc42      	bgt.n	80011f6 <stepper_process_command+0x14e>
            {
                HAL_GPIO_WritePin(driver_two->DIR_PORT, driver_two->DIR_PIN, GPIO_PIN_RESET);
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	6a18      	ldr	r0, [r3, #32]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001178:	2200      	movs	r2, #0
 800117a:	0019      	movs	r1, r3
 800117c:	f000 fcff 	bl	8001b7e <HAL_GPIO_WritePin>
                move_y = true;
 8001180:	233e      	movs	r3, #62	@ 0x3e
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
                driver_two->position += steps;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800118c:	193b      	adds	r3, r7, r4
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	18d3      	adds	r3, r2, r3
 8001192:	b29a      	uxth	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	861a      	strh	r2, [r3, #48]	@ 0x30
 8001198:	e02d      	b.n	80011f6 <stepper_process_command+0x14e>
            }
        }
        else if(strcmp(dy_command, "UP") == 0)
 800119a:	4a34      	ldr	r2, [pc, #208]	@ (800126c <stepper_process_command+0x1c4>)
 800119c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800119e:	0011      	movs	r1, r2
 80011a0:	0018      	movs	r0, r3
 80011a2:	f7fe ffb1 	bl	8000108 <strcmp>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d125      	bne.n	80011f6 <stepper_process_command+0x14e>
        {
            if(HAL_GPIO_ReadPin(driver_two->ENDSTOP_PORT, driver_two->ENDSTOP_PIN) == GPIO_PIN_SET)
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80011b2:	0019      	movs	r1, r3
 80011b4:	0010      	movs	r0, r2
 80011b6:	f000 fcc5 	bl	8001b44 <HAL_GPIO_ReadPin>
 80011ba:	0003      	movs	r3, r0
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d11a      	bne.n	80011f6 <stepper_process_command+0x14e>
            {
                if(driver_two->position >= steps)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80011c4:	2432      	movs	r4, #50	@ 0x32
 80011c6:	193a      	adds	r2, r7, r4
 80011c8:	8812      	ldrh	r2, [r2, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d813      	bhi.n	80011f6 <stepper_process_command+0x14e>
                {
                    HAL_GPIO_WritePin(driver_two->DIR_PORT, driver_two->DIR_PIN, GPIO_PIN_SET);
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	6a18      	ldr	r0, [r3, #32]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80011d6:	2201      	movs	r2, #1
 80011d8:	0019      	movs	r1, r3
 80011da:	f000 fcd0 	bl	8001b7e <HAL_GPIO_WritePin>
                    move_y = true;
 80011de:	233e      	movs	r3, #62	@ 0x3e
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
                    driver_two->position -= steps;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80011ea:	193b      	adds	r3, r7, r4
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	861a      	strh	r2, [r3, #48]	@ 0x30
                }
            }
        }

        // Move motors only in the specified directions
        if (move_x || move_y)
 80011f6:	233f      	movs	r3, #63	@ 0x3f
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d104      	bne.n	800120a <stepper_process_command+0x162>
 8001200:	233e      	movs	r3, #62	@ 0x3e
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d023      	beq.n	8001252 <stepper_process_command+0x1aa>
        {
            stepper_move(driver_one, driver_two, steps, move_x, move_y);
 800120a:	233f      	movs	r3, #63	@ 0x3f
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	781c      	ldrb	r4, [r3, #0]
 8001210:	2332      	movs	r3, #50	@ 0x32
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	881a      	ldrh	r2, [r3, #0]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	233e      	movs	r3, #62	@ 0x3e
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	0023      	movs	r3, r4
 8001224:	f7ff fee6 	bl	8000ff4 <stepper_move>
        if (move_x || move_y)
 8001228:	e013      	b.n	8001252 <stepper_process_command+0x1aa>
    }
    else
    {
        // Handle invalid command format
        char debug_msg[32];
        sprintf(debug_msg, "Invalid command format: %s\r\n", command);
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4910      	ldr	r1, [pc, #64]	@ (8001270 <stepper_process_command+0x1c8>)
 800122e:	2410      	movs	r4, #16
 8001230:	193b      	adds	r3, r7, r4
 8001232:	0018      	movs	r0, r3
 8001234:	f003 fd74 	bl	8004d20 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8001238:	193b      	adds	r3, r7, r4
 800123a:	0018      	movs	r0, r3
 800123c:	f7fe ff6e 	bl	800011c <strlen>
 8001240:	0003      	movs	r3, r0
 8001242:	b29a      	uxth	r2, r3
 8001244:	2301      	movs	r3, #1
 8001246:	425b      	negs	r3, r3
 8001248:	1939      	adds	r1, r7, r4
 800124a:	480a      	ldr	r0, [pc, #40]	@ (8001274 <stepper_process_command+0x1cc>)
 800124c:	f001 fcd2 	bl	8002bf4 <HAL_UART_Transmit>
    }
}
 8001250:	e000      	b.n	8001254 <stepper_process_command+0x1ac>
        if (move_x || move_y)
 8001252:	46c0      	nop			@ (mov r8, r8)
}
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b011      	add	sp, #68	@ 0x44
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	08005fe0 	.word	0x08005fe0
 8001260:	08005fe4 	.word	0x08005fe4
 8001264:	08005fec 	.word	0x08005fec
 8001268:	08005ff4 	.word	0x08005ff4
 800126c:	08005ffc 	.word	0x08005ffc
 8001270:	08006000 	.word	0x08006000
 8001274:	200000d0 	.word	0x200000d0

08001278 <stepper_home>:

void stepper_home(stepper_driver_t *driver_one, stepper_driver_t *driver_two, stepper_driver_t *driver_three)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af02      	add	r7, sp, #8
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
	uint16_t steps = 1;
 8001284:	2312      	movs	r3, #18
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	2201      	movs	r2, #1
 800128a:	801a      	strh	r2, [r3, #0]


	HAL_GPIO_WritePin(driver_two->DIR_PORT, driver_two->DIR_PIN, GPIO_PIN_RESET);	// MOVE TOWARDS SWITCH
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	6a18      	ldr	r0, [r3, #32]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001294:	2200      	movs	r2, #0
 8001296:	0019      	movs	r1, r3
 8001298:	f000 fc71 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(driver_three->DIR_PORT, driver_three->DIR_PIN, GPIO_PIN_SET); // MOVE TOWARDS SWITCH
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a18      	ldr	r0, [r3, #32]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80012a4:	2201      	movs	r2, #1
 80012a6:	0019      	movs	r1, r3
 80012a8:	f000 fc69 	bl	8001b7e <HAL_GPIO_WritePin>


	while(driver_three->ENDSTOP_FLAG == 0)
 80012ac:	e01b      	b.n	80012e6 <stepper_home+0x6e>
	{
		if(HAL_GPIO_ReadPin(driver_three->ENDSTOP_PORT, driver_three->ENDSTOP_PIN) == GPIO_PIN_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80012b6:	0019      	movs	r1, r3
 80012b8:	0010      	movs	r0, r2
 80012ba:	f000 fc43 	bl	8001b44 <HAL_GPIO_ReadPin>
 80012be:	1e03      	subs	r3, r0, #0
 80012c0:	d107      	bne.n	80012d2 <stepper_home+0x5a>
		{
			driver_three->ENDSTOP_FLAG = 1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	222e      	movs	r2, #46	@ 0x2e
 80012c6:	2101      	movs	r1, #1
 80012c8:	5499      	strb	r1, [r3, r2]
			driver_three->position = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	861a      	strh	r2, [r3, #48]	@ 0x30
			break;
 80012d0:	e00e      	b.n	80012f0 <stepper_home+0x78>
		} else {
			stepper_move(driver_two, driver_three, steps, false, true);
 80012d2:	2312      	movs	r3, #18
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	881a      	ldrh	r2, [r3, #0]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	68b8      	ldr	r0, [r7, #8]
 80012dc:	2301      	movs	r3, #1
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2300      	movs	r3, #0
 80012e2:	f7ff fe87 	bl	8000ff4 <stepper_move>
	while(driver_three->ENDSTOP_FLAG == 0)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	222e      	movs	r2, #46	@ 0x2e
 80012ea:	5c9b      	ldrb	r3, [r3, r2]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0de      	beq.n	80012ae <stepper_home+0x36>

		}
	}

	while(driver_two->ENDSTOP_FLAG == 0)
 80012f0:	e01b      	b.n	800132a <stepper_home+0xb2>
	{
		if(HAL_GPIO_ReadPin(driver_two->ENDSTOP_PORT, driver_two->ENDSTOP_PIN) == GPIO_PIN_RESET)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80012fa:	0019      	movs	r1, r3
 80012fc:	0010      	movs	r0, r2
 80012fe:	f000 fc21 	bl	8001b44 <HAL_GPIO_ReadPin>
 8001302:	1e03      	subs	r3, r0, #0
 8001304:	d107      	bne.n	8001316 <stepper_home+0x9e>
		{
			driver_two->ENDSTOP_FLAG = 1;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	222e      	movs	r2, #46	@ 0x2e
 800130a:	2101      	movs	r1, #1
 800130c:	5499      	strb	r1, [r3, r2]
			driver_two->position = 0;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2200      	movs	r2, #0
 8001312:	861a      	strh	r2, [r3, #48]	@ 0x30
			break;
 8001314:	e00e      	b.n	8001334 <stepper_home+0xbc>
		} else {
			stepper_move(driver_two, driver_three, steps, true, false);
 8001316:	2312      	movs	r3, #18
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	881a      	ldrh	r2, [r3, #0]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	68b8      	ldr	r0, [r7, #8]
 8001320:	2300      	movs	r3, #0
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2301      	movs	r3, #1
 8001326:	f7ff fe65 	bl	8000ff4 <stepper_move>
	while(driver_two->ENDSTOP_FLAG == 0)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	222e      	movs	r2, #46	@ 0x2e
 800132e:	5c9b      	ldrb	r3, [r3, r2]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0de      	beq.n	80012f2 <stepper_home+0x7a>
		}
	}



	HAL_GPIO_WritePin(driver_two->DIR_PORT, driver_two->DIR_PIN, GPIO_PIN_SET);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	6a18      	ldr	r0, [r3, #32]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800133c:	2201      	movs	r2, #1
 800133e:	0019      	movs	r1, r3
 8001340:	f000 fc1d 	bl	8001b7e <HAL_GPIO_WritePin>
	uint16_t driver_two_position = 64 * 95;
 8001344:	2310      	movs	r3, #16
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	22be      	movs	r2, #190	@ 0xbe
 800134a:	0152      	lsls	r2, r2, #5
 800134c:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < driver_two_position; i++)
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e012      	b.n	800137a <stepper_home+0x102>
	{
		stepper_move(driver_two, driver_three, steps, true, false);
 8001354:	2312      	movs	r3, #18
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	881a      	ldrh	r2, [r3, #0]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	2300      	movs	r3, #0
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2301      	movs	r3, #1
 8001364:	f7ff fe46 	bl	8000ff4 <stepper_move>
		driver_two->position += 64;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800136c:	3340      	adds	r3, #64	@ 0x40
 800136e:	b29a      	uxth	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	861a      	strh	r2, [r3, #48]	@ 0x30
	for(int i = 0; i < driver_two_position; i++)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	2110      	movs	r1, #16
 800137c:	187b      	adds	r3, r7, r1
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	429a      	cmp	r2, r3
 8001384:	dbe6      	blt.n	8001354 <stepper_home+0xdc>
	}

	driver_three->position_max = 90*64 + driver_two_position;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	22b4      	movs	r2, #180	@ 0xb4
 800138c:	0152      	lsls	r2, r2, #5
 800138e:	4694      	mov	ip, r2
 8001390:	4463      	add	r3, ip
 8001392:	b29a      	uxth	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	865a      	strh	r2, [r3, #50]	@ 0x32



}
 8001398:	46c0      	nop			@ (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b006      	add	sp, #24
 800139e:	bd80      	pop	{r7, pc}

080013a0 <Reset_Handler>:
 80013a0:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <LoopForever+0x2>)
 80013a2:	4685      	mov	sp, r0
 80013a4:	f7ff fd2e 	bl	8000e04 <SystemInit>
 80013a8:	2100      	movs	r1, #0
 80013aa:	e003      	b.n	80013b4 <LoopCopyDataInit>

080013ac <CopyDataInit>:
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <LoopForever+0x6>)
 80013ae:	585b      	ldr	r3, [r3, r1]
 80013b0:	5043      	str	r3, [r0, r1]
 80013b2:	3104      	adds	r1, #4

080013b4 <LoopCopyDataInit>:
 80013b4:	480a      	ldr	r0, [pc, #40]	@ (80013e0 <LoopForever+0xa>)
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <LoopForever+0xe>)
 80013b8:	1842      	adds	r2, r0, r1
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d3f6      	bcc.n	80013ac <CopyDataInit>
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <LoopForever+0x12>)
 80013c0:	e002      	b.n	80013c8 <LoopFillZerobss>

080013c2 <FillZerobss>:
 80013c2:	2300      	movs	r3, #0
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	3204      	adds	r2, #4

080013c8 <LoopFillZerobss>:
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <LoopForever+0x16>)
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d3f9      	bcc.n	80013c2 <FillZerobss>
 80013ce:	f003 fdcf 	bl	8004f70 <__libc_init_array>
 80013d2:	f7ff f82b 	bl	800042c <main>

080013d6 <LoopForever>:
 80013d6:	e7fe      	b.n	80013d6 <LoopForever>
 80013d8:	20006000 	.word	0x20006000
 80013dc:	08006190 	.word	0x08006190
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000068 	.word	0x20000068
 80013e8:	20000068 	.word	0x20000068
 80013ec:	200005f0 	.word	0x200005f0

080013f0 <ADC1_IRQHandler>:
 80013f0:	e7fe      	b.n	80013f0 <ADC1_IRQHandler>

080013f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fe:	2003      	movs	r0, #3
 8001400:	f000 f80e 	bl	8001420 <HAL_InitTick>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d003      	beq.n	8001410 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e001      	b.n	8001414 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001410:	f7ff fb36 	bl	8000a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001414:	1dfb      	adds	r3, r7, #7
 8001416:	781b      	ldrb	r3, [r3, #0]
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b002      	add	sp, #8
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001428:	230f      	movs	r3, #15
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001430:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <HAL_InitTick+0x88>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d02b      	beq.n	8001490 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001438:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <HAL_InitTick+0x8c>)
 800143a:	681c      	ldr	r4, [r3, #0]
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <HAL_InitTick+0x88>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	0019      	movs	r1, r3
 8001442:	23fa      	movs	r3, #250	@ 0xfa
 8001444:	0098      	lsls	r0, r3, #2
 8001446:	f7fe fe7b 	bl	8000140 <__udivsi3>
 800144a:	0003      	movs	r3, r0
 800144c:	0019      	movs	r1, r3
 800144e:	0020      	movs	r0, r4
 8001450:	f7fe fe76 	bl	8000140 <__udivsi3>
 8001454:	0003      	movs	r3, r0
 8001456:	0018      	movs	r0, r3
 8001458:	f000 f919 	bl	800168e <HAL_SYSTICK_Config>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d112      	bne.n	8001486 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d80a      	bhi.n	800147c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	2301      	movs	r3, #1
 800146a:	425b      	negs	r3, r3
 800146c:	2200      	movs	r2, #0
 800146e:	0018      	movs	r0, r3
 8001470:	f000 f8e8 	bl	8001644 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001474:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <HAL_InitTick+0x90>)
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e00d      	b.n	8001498 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800147c:	230f      	movs	r3, #15
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	e008      	b.n	8001498 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001486:	230f      	movs	r3, #15
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	e003      	b.n	8001498 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001490:	230f      	movs	r3, #15
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001498:	230f      	movs	r3, #15
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	781b      	ldrb	r3, [r3, #0]
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b005      	add	sp, #20
 80014a4:	bd90      	pop	{r4, r7, pc}
 80014a6:	46c0      	nop			@ (mov r8, r8)
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_IncTick+0x1c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	001a      	movs	r2, r3
 80014be:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <HAL_IncTick+0x20>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	18d2      	adds	r2, r2, r3
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_IncTick+0x20>)
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	46c0      	nop			@ (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	20000008 	.word	0x20000008
 80014d4:	200004a0 	.word	0x200004a0

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b02      	ldr	r3, [pc, #8]	@ (80014e8 <HAL_GetTick+0x10>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	200004a0 	.word	0x200004a0

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	0002      	movs	r2, r0
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	1dfb      	adds	r3, r7, #7
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80014fe:	d809      	bhi.n	8001514 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	001a      	movs	r2, r3
 8001506:	231f      	movs	r3, #31
 8001508:	401a      	ands	r2, r3
 800150a:	4b04      	ldr	r3, [pc, #16]	@ (800151c <__NVIC_EnableIRQ+0x30>)
 800150c:	2101      	movs	r1, #1
 800150e:	4091      	lsls	r1, r2
 8001510:	000a      	movs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001514:	46c0      	nop			@ (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	0002      	movs	r2, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b7f      	cmp	r3, #127	@ 0x7f
 8001534:	d828      	bhi.n	8001588 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001536:	4a2f      	ldr	r2, [pc, #188]	@ (80015f4 <__NVIC_SetPriority+0xd4>)
 8001538:	1dfb      	adds	r3, r7, #7
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b25b      	sxtb	r3, r3
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	33c0      	adds	r3, #192	@ 0xc0
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	589b      	ldr	r3, [r3, r2]
 8001546:	1dfa      	adds	r2, r7, #7
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	0011      	movs	r1, r2
 800154c:	2203      	movs	r2, #3
 800154e:	400a      	ands	r2, r1
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	21ff      	movs	r1, #255	@ 0xff
 8001554:	4091      	lsls	r1, r2
 8001556:	000a      	movs	r2, r1
 8001558:	43d2      	mvns	r2, r2
 800155a:	401a      	ands	r2, r3
 800155c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	019b      	lsls	r3, r3, #6
 8001562:	22ff      	movs	r2, #255	@ 0xff
 8001564:	401a      	ands	r2, r3
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	0018      	movs	r0, r3
 800156c:	2303      	movs	r3, #3
 800156e:	4003      	ands	r3, r0
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001574:	481f      	ldr	r0, [pc, #124]	@ (80015f4 <__NVIC_SetPriority+0xd4>)
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b25b      	sxtb	r3, r3
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	430a      	orrs	r2, r1
 8001580:	33c0      	adds	r3, #192	@ 0xc0
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001586:	e031      	b.n	80015ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001588:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <__NVIC_SetPriority+0xd8>)
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	0019      	movs	r1, r3
 8001590:	230f      	movs	r3, #15
 8001592:	400b      	ands	r3, r1
 8001594:	3b08      	subs	r3, #8
 8001596:	089b      	lsrs	r3, r3, #2
 8001598:	3306      	adds	r3, #6
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	18d3      	adds	r3, r2, r3
 800159e:	3304      	adds	r3, #4
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	1dfa      	adds	r2, r7, #7
 80015a4:	7812      	ldrb	r2, [r2, #0]
 80015a6:	0011      	movs	r1, r2
 80015a8:	2203      	movs	r2, #3
 80015aa:	400a      	ands	r2, r1
 80015ac:	00d2      	lsls	r2, r2, #3
 80015ae:	21ff      	movs	r1, #255	@ 0xff
 80015b0:	4091      	lsls	r1, r2
 80015b2:	000a      	movs	r2, r1
 80015b4:	43d2      	mvns	r2, r2
 80015b6:	401a      	ands	r2, r3
 80015b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	22ff      	movs	r2, #255	@ 0xff
 80015c0:	401a      	ands	r2, r3
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	0018      	movs	r0, r3
 80015c8:	2303      	movs	r3, #3
 80015ca:	4003      	ands	r3, r0
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d0:	4809      	ldr	r0, [pc, #36]	@ (80015f8 <__NVIC_SetPriority+0xd8>)
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	001c      	movs	r4, r3
 80015d8:	230f      	movs	r3, #15
 80015da:	4023      	ands	r3, r4
 80015dc:	3b08      	subs	r3, #8
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	430a      	orrs	r2, r1
 80015e2:	3306      	adds	r3, #6
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	18c3      	adds	r3, r0, r3
 80015e8:	3304      	adds	r3, #4
 80015ea:	601a      	str	r2, [r3, #0]
}
 80015ec:	46c0      	nop			@ (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b003      	add	sp, #12
 80015f2:	bd90      	pop	{r4, r7, pc}
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	1e5a      	subs	r2, r3, #1
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	045b      	lsls	r3, r3, #17
 800160c:	429a      	cmp	r2, r3
 800160e:	d301      	bcc.n	8001614 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001610:	2301      	movs	r3, #1
 8001612:	e010      	b.n	8001636 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <SysTick_Config+0x44>)
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	3a01      	subs	r2, #1
 800161a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161c:	2301      	movs	r3, #1
 800161e:	425b      	negs	r3, r3
 8001620:	2103      	movs	r1, #3
 8001622:	0018      	movs	r0, r3
 8001624:	f7ff ff7c 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <SysTick_Config+0x44>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <SysTick_Config+0x44>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	210f      	movs	r1, #15
 8001650:	187b      	adds	r3, r7, r1
 8001652:	1c02      	adds	r2, r0, #0
 8001654:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	187b      	adds	r3, r7, r1
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b25b      	sxtb	r3, r3
 800165e:	0011      	movs	r1, r2
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	46bd      	mov	sp, r7
 800166a:	b004      	add	sp, #16
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	0002      	movs	r2, r0
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b25b      	sxtb	r3, r3
 8001680:	0018      	movs	r0, r3
 8001682:	f7ff ff33 	bl	80014ec <__NVIC_EnableIRQ>
}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	b002      	add	sp, #8
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff ffaf 	bl	80015fc <SysTick_Config>
 800169e:	0003      	movs	r3, r0
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b002      	add	sp, #8
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e050      	b.n	800175c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2225      	movs	r2, #37	@ 0x25
 80016be:	5c9b      	ldrb	r3, [r3, r2]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d008      	beq.n	80016d8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2204      	movs	r2, #4
 80016ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2224      	movs	r2, #36	@ 0x24
 80016d0:	2100      	movs	r1, #0
 80016d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e041      	b.n	800175c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	210e      	movs	r1, #14
 80016e4:	438a      	bics	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	491c      	ldr	r1, [pc, #112]	@ (8001764 <HAL_DMA_Abort+0xbc>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2101      	movs	r1, #1
 8001704:	438a      	bics	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001708:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <HAL_DMA_Abort+0xc0>)
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	221c      	movs	r2, #28
 8001712:	4013      	ands	r3, r2
 8001714:	2201      	movs	r2, #1
 8001716:	409a      	lsls	r2, r3
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <HAL_DMA_Abort+0xc0>)
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001726:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00c      	beq.n	800174a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800173a:	490a      	ldr	r1, [pc, #40]	@ (8001764 <HAL_DMA_Abort+0xbc>)
 800173c:	400a      	ands	r2, r1
 800173e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001748:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2225      	movs	r2, #37	@ 0x25
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2224      	movs	r2, #36	@ 0x24
 8001756:	2100      	movs	r1, #0
 8001758:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	0018      	movs	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}
 8001764:	fffffeff 	.word	0xfffffeff
 8001768:	40020000 	.word	0x40020000

0800176c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001774:	230f      	movs	r3, #15
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2224      	movs	r2, #36	@ 0x24
 8001780:	2100      	movs	r1, #0
 8001782:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2224      	movs	r2, #36	@ 0x24
 8001788:	5c9b      	ldrb	r3, [r3, r2]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <HAL_DMA_Abort_IT+0x26>
 800178e:	2302      	movs	r3, #2
 8001790:	e05e      	b.n	8001850 <HAL_DMA_Abort_IT+0xe4>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2224      	movs	r2, #36	@ 0x24
 8001796:	2101      	movs	r1, #1
 8001798:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2225      	movs	r2, #37	@ 0x25
 800179e:	5c9b      	ldrb	r3, [r3, r2]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d007      	beq.n	80017b6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2204      	movs	r2, #4
 80017aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017ac:	230f      	movs	r3, #15
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e049      	b.n	800184a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	210e      	movs	r1, #14
 80017c2:	438a      	bics	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	438a      	bics	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e0:	491d      	ldr	r1, [pc, #116]	@ (8001858 <HAL_DMA_Abort_IT+0xec>)
 80017e2:	400a      	ands	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_DMA_Abort_IT+0xf0>)
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	221c      	movs	r2, #28
 80017f0:	4013      	ands	r3, r2
 80017f2:	2201      	movs	r2, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <HAL_DMA_Abort_IT+0xf0>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001804:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00c      	beq.n	8001828 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001818:	490f      	ldr	r1, [pc, #60]	@ (8001858 <HAL_DMA_Abort_IT+0xec>)
 800181a:	400a      	ands	r2, r1
 800181c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001826:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2225      	movs	r2, #37	@ 0x25
 800182c:	2101      	movs	r1, #1
 800182e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2224      	movs	r2, #36	@ 0x24
 8001834:	2100      	movs	r1, #0
 8001836:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	0010      	movs	r0, r2
 8001848:	4798      	blx	r3
    }
  }
  return status;
 800184a:	230f      	movs	r3, #15
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bd80      	pop	{r7, pc}
 8001858:	fffffeff 	.word	0xfffffeff
 800185c:	40020000 	.word	0x40020000

08001860 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800186e:	e153      	b.n	8001b18 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4091      	lsls	r1, r2
 800187a:	000a      	movs	r2, r1
 800187c:	4013      	ands	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d100      	bne.n	8001888 <HAL_GPIO_Init+0x28>
 8001886:	e144      	b.n	8001b12 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x38>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b12      	cmp	r3, #18
 8001896:	d125      	bne.n	80018e4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	08da      	lsrs	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3208      	adds	r2, #8
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	58d3      	ldr	r3, [r2, r3]
 80018a4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	2207      	movs	r2, #7
 80018aa:	4013      	ands	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	409a      	lsls	r2, r3
 80018b2:	0013      	movs	r3, r2
 80018b4:	43da      	mvns	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	220f      	movs	r2, #15
 80018c2:	401a      	ands	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2107      	movs	r1, #7
 80018c8:	400b      	ands	r3, r1
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	409a      	lsls	r2, r3
 80018ce:	0013      	movs	r3, r2
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	6979      	ldr	r1, [r7, #20]
 80018e2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	409a      	lsls	r2, r3
 80018f2:	0013      	movs	r3, r2
 80018f4:	43da      	mvns	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4013      	ands	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2203      	movs	r2, #3
 8001902:	401a      	ands	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	409a      	lsls	r2, r3
 800190a:	0013      	movs	r3, r2
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	4313      	orrs	r3, r2
 8001910:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d00b      	beq.n	8001938 <HAL_GPIO_Init+0xd8>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d007      	beq.n	8001938 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800192c:	2b11      	cmp	r3, #17
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b12      	cmp	r3, #18
 8001936:	d130      	bne.n	800199a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	409a      	lsls	r2, r3
 8001946:	0013      	movs	r3, r2
 8001948:	43da      	mvns	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	4013      	ands	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	409a      	lsls	r2, r3
 800195a:	0013      	movs	r3, r2
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	4313      	orrs	r3, r2
 8001960:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800196e:	2201      	movs	r2, #1
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	409a      	lsls	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	43da      	mvns	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	4013      	ands	r3, r2
 800197c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	2201      	movs	r2, #1
 8001986:	401a      	ands	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	409a      	lsls	r2, r3
 800198c:	0013      	movs	r3, r2
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d017      	beq.n	80019d2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	409a      	lsls	r2, r3
 80019b0:	0013      	movs	r3, r2
 80019b2:	43da      	mvns	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	4013      	ands	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	055b      	lsls	r3, r3, #21
 80019da:	4013      	ands	r3, r2
 80019dc:	d100      	bne.n	80019e0 <HAL_GPIO_Init+0x180>
 80019de:	e098      	b.n	8001b12 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80019e0:	4a53      	ldr	r2, [pc, #332]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3318      	adds	r3, #24
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	589b      	ldr	r3, [r3, r2]
 80019ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2203      	movs	r2, #3
 80019f2:	4013      	ands	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	220f      	movs	r2, #15
 80019f8:	409a      	lsls	r2, r3
 80019fa:	0013      	movs	r3, r2
 80019fc:	43da      	mvns	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	4013      	ands	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	23a0      	movs	r3, #160	@ 0xa0
 8001a08:	05db      	lsls	r3, r3, #23
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d019      	beq.n	8001a42 <HAL_GPIO_Init+0x1e2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a48      	ldr	r2, [pc, #288]	@ (8001b34 <HAL_GPIO_Init+0x2d4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0x1de>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a47      	ldr	r2, [pc, #284]	@ (8001b38 <HAL_GPIO_Init+0x2d8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_GPIO_Init+0x1da>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a46      	ldr	r2, [pc, #280]	@ (8001b3c <HAL_GPIO_Init+0x2dc>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x1d6>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a45      	ldr	r2, [pc, #276]	@ (8001b40 <HAL_GPIO_Init+0x2e0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_GPIO_Init+0x1d2>
 8001a2e:	2305      	movs	r3, #5
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a32:	2306      	movs	r3, #6
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a42:	2300      	movs	r3, #0
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	2103      	movs	r1, #3
 8001a48:	400a      	ands	r2, r1
 8001a4a:	00d2      	lsls	r2, r2, #3
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001a54:	4936      	ldr	r1, [pc, #216]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001a62:	4a33      	ldr	r2, [pc, #204]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	58d3      	ldr	r3, [r2, r3]
 8001a68:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	025b      	lsls	r3, r3, #9
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001a88:	4929      	ldr	r1, [pc, #164]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	2280      	movs	r2, #128	@ 0x80
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001a90:	4a27      	ldr	r2, [pc, #156]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a92:	2384      	movs	r3, #132	@ 0x84
 8001a94:	58d3      	ldr	r3, [r2, r3]
 8001a96:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	2380      	movs	r3, #128	@ 0x80
 8001aa8:	029b      	lsls	r3, r3, #10
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001ab6:	491e      	ldr	r1, [pc, #120]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	2284      	movs	r2, #132	@ 0x84
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	4013      	ands	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	2380      	movs	r3, #128	@ 0x80
 8001ad4:	035b      	lsls	r3, r3, #13
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43da      	mvns	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	039b      	lsls	r3, r3, #14
 8001b00:	4013      	ands	r3, r2
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	3301      	adds	r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	40da      	lsrs	r2, r3
 8001b20:	1e13      	subs	r3, r2, #0
 8001b22:	d000      	beq.n	8001b26 <HAL_GPIO_Init+0x2c6>
 8001b24:	e6a4      	b.n	8001870 <HAL_GPIO_Init+0x10>
  }
}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	46c0      	nop			@ (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b006      	add	sp, #24
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021800 	.word	0x40021800
 8001b34:	50000400 	.word	0x50000400
 8001b38:	50000800 	.word	0x50000800
 8001b3c:	50000c00 	.word	0x50000c00
 8001b40:	50001400 	.word	0x50001400

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	1cbb      	adds	r3, r7, #2
 8001b50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	1cba      	adds	r2, r7, #2
 8001b58:	8812      	ldrh	r2, [r2, #0]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d004      	beq.n	8001b68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5e:	230f      	movs	r3, #15
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b68:	230f      	movs	r3, #15
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b70:	230f      	movs	r3, #15
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	781b      	ldrb	r3, [r3, #0]
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	0008      	movs	r0, r1
 8001b88:	0011      	movs	r1, r2
 8001b8a:	1cbb      	adds	r3, r7, #2
 8001b8c:	1c02      	adds	r2, r0, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
 8001b90:	1c7b      	adds	r3, r7, #1
 8001b92:	1c0a      	adds	r2, r1, #0
 8001b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b96:	1c7b      	adds	r3, r7, #1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9e:	1cbb      	adds	r3, r7, #2
 8001ba0:	881a      	ldrh	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba8:	1cbb      	adds	r3, r7, #2
 8001baa:	881a      	ldrh	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e20f      	b.n	8001fea <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d100      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x1e>
 8001bd4:	e069      	b.n	8001caa <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd6:	4bc8      	ldr	r3, [pc, #800]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2238      	movs	r2, #56	@ 0x38
 8001bdc:	4013      	ands	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d105      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d15d      	bne.n	8001caa <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1fb      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	2380      	movs	r3, #128	@ 0x80
 8001bf8:	025b      	lsls	r3, r3, #9
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_OscConfig+0x56>
 8001bfe:	4bbe      	ldr	r3, [pc, #760]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4bbd      	ldr	r3, [pc, #756]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001c04:	2180      	movs	r1, #128	@ 0x80
 8001c06:	0249      	lsls	r1, r1, #9
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	e020      	b.n	8001c50 <HAL_RCC_OscConfig+0x98>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	23a0      	movs	r3, #160	@ 0xa0
 8001c14:	02db      	lsls	r3, r3, #11
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d10e      	bne.n	8001c38 <HAL_RCC_OscConfig+0x80>
 8001c1a:	4bb7      	ldr	r3, [pc, #732]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4bb6      	ldr	r3, [pc, #728]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001c20:	2180      	movs	r1, #128	@ 0x80
 8001c22:	02c9      	lsls	r1, r1, #11
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	4bb3      	ldr	r3, [pc, #716]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4bb2      	ldr	r3, [pc, #712]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001c2e:	2180      	movs	r1, #128	@ 0x80
 8001c30:	0249      	lsls	r1, r1, #9
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0x98>
 8001c38:	4baf      	ldr	r3, [pc, #700]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4bae      	ldr	r3, [pc, #696]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001c3e:	49af      	ldr	r1, [pc, #700]	@ (8001efc <HAL_RCC_OscConfig+0x344>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	4bac      	ldr	r3, [pc, #688]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4bab      	ldr	r3, [pc, #684]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001c4a:	49ad      	ldr	r1, [pc, #692]	@ (8001f00 <HAL_RCC_OscConfig+0x348>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d014      	beq.n	8001c82 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fc3e 	bl	80014d8 <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c62:	f7ff fc39 	bl	80014d8 <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b64      	cmp	r3, #100	@ 0x64
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e1ba      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c74:	4ba0      	ldr	r3, [pc, #640]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0xaa>
 8001c80:	e013      	b.n	8001caa <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7ff fc29 	bl	80014d8 <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fc24 	bl	80014d8 <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	@ 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e1a5      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9e:	4b96      	ldr	r3, [pc, #600]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	029b      	lsls	r3, r3, #10
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d100      	bne.n	8001cb6 <HAL_RCC_OscConfig+0xfe>
 8001cb4:	e086      	b.n	8001dc4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb6:	4b90      	ldr	r3, [pc, #576]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2238      	movs	r2, #56	@ 0x38
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d12f      	bne.n	8001d26 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e18b      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	4b89      	ldr	r3, [pc, #548]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a8b      	ldr	r2, [pc, #556]	@ (8001f04 <HAL_RCC_OscConfig+0x34c>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	021a      	lsls	r2, r3, #8
 8001ce2:	4b85      	ldr	r3, [pc, #532]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d112      	bne.n	8001d14 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cee:	4b82      	ldr	r3, [pc, #520]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a85      	ldr	r2, [pc, #532]	@ (8001f08 <HAL_RCC_OscConfig+0x350>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d02:	4b7d      	ldr	r3, [pc, #500]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0adb      	lsrs	r3, r3, #11
 8001d08:	2207      	movs	r2, #7
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f0c <HAL_RCC_OscConfig+0x354>)
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	4b7f      	ldr	r3, [pc, #508]	@ (8001f10 <HAL_RCC_OscConfig+0x358>)
 8001d12:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d14:	4b7f      	ldr	r3, [pc, #508]	@ (8001f14 <HAL_RCC_OscConfig+0x35c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff fb81 	bl	8001420 <HAL_InitTick>
 8001d1e:	1e03      	subs	r3, r0, #0
 8001d20:	d050      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e161      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d030      	beq.n	8001d90 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a75      	ldr	r2, [pc, #468]	@ (8001f08 <HAL_RCC_OscConfig+0x350>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	4b6e      	ldr	r3, [pc, #440]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001d42:	4b6d      	ldr	r3, [pc, #436]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b6c      	ldr	r3, [pc, #432]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d48:	2180      	movs	r1, #128	@ 0x80
 8001d4a:	0049      	lsls	r1, r1, #1
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fbc2 	bl	80014d8 <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fbbd 	bl	80014d8 <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e13e      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6c:	4b62      	ldr	r3, [pc, #392]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4013      	ands	r3, r2
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b5f      	ldr	r3, [pc, #380]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a61      	ldr	r2, [pc, #388]	@ (8001f04 <HAL_RCC_OscConfig+0x34c>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	021a      	lsls	r2, r3, #8
 8001d88:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	e019      	b.n	8001dc4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001d90:	4b59      	ldr	r3, [pc, #356]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b58      	ldr	r3, [pc, #352]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001d96:	4960      	ldr	r1, [pc, #384]	@ (8001f18 <HAL_RCC_OscConfig+0x360>)
 8001d98:	400a      	ands	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fb9c 	bl	80014d8 <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001da6:	f7ff fb97 	bl	80014d8 <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e118      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2208      	movs	r2, #8
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d042      	beq.n	8001e54 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001dce:	4b4a      	ldr	r3, [pc, #296]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2238      	movs	r2, #56	@ 0x38
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b18      	cmp	r3, #24
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d138      	bne.n	8001e54 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e101      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d019      	beq.n	8001e22 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001dee:	4b42      	ldr	r3, [pc, #264]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001df0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001df2:	4b41      	ldr	r3, [pc, #260]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001df4:	2101      	movs	r1, #1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fb6d 	bl	80014d8 <HAL_GetTick>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e04:	f7ff fb68 	bl	80014d8 <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0e9      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e16:	4b38      	ldr	r3, [pc, #224]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d0f1      	beq.n	8001e04 <HAL_RCC_OscConfig+0x24c>
 8001e20:	e018      	b.n	8001e54 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e22:	4b35      	ldr	r3, [pc, #212]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001e24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e26:	4b34      	ldr	r3, [pc, #208]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	438a      	bics	r2, r1
 8001e2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fb53 	bl	80014d8 <HAL_GetTick>
 8001e32:	0003      	movs	r3, r0
 8001e34:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e38:	f7ff fb4e 	bl	80014d8 <HAL_GetTick>
 8001e3c:	0002      	movs	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0cf      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4e:	2202      	movs	r2, #2
 8001e50:	4013      	ands	r3, r2
 8001e52:	d1f1      	bne.n	8001e38 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d100      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2a8>
 8001e5e:	e084      	b.n	8001f6a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e60:	230f      	movs	r3, #15
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001e68:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2238      	movs	r2, #56	@ 0x38
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d000      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2c6>
 8001e7c:	e075      	b.n	8001f6a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0b3      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2e0>
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001e8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	430a      	orrs	r2, r1
 8001e94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e96:	e01c      	b.n	8001ed2 <HAL_RCC_OscConfig+0x31a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_OscConfig+0x302>
 8001ea0:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001ea2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ea4:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001eae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eb8:	e00b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x31a>
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001ebc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	438a      	bics	r2, r1
 8001ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001ec8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_RCC_OscConfig+0x340>)
 8001ecc:	2104      	movs	r1, #4
 8001ece:	438a      	bics	r2, r1
 8001ed0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d028      	beq.n	8001f2c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7ff fafd 	bl	80014d8 <HAL_GetTick>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff faf8 	bl	80014d8 <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	4a0b      	ldr	r2, [pc, #44]	@ (8001f1c <HAL_RCC_OscConfig+0x364>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d915      	bls.n	8001f20 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e078      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	fffeffff 	.word	0xfffeffff
 8001f00:	fffbffff 	.word	0xfffbffff
 8001f04:	ffff80ff 	.word	0xffff80ff
 8001f08:	ffffc7ff 	.word	0xffffc7ff
 8001f0c:	02dc6c00 	.word	0x02dc6c00
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000004 	.word	0x20000004
 8001f18:	fffffeff 	.word	0xfffffeff
 8001f1c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f20:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <HAL_RCC_OscConfig+0x43c>)
 8001f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f24:	2202      	movs	r2, #2
 8001f26:	4013      	ands	r3, r2
 8001f28:	d0dc      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x32c>
 8001f2a:	e013      	b.n	8001f54 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fad4 	bl	80014d8 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001f34:	e009      	b.n	8001f4a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7ff facf 	bl	80014d8 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff8 <HAL_RCC_OscConfig+0x440>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e04f      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <HAL_RCC_OscConfig+0x43c>)
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4013      	ands	r3, r2
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f54:	230f      	movs	r3, #15
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d105      	bne.n	8001f6a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f5e:	4b25      	ldr	r3, [pc, #148]	@ (8001ff4 <HAL_RCC_OscConfig+0x43c>)
 8001f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f62:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <HAL_RCC_OscConfig+0x43c>)
 8001f64:	4925      	ldr	r1, [pc, #148]	@ (8001ffc <HAL_RCC_OscConfig+0x444>)
 8001f66:	400a      	ands	r2, r1
 8001f68:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	4013      	ands	r3, r2
 8001f72:	d039      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01b      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <HAL_RCC_OscConfig+0x43c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff4 <HAL_RCC_OscConfig+0x43c>)
 8001f82:	2180      	movs	r1, #128	@ 0x80
 8001f84:	03c9      	lsls	r1, r1, #15
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff faa5 	bl	80014d8 <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f94:	f7ff faa0 	bl	80014d8 <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e021      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8001fa6:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <HAL_RCC_OscConfig+0x43c>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x3dc>
 8001fb2:	e019      	b.n	8001fe8 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <HAL_RCC_OscConfig+0x43c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <HAL_RCC_OscConfig+0x43c>)
 8001fba:	4911      	ldr	r1, [pc, #68]	@ (8002000 <HAL_RCC_OscConfig+0x448>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff fa8a 	bl	80014d8 <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fca:	f7ff fa85 	bl	80014d8 <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e006      	b.n	8001fea <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_RCC_OscConfig+0x43c>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	041b      	lsls	r3, r3, #16
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b006      	add	sp, #24
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	00001388 	.word	0x00001388
 8001ffc:	efffffff 	.word	0xefffffff
 8002000:	ffbfffff 	.word	0xffbfffff

08002004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0f6      	b.n	8002206 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b7d      	ldr	r3, [pc, #500]	@ (8002210 <HAL_RCC_ClockConfig+0x20c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2207      	movs	r2, #7
 800201e:	4013      	ands	r3, r2
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d91e      	bls.n	8002064 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b7a      	ldr	r3, [pc, #488]	@ (8002210 <HAL_RCC_ClockConfig+0x20c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2207      	movs	r2, #7
 800202c:	4393      	bics	r3, r2
 800202e:	0019      	movs	r1, r3
 8002030:	4b77      	ldr	r3, [pc, #476]	@ (8002210 <HAL_RCC_ClockConfig+0x20c>)
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002038:	f7ff fa4e 	bl	80014d8 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002040:	e009      	b.n	8002056 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002042:	f7ff fa49 	bl	80014d8 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	4a71      	ldr	r2, [pc, #452]	@ (8002214 <HAL_RCC_ClockConfig+0x210>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e0d7      	b.n	8002206 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002056:	4b6e      	ldr	r3, [pc, #440]	@ (8002210 <HAL_RCC_ClockConfig+0x20c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2207      	movs	r2, #7
 800205c:	4013      	ands	r3, r2
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d1ee      	bne.n	8002042 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2202      	movs	r2, #2
 800206a:	4013      	ands	r3, r2
 800206c:	d017      	beq.n	800209e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2204      	movs	r2, #4
 8002074:	4013      	ands	r3, r2
 8002076:	d008      	beq.n	800208a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002078:	4b67      	ldr	r3, [pc, #412]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a67      	ldr	r2, [pc, #412]	@ (800221c <HAL_RCC_ClockConfig+0x218>)
 800207e:	401a      	ands	r2, r3
 8002080:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 8002082:	21b0      	movs	r1, #176	@ 0xb0
 8002084:	0109      	lsls	r1, r1, #4
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208a:	4b63      	ldr	r3, [pc, #396]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4a64      	ldr	r2, [pc, #400]	@ (8002220 <HAL_RCC_ClockConfig+0x21c>)
 8002090:	4013      	ands	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	4b5f      	ldr	r3, [pc, #380]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	d100      	bne.n	80020aa <HAL_RCC_ClockConfig+0xa6>
 80020a8:	e061      	b.n	800216e <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80020aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	221c      	movs	r2, #28
 80020b0:	4393      	bics	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	4b57      	ldr	r3, [pc, #348]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c6:	4b54      	ldr	r3, [pc, #336]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	029b      	lsls	r3, r3, #10
 80020ce:	4013      	ands	r3, r2
 80020d0:	d12b      	bne.n	800212a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e097      	b.n	8002206 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020de:	4b4e      	ldr	r3, [pc, #312]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	2380      	movs	r3, #128	@ 0x80
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4013      	ands	r3, r2
 80020e8:	d11f      	bne.n	800212a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e08b      	b.n	8002206 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80020f6:	4b48      	ldr	r3, [pc, #288]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	4013      	ands	r3, r2
 8002100:	d113      	bne.n	800212a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e07f      	b.n	8002206 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d106      	bne.n	800211c <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800210e:	4b42      	ldr	r3, [pc, #264]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 8002110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d108      	bne.n	800212a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e074      	b.n	8002206 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800211c:	4b3e      	ldr	r3, [pc, #248]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 800211e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002120:	2202      	movs	r2, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e06d      	b.n	8002206 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800212a:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2207      	movs	r2, #7
 8002130:	4393      	bics	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4b37      	ldr	r3, [pc, #220]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800213e:	f7ff f9cb 	bl	80014d8 <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	e009      	b.n	800215c <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	f7ff f9c6 	bl	80014d8 <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	4a30      	ldr	r2, [pc, #192]	@ (8002214 <HAL_RCC_ClockConfig+0x210>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e054      	b.n	8002206 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215c:	4b2e      	ldr	r3, [pc, #184]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2238      	movs	r2, #56	@ 0x38
 8002162:	401a      	ands	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	429a      	cmp	r2, r3
 800216c:	d1ec      	bne.n	8002148 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800216e:	4b28      	ldr	r3, [pc, #160]	@ (8002210 <HAL_RCC_ClockConfig+0x20c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2207      	movs	r2, #7
 8002174:	4013      	ands	r3, r2
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d21e      	bcs.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217c:	4b24      	ldr	r3, [pc, #144]	@ (8002210 <HAL_RCC_ClockConfig+0x20c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2207      	movs	r2, #7
 8002182:	4393      	bics	r3, r2
 8002184:	0019      	movs	r1, r3
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <HAL_RCC_ClockConfig+0x20c>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800218e:	f7ff f9a3 	bl	80014d8 <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002196:	e009      	b.n	80021ac <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7ff f99e 	bl	80014d8 <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002214 <HAL_RCC_ClockConfig+0x210>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e02c      	b.n	8002206 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <HAL_RCC_ClockConfig+0x20c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2207      	movs	r2, #7
 80021b2:	4013      	ands	r3, r2
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d1ee      	bne.n	8002198 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2204      	movs	r2, #4
 80021c0:	4013      	ands	r3, r2
 80021c2:	d009      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	4a16      	ldr	r2, [pc, #88]	@ (8002224 <HAL_RCC_ClockConfig+0x220>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 80021d4:	430a      	orrs	r2, r1
 80021d6:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80021d8:	f000 f82c 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021dc:	0001      	movs	r1, r0
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_RCC_ClockConfig+0x214>)
 80021e0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	220f      	movs	r2, #15
 80021e6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80021e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <HAL_RCC_ClockConfig+0x224>)
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021ee:	221f      	movs	r2, #31
 80021f0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80021f2:	000a      	movs	r2, r1
 80021f4:	40da      	lsrs	r2, r3
 80021f6:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <HAL_RCC_ClockConfig+0x228>)
 80021f8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <HAL_RCC_ClockConfig+0x22c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff f90e 	bl	8001420 <HAL_InitTick>
 8002204:	0003      	movs	r3, r0
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b004      	add	sp, #16
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	40022000 	.word	0x40022000
 8002214:	00001388 	.word	0x00001388
 8002218:	40021000 	.word	0x40021000
 800221c:	ffff84ff 	.word	0xffff84ff
 8002220:	fffff0ff 	.word	0xfffff0ff
 8002224:	ffff8fff 	.word	0xffff8fff
 8002228:	08006020 	.word	0x08006020
 800222c:	20000000 	.word	0x20000000
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800223a:	4b27      	ldr	r3, [pc, #156]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	2207      	movs	r2, #7
 8002242:	4013      	ands	r3, r2
 8002244:	3301      	adds	r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002248:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2238      	movs	r2, #56	@ 0x38
 800224e:	4013      	ands	r3, r2
 8002250:	d10f      	bne.n	8002272 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002252:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0adb      	lsrs	r3, r3, #11
 8002258:	2207      	movs	r2, #7
 800225a:	4013      	ands	r3, r2
 800225c:	2201      	movs	r2, #1
 800225e:	409a      	lsls	r2, r3
 8002260:	0013      	movs	r3, r2
 8002262:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	481d      	ldr	r0, [pc, #116]	@ (80022dc <HAL_RCC_GetSysClockFreq+0xa8>)
 8002268:	f7fd ff6a 	bl	8000140 <__udivsi3>
 800226c:	0003      	movs	r3, r0
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e027      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002272:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2238      	movs	r2, #56	@ 0x38
 8002278:	4013      	ands	r3, r2
 800227a:	2b08      	cmp	r3, #8
 800227c:	d102      	bne.n	8002284 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800227e:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <HAL_RCC_GetSysClockFreq+0xa8>)
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	e01e      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002284:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2238      	movs	r2, #56	@ 0x38
 800228a:	4013      	ands	r3, r2
 800228c:	2b20      	cmp	r3, #32
 800228e:	d103      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002290:	2380      	movs	r3, #128	@ 0x80
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	e014      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002298:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2238      	movs	r2, #56	@ 0x38
 800229e:	4013      	ands	r3, r2
 80022a0:	2b18      	cmp	r3, #24
 80022a2:	d103      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80022a4:	23fa      	movs	r3, #250	@ 0xfa
 80022a6:	01db      	lsls	r3, r3, #7
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80022ac:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2238      	movs	r2, #56	@ 0x38
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	d102      	bne.n	80022be <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 80022b8:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <HAL_RCC_GetSysClockFreq+0xa8>)
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	e001      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7fd ff3b 	bl	8000140 <__udivsi3>
 80022ca:	0003      	movs	r3, r0
 80022cc:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b004      	add	sp, #16
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	02dc6c00 	.word	0x02dc6c00

080022e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80022e4:	f7ff ffa6 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80022e8:	0001      	movs	r1, r0
 80022ea:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <HAL_RCC_GetHCLKFreq+0x30>)
 80022ec:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	220f      	movs	r2, #15
 80022f2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80022f4:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <HAL_RCC_GetHCLKFreq+0x34>)
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80022fa:	221f      	movs	r2, #31
 80022fc:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80022fe:	000a      	movs	r2, r1
 8002300:	40da      	lsrs	r2, r3
 8002302:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_RCC_GetHCLKFreq+0x38>)
 8002304:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <HAL_RCC_GetHCLKFreq+0x38>)
 8002308:	681b      	ldr	r3, [r3, #0]
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	08006020 	.word	0x08006020
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002320:	f7ff ffde 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 8002324:	0001      	movs	r1, r0
 8002326:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	0b1b      	lsrs	r3, r3, #12
 800232c:	2207      	movs	r2, #7
 800232e:	401a      	ands	r2, r3
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	58d3      	ldr	r3, [r2, r3]
 8002336:	221f      	movs	r2, #31
 8002338:	4013      	ands	r3, r2
 800233a:	40d9      	lsrs	r1, r3
 800233c:	000b      	movs	r3, r1
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	08006060 	.word	0x08006060

0800234c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002354:	2313      	movs	r3, #19
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800235c:	2312      	movs	r3, #18
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2240      	movs	r2, #64	@ 0x40
 800236a:	4013      	ands	r3, r2
 800236c:	d100      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800236e:	e079      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002370:	2011      	movs	r0, #17
 8002372:	183b      	adds	r3, r7, r0
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002378:	4b6a      	ldr	r3, [pc, #424]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800237a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	055b      	lsls	r3, r3, #21
 8002380:	4013      	ands	r3, r2
 8002382:	d110      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002384:	4b67      	ldr	r3, [pc, #412]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002386:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002388:	4b66      	ldr	r3, [pc, #408]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800238a:	2180      	movs	r1, #128	@ 0x80
 800238c:	0549      	lsls	r1, r1, #21
 800238e:	430a      	orrs	r2, r1
 8002390:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002392:	4b64      	ldr	r3, [pc, #400]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002396:	2380      	movs	r3, #128	@ 0x80
 8002398:	055b      	lsls	r3, r3, #21
 800239a:	4013      	ands	r3, r2
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a0:	183b      	adds	r3, r7, r0
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80023a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023aa:	23c0      	movs	r3, #192	@ 0xc0
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4013      	ands	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d019      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d014      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80023c2:	4b58      	ldr	r3, [pc, #352]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c6:	4a58      	ldr	r2, [pc, #352]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023cc:	4b55      	ldr	r3, [pc, #340]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023d0:	4b54      	ldr	r3, [pc, #336]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	0249      	lsls	r1, r1, #9
 80023d6:	430a      	orrs	r2, r1
 80023d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023da:	4b52      	ldr	r3, [pc, #328]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023de:	4b51      	ldr	r3, [pc, #324]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023e0:	4952      	ldr	r1, [pc, #328]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80023e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	d016      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7ff f870 	bl	80014d8 <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80023fc:	e00c      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fe:	f7ff f86b 	bl	80014d8 <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	4a49      	ldr	r2, [pc, #292]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d904      	bls.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800240e:	2313      	movs	r3, #19
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	2203      	movs	r2, #3
 8002414:	701a      	strb	r2, [r3, #0]
          break;
 8002416:	e004      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002418:	4b42      	ldr	r3, [pc, #264]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241c:	2202      	movs	r2, #2
 800241e:	4013      	ands	r3, r2
 8002420:	d0ed      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002422:	2313      	movs	r3, #19
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800242c:	4b3d      	ldr	r3, [pc, #244]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800242e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002430:	4a3d      	ldr	r2, [pc, #244]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002432:	4013      	ands	r3, r2
 8002434:	0019      	movs	r1, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	4b3a      	ldr	r3, [pc, #232]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800243c:	430a      	orrs	r2, r1
 800243e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002440:	e005      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002442:	2312      	movs	r3, #18
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	2213      	movs	r2, #19
 8002448:	18ba      	adds	r2, r7, r2
 800244a:	7812      	ldrb	r2, [r2, #0]
 800244c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800244e:	2311      	movs	r3, #17
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d105      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002458:	4b32      	ldr	r3, [pc, #200]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800245a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800245c:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800245e:	4935      	ldr	r1, [pc, #212]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002460:	400a      	ands	r2, r1
 8002462:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2201      	movs	r2, #1
 800246a:	4013      	ands	r3, r2
 800246c:	d009      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800246e:	4b2d      	ldr	r3, [pc, #180]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002472:	2203      	movs	r2, #3
 8002474:	4393      	bics	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	4b29      	ldr	r3, [pc, #164]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800247e:	430a      	orrs	r2, r1
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2202      	movs	r2, #2
 8002488:	4013      	ands	r3, r2
 800248a:	d009      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800248c:	4b25      	ldr	r3, [pc, #148]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800248e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002490:	4a29      	ldr	r2, [pc, #164]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b22      	ldr	r3, [pc, #136]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800249c:	430a      	orrs	r2, r1
 800249e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2220      	movs	r2, #32
 80024a6:	4013      	ands	r3, r2
 80024a8:	d008      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	0899      	lsrs	r1, r3, #2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2208      	movs	r2, #8
 80024c2:	4013      	ands	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024c6:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	4a1c      	ldr	r2, [pc, #112]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2204      	movs	r2, #4
 80024e0:	4013      	ands	r3, r2
 80024e2:	d009      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80024e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e8:	4a15      	ldr	r2, [pc, #84]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2280      	movs	r2, #128	@ 0x80
 80024fe:	4013      	ands	r3, r2
 8002500:	d009      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	22e0      	movs	r2, #224	@ 0xe0
 8002508:	4393      	bics	r3, r2
 800250a:	0019      	movs	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002516:	2312      	movs	r3, #18
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	781b      	ldrb	r3, [r3, #0]
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	b006      	add	sp, #24
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	fffffcff 	.word	0xfffffcff
 800252c:	fffeffff 	.word	0xfffeffff
 8002530:	00001388 	.word	0x00001388
 8002534:	efffffff 	.word	0xefffffff
 8002538:	ffffcfff 	.word	0xffffcfff
 800253c:	ffffefff 	.word	0xffffefff
 8002540:	ffff3fff 	.word	0xffff3fff

08002544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e04a      	b.n	80025ec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	223d      	movs	r2, #61	@ 0x3d
 800255a:	5c9b      	ldrb	r3, [r3, r2]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	223c      	movs	r2, #60	@ 0x3c
 8002566:	2100      	movs	r1, #0
 8002568:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f7fe faab 	bl	8000ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	223d      	movs	r2, #61	@ 0x3d
 8002576:	2102      	movs	r1, #2
 8002578:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	0019      	movs	r1, r3
 8002584:	0010      	movs	r0, r2
 8002586:	f000 f957 	bl	8002838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2248      	movs	r2, #72	@ 0x48
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	223e      	movs	r2, #62	@ 0x3e
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	223f      	movs	r2, #63	@ 0x3f
 800259e:	2101      	movs	r1, #1
 80025a0:	5499      	strb	r1, [r3, r2]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2240      	movs	r2, #64	@ 0x40
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2241      	movs	r2, #65	@ 0x41
 80025ae:	2101      	movs	r1, #1
 80025b0:	5499      	strb	r1, [r3, r2]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2242      	movs	r2, #66	@ 0x42
 80025b6:	2101      	movs	r1, #1
 80025b8:	5499      	strb	r1, [r3, r2]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2243      	movs	r2, #67	@ 0x43
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2244      	movs	r2, #68	@ 0x44
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2245      	movs	r2, #69	@ 0x45
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2246      	movs	r2, #70	@ 0x46
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2247      	movs	r2, #71	@ 0x47
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	223d      	movs	r2, #61	@ 0x3d
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	223d      	movs	r2, #61	@ 0x3d
 8002600:	5c9b      	ldrb	r3, [r3, r2]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d001      	beq.n	800260c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e035      	b.n	8002678 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	223d      	movs	r2, #61	@ 0x3d
 8002610:	2102      	movs	r1, #2
 8002612:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_TIM_Base_Start+0x8c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00a      	beq.n	8002634 <HAL_TIM_Base_Start+0x40>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	2380      	movs	r3, #128	@ 0x80
 8002624:	05db      	lsls	r3, r3, #23
 8002626:	429a      	cmp	r2, r3
 8002628:	d004      	beq.n	8002634 <HAL_TIM_Base_Start+0x40>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a15      	ldr	r2, [pc, #84]	@ (8002684 <HAL_TIM_Base_Start+0x90>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d116      	bne.n	8002662 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <HAL_TIM_Base_Start+0x94>)
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b06      	cmp	r3, #6
 8002644:	d016      	beq.n	8002674 <HAL_TIM_Base_Start+0x80>
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	025b      	lsls	r3, r3, #9
 800264c:	429a      	cmp	r2, r3
 800264e:	d011      	beq.n	8002674 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2101      	movs	r1, #1
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002660:	e008      	b.n	8002674 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e000      	b.n	8002676 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002674:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b004      	add	sp, #16
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40000400 	.word	0x40000400
 8002688:	00010007 	.word	0x00010007

0800268c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002696:	230f      	movs	r3, #15
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	223c      	movs	r2, #60	@ 0x3c
 80026a2:	5c9b      	ldrb	r3, [r3, r2]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_TIM_ConfigClockSource+0x20>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e0bc      	b.n	8002826 <HAL_TIM_ConfigClockSource+0x19a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	223c      	movs	r2, #60	@ 0x3c
 80026b0:	2101      	movs	r1, #1
 80026b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	223d      	movs	r2, #61	@ 0x3d
 80026b8:	2102      	movs	r1, #2
 80026ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4a5a      	ldr	r2, [pc, #360]	@ (8002830 <HAL_TIM_ConfigClockSource+0x1a4>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4a59      	ldr	r2, [pc, #356]	@ (8002834 <HAL_TIM_ConfigClockSource+0x1a8>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2280      	movs	r2, #128	@ 0x80
 80026e2:	0192      	lsls	r2, r2, #6
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d040      	beq.n	800276a <HAL_TIM_ConfigClockSource+0xde>
 80026e8:	2280      	movs	r2, #128	@ 0x80
 80026ea:	0192      	lsls	r2, r2, #6
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d900      	bls.n	80026f2 <HAL_TIM_ConfigClockSource+0x66>
 80026f0:	e088      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x178>
 80026f2:	2280      	movs	r2, #128	@ 0x80
 80026f4:	0152      	lsls	r2, r2, #5
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d100      	bne.n	80026fc <HAL_TIM_ConfigClockSource+0x70>
 80026fa:	e088      	b.n	800280e <HAL_TIM_ConfigClockSource+0x182>
 80026fc:	2280      	movs	r2, #128	@ 0x80
 80026fe:	0152      	lsls	r2, r2, #5
 8002700:	4293      	cmp	r3, r2
 8002702:	d900      	bls.n	8002706 <HAL_TIM_ConfigClockSource+0x7a>
 8002704:	e07e      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x178>
 8002706:	2b70      	cmp	r3, #112	@ 0x70
 8002708:	d018      	beq.n	800273c <HAL_TIM_ConfigClockSource+0xb0>
 800270a:	d900      	bls.n	800270e <HAL_TIM_ConfigClockSource+0x82>
 800270c:	e07a      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x178>
 800270e:	2b60      	cmp	r3, #96	@ 0x60
 8002710:	d04f      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x126>
 8002712:	d900      	bls.n	8002716 <HAL_TIM_ConfigClockSource+0x8a>
 8002714:	e076      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x178>
 8002716:	2b50      	cmp	r3, #80	@ 0x50
 8002718:	d03b      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x106>
 800271a:	d900      	bls.n	800271e <HAL_TIM_ConfigClockSource+0x92>
 800271c:	e072      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x178>
 800271e:	2b40      	cmp	r3, #64	@ 0x40
 8002720:	d057      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x146>
 8002722:	d900      	bls.n	8002726 <HAL_TIM_ConfigClockSource+0x9a>
 8002724:	e06e      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x178>
 8002726:	2b30      	cmp	r3, #48	@ 0x30
 8002728:	d063      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x166>
 800272a:	d86b      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x178>
 800272c:	2b20      	cmp	r3, #32
 800272e:	d060      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x166>
 8002730:	d868      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x178>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d05d      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x166>
 8002736:	2b10      	cmp	r3, #16
 8002738:	d05b      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x166>
 800273a:	e063      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800274c:	f000 f974 	bl	8002a38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2277      	movs	r2, #119	@ 0x77
 800275c:	4313      	orrs	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	609a      	str	r2, [r3, #8]
      break;
 8002768:	e052      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800277a:	f000 f95d 	bl	8002a38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2180      	movs	r1, #128	@ 0x80
 800278a:	01c9      	lsls	r1, r1, #7
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
      break;
 8002790:	e03e      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800279e:	001a      	movs	r2, r3
 80027a0:	f000 f8ce 	bl	8002940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2150      	movs	r1, #80	@ 0x50
 80027aa:	0018      	movs	r0, r3
 80027ac:	f000 f928 	bl	8002a00 <TIM_ITRx_SetConfig>
      break;
 80027b0:	e02e      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027be:	001a      	movs	r2, r3
 80027c0:	f000 f8ec 	bl	800299c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2160      	movs	r1, #96	@ 0x60
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 f918 	bl	8002a00 <TIM_ITRx_SetConfig>
      break;
 80027d0:	e01e      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027de:	001a      	movs	r2, r3
 80027e0:	f000 f8ae 	bl	8002940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2140      	movs	r1, #64	@ 0x40
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f908 	bl	8002a00 <TIM_ITRx_SetConfig>
      break;
 80027f0:	e00e      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0019      	movs	r1, r3
 80027fc:	0010      	movs	r0, r2
 80027fe:	f000 f8ff 	bl	8002a00 <TIM_ITRx_SetConfig>
      break;
 8002802:	e005      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002804:	230f      	movs	r3, #15
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
      break;
 800280c:	e000      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800280e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	223d      	movs	r2, #61	@ 0x3d
 8002814:	2101      	movs	r1, #1
 8002816:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	223c      	movs	r2, #60	@ 0x3c
 800281c:	2100      	movs	r1, #0
 800281e:	5499      	strb	r1, [r3, r2]

  return status;
 8002820:	230f      	movs	r3, #15
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	781b      	ldrb	r3, [r3, #0]
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b004      	add	sp, #16
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	ffceff88 	.word	0xffceff88
 8002834:	ffff00ff 	.word	0xffff00ff

08002838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a37      	ldr	r2, [pc, #220]	@ (8002928 <TIM_Base_SetConfig+0xf0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d008      	beq.n	8002862 <TIM_Base_SetConfig+0x2a>
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	05db      	lsls	r3, r3, #23
 8002856:	429a      	cmp	r2, r3
 8002858:	d003      	beq.n	8002862 <TIM_Base_SetConfig+0x2a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a33      	ldr	r2, [pc, #204]	@ (800292c <TIM_Base_SetConfig+0xf4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d108      	bne.n	8002874 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2270      	movs	r2, #112	@ 0x70
 8002866:	4393      	bics	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a2c      	ldr	r2, [pc, #176]	@ (8002928 <TIM_Base_SetConfig+0xf0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d014      	beq.n	80028a6 <TIM_Base_SetConfig+0x6e>
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	05db      	lsls	r3, r3, #23
 8002882:	429a      	cmp	r2, r3
 8002884:	d00f      	beq.n	80028a6 <TIM_Base_SetConfig+0x6e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a28      	ldr	r2, [pc, #160]	@ (800292c <TIM_Base_SetConfig+0xf4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00b      	beq.n	80028a6 <TIM_Base_SetConfig+0x6e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a27      	ldr	r2, [pc, #156]	@ (8002930 <TIM_Base_SetConfig+0xf8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <TIM_Base_SetConfig+0x6e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a26      	ldr	r2, [pc, #152]	@ (8002934 <TIM_Base_SetConfig+0xfc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d003      	beq.n	80028a6 <TIM_Base_SetConfig+0x6e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a25      	ldr	r2, [pc, #148]	@ (8002938 <TIM_Base_SetConfig+0x100>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d108      	bne.n	80028b8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a24      	ldr	r2, [pc, #144]	@ (800293c <TIM_Base_SetConfig+0x104>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2280      	movs	r2, #128	@ 0x80
 80028bc:	4393      	bics	r3, r2
 80028be:	001a      	movs	r2, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a11      	ldr	r2, [pc, #68]	@ (8002928 <TIM_Base_SetConfig+0xf0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <TIM_Base_SetConfig+0xbe>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <TIM_Base_SetConfig+0xfc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <TIM_Base_SetConfig+0xbe>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a11      	ldr	r2, [pc, #68]	@ (8002938 <TIM_Base_SetConfig+0x100>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d103      	bne.n	80028fe <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2201      	movs	r2, #1
 800290a:	4013      	ands	r3, r2
 800290c:	2b01      	cmp	r3, #1
 800290e:	d106      	bne.n	800291e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2201      	movs	r2, #1
 8002916:	4393      	bics	r3, r2
 8002918:	001a      	movs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	611a      	str	r2, [r3, #16]
  }
}
 800291e:	46c0      	nop			@ (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b004      	add	sp, #16
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			@ (mov r8, r8)
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40002000 	.word	0x40002000
 8002934:	40014400 	.word	0x40014400
 8002938:	40014800 	.word	0x40014800
 800293c:	fffffcff 	.word	0xfffffcff

08002940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	2201      	movs	r2, #1
 8002958:	4393      	bics	r3, r2
 800295a:	001a      	movs	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	22f0      	movs	r2, #240	@ 0xf0
 800296a:	4393      	bics	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	220a      	movs	r2, #10
 800297c:	4393      	bics	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	621a      	str	r2, [r3, #32]
}
 8002994:	46c0      	nop			@ (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b006      	add	sp, #24
 800299a:	bd80      	pop	{r7, pc}

0800299c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	2210      	movs	r2, #16
 80029b4:	4393      	bics	r3, r2
 80029b6:	001a      	movs	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4a0d      	ldr	r2, [pc, #52]	@ (80029fc <TIM_TI2_ConfigInputStage+0x60>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	031b      	lsls	r3, r3, #12
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	22a0      	movs	r2, #160	@ 0xa0
 80029d8:	4393      	bics	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b006      	add	sp, #24
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	ffff0fff 	.word	0xffff0fff

08002a00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a08      	ldr	r2, [pc, #32]	@ (8002a34 <TIM_ITRx_SetConfig+0x34>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	2207      	movs	r2, #7
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	609a      	str	r2, [r3, #8]
}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b004      	add	sp, #16
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	ffcfff8f 	.word	0xffcfff8f

08002a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	4a09      	ldr	r2, [pc, #36]	@ (8002a74 <TIM_ETR_SetConfig+0x3c>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	021a      	lsls	r2, r3, #8
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b006      	add	sp, #24
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	ffff00ff 	.word	0xffff00ff

08002a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	223c      	movs	r2, #60	@ 0x3c
 8002a86:	5c9b      	ldrb	r3, [r3, r2]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e050      	b.n	8002b32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	223c      	movs	r2, #60	@ 0x3c
 8002a94:	2101      	movs	r1, #1
 8002a96:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	223d      	movs	r2, #61	@ 0x3d
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d108      	bne.n	8002acc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a20      	ldr	r2, [pc, #128]	@ (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2270      	movs	r2, #112	@ 0x70
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a14      	ldr	r2, [pc, #80]	@ (8002b3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00a      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2380      	movs	r3, #128	@ 0x80
 8002af6:	05db      	lsls	r3, r3, #23
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d004      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a10      	ldr	r2, [pc, #64]	@ (8002b44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10c      	bne.n	8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2280      	movs	r2, #128	@ 0x80
 8002b0a:	4393      	bics	r3, r2
 8002b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	223d      	movs	r2, #61	@ 0x3d
 8002b24:	2101      	movs	r1, #1
 8002b26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	223c      	movs	r2, #60	@ 0x3c
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	0018      	movs	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b004      	add	sp, #16
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	ff0fffff 	.word	0xff0fffff
 8002b44:	40000400 	.word	0x40000400

08002b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e046      	b.n	8002be8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2288      	movs	r2, #136	@ 0x88
 8002b5e:	589b      	ldr	r3, [r3, r2]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d107      	bne.n	8002b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2284      	movs	r2, #132	@ 0x84
 8002b68:	2100      	movs	r1, #0
 8002b6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f7fd ffca 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2288      	movs	r2, #136	@ 0x88
 8002b78:	2124      	movs	r1, #36	@ 0x24
 8002b7a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2101      	movs	r1, #1
 8002b88:	438a      	bics	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 fe08 	bl	80037ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 fc86 	bl	80034b0 <UART_SetConfig>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e01c      	b.n	8002be8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	490d      	ldr	r1, [pc, #52]	@ (8002bf0 <HAL_UART_Init+0xa8>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	212a      	movs	r1, #42	@ 0x2a
 8002bca:	438a      	bics	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 fe97 	bl	8003914 <UART_CheckIdleState>
 8002be6:	0003      	movs	r3, r0
}
 8002be8:	0018      	movs	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b002      	add	sp, #8
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	ffffb7ff 	.word	0xffffb7ff

08002bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	@ 0x28
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	1dbb      	adds	r3, r7, #6
 8002c02:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2288      	movs	r2, #136	@ 0x88
 8002c08:	589b      	ldr	r3, [r3, r2]
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d000      	beq.n	8002c10 <HAL_UART_Transmit+0x1c>
 8002c0e:	e090      	b.n	8002d32 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_UART_Transmit+0x2a>
 8002c16:	1dbb      	adds	r3, r7, #6
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e088      	b.n	8002d34 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	015b      	lsls	r3, r3, #5
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d109      	bne.n	8002c42 <HAL_UART_Transmit+0x4e>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d105      	bne.n	8002c42 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d001      	beq.n	8002c42 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e078      	b.n	8002d34 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2290      	movs	r2, #144	@ 0x90
 8002c46:	2100      	movs	r1, #0
 8002c48:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2288      	movs	r2, #136	@ 0x88
 8002c4e:	2121      	movs	r1, #33	@ 0x21
 8002c50:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c52:	f7fe fc41 	bl	80014d8 <HAL_GetTick>
 8002c56:	0003      	movs	r3, r0
 8002c58:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1dba      	adds	r2, r7, #6
 8002c5e:	2154      	movs	r1, #84	@ 0x54
 8002c60:	8812      	ldrh	r2, [r2, #0]
 8002c62:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1dba      	adds	r2, r7, #6
 8002c68:	2156      	movs	r1, #86	@ 0x56
 8002c6a:	8812      	ldrh	r2, [r2, #0]
 8002c6c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	2380      	movs	r3, #128	@ 0x80
 8002c74:	015b      	lsls	r3, r3, #5
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d108      	bne.n	8002c8c <HAL_UART_Transmit+0x98>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d104      	bne.n	8002c8c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	e003      	b.n	8002c94 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c94:	e030      	b.n	8002cf8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	0013      	movs	r3, r2
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2180      	movs	r1, #128	@ 0x80
 8002ca4:	f000 fee0 	bl	8003a68 <UART_WaitOnFlagUntilTimeout>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2288      	movs	r2, #136	@ 0x88
 8002cb0:	2120      	movs	r1, #32
 8002cb2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e03d      	b.n	8002d34 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	05d2      	lsls	r2, r2, #23
 8002cca:	0dd2      	lsrs	r2, r2, #23
 8002ccc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	e007      	b.n	8002ce6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2256      	movs	r2, #86	@ 0x56
 8002cea:	5a9b      	ldrh	r3, [r3, r2]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b299      	uxth	r1, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2256      	movs	r2, #86	@ 0x56
 8002cf6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2256      	movs	r2, #86	@ 0x56
 8002cfc:	5a9b      	ldrh	r3, [r3, r2]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1c8      	bne.n	8002c96 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	0013      	movs	r3, r2
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2140      	movs	r1, #64	@ 0x40
 8002d12:	f000 fea9 	bl	8003a68 <UART_WaitOnFlagUntilTimeout>
 8002d16:	1e03      	subs	r3, r0, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2288      	movs	r2, #136	@ 0x88
 8002d1e:	2120      	movs	r1, #32
 8002d20:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e006      	b.n	8002d34 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2288      	movs	r2, #136	@ 0x88
 8002d2a:	2120      	movs	r1, #32
 8002d2c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
  }
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b008      	add	sp, #32
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	1dbb      	adds	r3, r7, #6
 8002d48:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	228c      	movs	r2, #140	@ 0x8c
 8002d4e:	589b      	ldr	r3, [r3, r2]
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d145      	bne.n	8002de0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_UART_Receive_IT+0x26>
 8002d5a:	1dbb      	adds	r3, r7, #6
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e03d      	b.n	8002de2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	2380      	movs	r3, #128	@ 0x80
 8002d6c:	015b      	lsls	r3, r3, #5
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d109      	bne.n	8002d86 <HAL_UART_Receive_IT+0x4a>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d001      	beq.n	8002d86 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e02d      	b.n	8002de2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	041b      	lsls	r3, r3, #16
 8002d96:	4013      	ands	r3, r2
 8002d98:	d019      	beq.n	8002dce <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d9e:	613b      	str	r3, [r7, #16]
  return(result);
 8002da0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	2301      	movs	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f383 8810 	msr	PRIMASK, r3
}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2180      	movs	r1, #128	@ 0x80
 8002dbc:	04c9      	lsls	r1, r1, #19
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f383 8810 	msr	PRIMASK, r3
}
 8002dcc:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002dce:	1dbb      	adds	r3, r7, #6
 8002dd0:	881a      	ldrh	r2, [r3, #0]
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f000 feb6 	bl	8003b48 <UART_Start_Receive_IT>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	e000      	b.n	8002de2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b008      	add	sp, #32
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dec:	b5b0      	push	{r4, r5, r7, lr}
 8002dee:	b0aa      	sub	sp, #168	@ 0xa8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	22a4      	movs	r2, #164	@ 0xa4
 8002dfc:	18b9      	adds	r1, r7, r2
 8002dfe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	20a0      	movs	r0, #160	@ 0xa0
 8002e08:	1839      	adds	r1, r7, r0
 8002e0a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	249c      	movs	r4, #156	@ 0x9c
 8002e14:	1939      	adds	r1, r7, r4
 8002e16:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e18:	0011      	movs	r1, r2
 8002e1a:	18bb      	adds	r3, r7, r2
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4aa2      	ldr	r2, [pc, #648]	@ (80030a8 <HAL_UART_IRQHandler+0x2bc>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	2298      	movs	r2, #152	@ 0x98
 8002e24:	18bd      	adds	r5, r7, r2
 8002e26:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002e28:	18bb      	adds	r3, r7, r2
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d11a      	bne.n	8002e66 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2220      	movs	r2, #32
 8002e36:	4013      	ands	r3, r2
 8002e38:	d015      	beq.n	8002e66 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e3a:	183b      	adds	r3, r7, r0
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	4013      	ands	r3, r2
 8002e42:	d105      	bne.n	8002e50 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e44:	193b      	adds	r3, r7, r4
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2380      	movs	r3, #128	@ 0x80
 8002e4a:	055b      	lsls	r3, r3, #21
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d00a      	beq.n	8002e66 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d100      	bne.n	8002e5a <HAL_UART_IRQHandler+0x6e>
 8002e58:	e2fb      	b.n	8003452 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	0010      	movs	r0, r2
 8002e62:	4798      	blx	r3
      }
      return;
 8002e64:	e2f5      	b.n	8003452 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e66:	2398      	movs	r3, #152	@ 0x98
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d100      	bne.n	8002e72 <HAL_UART_IRQHandler+0x86>
 8002e70:	e122      	b.n	80030b8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002e72:	239c      	movs	r3, #156	@ 0x9c
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a8c      	ldr	r2, [pc, #560]	@ (80030ac <HAL_UART_IRQHandler+0x2c0>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d106      	bne.n	8002e8c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002e7e:	23a0      	movs	r3, #160	@ 0xa0
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a8a      	ldr	r2, [pc, #552]	@ (80030b0 <HAL_UART_IRQHandler+0x2c4>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	d100      	bne.n	8002e8c <HAL_UART_IRQHandler+0xa0>
 8002e8a:	e115      	b.n	80030b8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e8c:	23a4      	movs	r3, #164	@ 0xa4
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2201      	movs	r2, #1
 8002e94:	4013      	ands	r3, r2
 8002e96:	d012      	beq.n	8002ebe <HAL_UART_IRQHandler+0xd2>
 8002e98:	23a0      	movs	r3, #160	@ 0xa0
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d00b      	beq.n	8002ebe <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2290      	movs	r2, #144	@ 0x90
 8002eb2:	589b      	ldr	r3, [r3, r2]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2190      	movs	r1, #144	@ 0x90
 8002ebc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ebe:	23a4      	movs	r3, #164	@ 0xa4
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d011      	beq.n	8002eee <HAL_UART_IRQHandler+0x102>
 8002eca:	239c      	movs	r3, #156	@ 0x9c
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2202      	movs	r2, #2
 8002edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2290      	movs	r2, #144	@ 0x90
 8002ee2:	589b      	ldr	r3, [r3, r2]
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2190      	movs	r1, #144	@ 0x90
 8002eec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eee:	23a4      	movs	r3, #164	@ 0xa4
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d011      	beq.n	8002f1e <HAL_UART_IRQHandler+0x132>
 8002efa:	239c      	movs	r3, #156	@ 0x9c
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	d00b      	beq.n	8002f1e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2290      	movs	r2, #144	@ 0x90
 8002f12:	589b      	ldr	r3, [r3, r2]
 8002f14:	2202      	movs	r2, #2
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2190      	movs	r1, #144	@ 0x90
 8002f1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f1e:	23a4      	movs	r3, #164	@ 0xa4
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2208      	movs	r2, #8
 8002f26:	4013      	ands	r3, r2
 8002f28:	d017      	beq.n	8002f5a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f2a:	23a0      	movs	r3, #160	@ 0xa0
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2220      	movs	r2, #32
 8002f32:	4013      	ands	r3, r2
 8002f34:	d105      	bne.n	8002f42 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002f36:	239c      	movs	r3, #156	@ 0x9c
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a5b      	ldr	r2, [pc, #364]	@ (80030ac <HAL_UART_IRQHandler+0x2c0>)
 8002f3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f40:	d00b      	beq.n	8002f5a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2208      	movs	r2, #8
 8002f48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2290      	movs	r2, #144	@ 0x90
 8002f4e:	589b      	ldr	r3, [r3, r2]
 8002f50:	2208      	movs	r2, #8
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2190      	movs	r1, #144	@ 0x90
 8002f58:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f5a:	23a4      	movs	r3, #164	@ 0xa4
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	2380      	movs	r3, #128	@ 0x80
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	4013      	ands	r3, r2
 8002f66:	d013      	beq.n	8002f90 <HAL_UART_IRQHandler+0x1a4>
 8002f68:	23a0      	movs	r3, #160	@ 0xa0
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	04db      	lsls	r3, r3, #19
 8002f72:	4013      	ands	r3, r2
 8002f74:	d00c      	beq.n	8002f90 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2290      	movs	r2, #144	@ 0x90
 8002f84:	589b      	ldr	r3, [r3, r2]
 8002f86:	2220      	movs	r2, #32
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2190      	movs	r1, #144	@ 0x90
 8002f8e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2290      	movs	r2, #144	@ 0x90
 8002f94:	589b      	ldr	r3, [r3, r2]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d100      	bne.n	8002f9c <HAL_UART_IRQHandler+0x1b0>
 8002f9a:	e25c      	b.n	8003456 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f9c:	23a4      	movs	r3, #164	@ 0xa4
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d015      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fa8:	23a0      	movs	r3, #160	@ 0xa0
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d106      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fb4:	239c      	movs	r3, #156	@ 0x9c
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	2380      	movs	r3, #128	@ 0x80
 8002fbc:	055b      	lsls	r3, r3, #21
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d008      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d004      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	0010      	movs	r0, r2
 8002fd2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2290      	movs	r2, #144	@ 0x90
 8002fd8:	589b      	ldr	r3, [r3, r2]
 8002fda:	2194      	movs	r1, #148	@ 0x94
 8002fdc:	187a      	adds	r2, r7, r1
 8002fde:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2240      	movs	r2, #64	@ 0x40
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b40      	cmp	r3, #64	@ 0x40
 8002fec:	d004      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2228      	movs	r2, #40	@ 0x28
 8002ff4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ff6:	d04c      	beq.n	8003092 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 fec8 	bl	8003d90 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2240      	movs	r2, #64	@ 0x40
 8003008:	4013      	ands	r3, r2
 800300a:	2b40      	cmp	r3, #64	@ 0x40
 800300c:	d13c      	bne.n	8003088 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800300e:	f3ef 8310 	mrs	r3, PRIMASK
 8003012:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003014:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003016:	2090      	movs	r0, #144	@ 0x90
 8003018:	183a      	adds	r2, r7, r0
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	2301      	movs	r3, #1
 800301e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003022:	f383 8810 	msr	PRIMASK, r3
}
 8003026:	46c0      	nop			@ (mov r8, r8)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2140      	movs	r1, #64	@ 0x40
 8003034:	438a      	bics	r2, r1
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	183b      	adds	r3, r7, r0
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003040:	f383 8810 	msr	PRIMASK, r3
}
 8003044:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2280      	movs	r2, #128	@ 0x80
 800304a:	589b      	ldr	r3, [r3, r2]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d016      	beq.n	800307e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2280      	movs	r2, #128	@ 0x80
 8003054:	589b      	ldr	r3, [r3, r2]
 8003056:	4a17      	ldr	r2, [pc, #92]	@ (80030b4 <HAL_UART_IRQHandler+0x2c8>)
 8003058:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2280      	movs	r2, #128	@ 0x80
 800305e:	589b      	ldr	r3, [r3, r2]
 8003060:	0018      	movs	r0, r3
 8003062:	f7fe fb83 	bl	800176c <HAL_DMA_Abort_IT>
 8003066:	1e03      	subs	r3, r0, #0
 8003068:	d01c      	beq.n	80030a4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2280      	movs	r2, #128	@ 0x80
 800306e:	589b      	ldr	r3, [r3, r2]
 8003070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	2180      	movs	r1, #128	@ 0x80
 8003076:	5852      	ldr	r2, [r2, r1]
 8003078:	0010      	movs	r0, r2
 800307a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800307c:	e012      	b.n	80030a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0018      	movs	r0, r3
 8003082:	f000 fa01 	bl	8003488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003086:	e00d      	b.n	80030a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f9fc 	bl	8003488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003090:	e008      	b.n	80030a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f000 f9f7 	bl	8003488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2290      	movs	r2, #144	@ 0x90
 800309e:	2100      	movs	r1, #0
 80030a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80030a2:	e1d8      	b.n	8003456 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	46c0      	nop			@ (mov r8, r8)
    return;
 80030a6:	e1d6      	b.n	8003456 <HAL_UART_IRQHandler+0x66a>
 80030a8:	0000080f 	.word	0x0000080f
 80030ac:	10000001 	.word	0x10000001
 80030b0:	04000120 	.word	0x04000120
 80030b4:	08003e5d 	.word	0x08003e5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d000      	beq.n	80030c2 <HAL_UART_IRQHandler+0x2d6>
 80030c0:	e15d      	b.n	800337e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030c2:	23a4      	movs	r3, #164	@ 0xa4
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2210      	movs	r2, #16
 80030ca:	4013      	ands	r3, r2
 80030cc:	d100      	bne.n	80030d0 <HAL_UART_IRQHandler+0x2e4>
 80030ce:	e156      	b.n	800337e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030d0:	23a0      	movs	r3, #160	@ 0xa0
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2210      	movs	r2, #16
 80030d8:	4013      	ands	r3, r2
 80030da:	d100      	bne.n	80030de <HAL_UART_IRQHandler+0x2f2>
 80030dc:	e14f      	b.n	800337e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2210      	movs	r2, #16
 80030e4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2240      	movs	r2, #64	@ 0x40
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b40      	cmp	r3, #64	@ 0x40
 80030f2:	d000      	beq.n	80030f6 <HAL_UART_IRQHandler+0x30a>
 80030f4:	e0c3      	b.n	800327e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2280      	movs	r2, #128	@ 0x80
 80030fa:	589b      	ldr	r3, [r3, r2]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	217e      	movs	r1, #126	@ 0x7e
 8003102:	187b      	adds	r3, r7, r1
 8003104:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003106:	187b      	adds	r3, r7, r1
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d100      	bne.n	8003110 <HAL_UART_IRQHandler+0x324>
 800310e:	e097      	b.n	8003240 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	225c      	movs	r2, #92	@ 0x5c
 8003114:	5a9b      	ldrh	r3, [r3, r2]
 8003116:	187a      	adds	r2, r7, r1
 8003118:	8812      	ldrh	r2, [r2, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d300      	bcc.n	8003120 <HAL_UART_IRQHandler+0x334>
 800311e:	e08f      	b.n	8003240 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	187a      	adds	r2, r7, r1
 8003124:	215e      	movs	r1, #94	@ 0x5e
 8003126:	8812      	ldrh	r2, [r2, #0]
 8003128:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2280      	movs	r2, #128	@ 0x80
 800312e:	589b      	ldr	r3, [r3, r2]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2220      	movs	r2, #32
 8003136:	4013      	ands	r3, r2
 8003138:	d170      	bne.n	800321c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800313a:	f3ef 8310 	mrs	r3, PRIMASK
 800313e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003142:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003144:	2301      	movs	r3, #1
 8003146:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800314a:	f383 8810 	msr	PRIMASK, r3
}
 800314e:	46c0      	nop			@ (mov r8, r8)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	49c4      	ldr	r1, [pc, #784]	@ (800346c <HAL_UART_IRQHandler+0x680>)
 800315c:	400a      	ands	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003162:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003166:	f383 8810 	msr	PRIMASK, r3
}
 800316a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800316c:	f3ef 8310 	mrs	r3, PRIMASK
 8003170:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003174:	677b      	str	r3, [r7, #116]	@ 0x74
 8003176:	2301      	movs	r3, #1
 8003178:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800317c:	f383 8810 	msr	PRIMASK, r3
}
 8003180:	46c0      	nop			@ (mov r8, r8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2101      	movs	r1, #1
 800318e:	438a      	bics	r2, r1
 8003190:	609a      	str	r2, [r3, #8]
 8003192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003194:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003198:	f383 8810 	msr	PRIMASK, r3
}
 800319c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800319e:	f3ef 8310 	mrs	r3, PRIMASK
 80031a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80031a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80031a8:	2301      	movs	r3, #1
 80031aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ae:	f383 8810 	msr	PRIMASK, r3
}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2140      	movs	r1, #64	@ 0x40
 80031c0:	438a      	bics	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031c6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ca:	f383 8810 	msr	PRIMASK, r3
}
 80031ce:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	228c      	movs	r2, #140	@ 0x8c
 80031d4:	2120      	movs	r1, #32
 80031d6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031de:	f3ef 8310 	mrs	r3, PRIMASK
 80031e2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80031e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031e8:	2301      	movs	r3, #1
 80031ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ee:	f383 8810 	msr	PRIMASK, r3
}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2110      	movs	r1, #16
 8003200:	438a      	bics	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003206:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003208:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800320a:	f383 8810 	msr	PRIMASK, r3
}
 800320e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2280      	movs	r2, #128	@ 0x80
 8003214:	589b      	ldr	r3, [r3, r2]
 8003216:	0018      	movs	r0, r3
 8003218:	f7fe fa46 	bl	80016a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	225c      	movs	r2, #92	@ 0x5c
 8003226:	5a9a      	ldrh	r2, [r3, r2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	215e      	movs	r1, #94	@ 0x5e
 800322c:	5a5b      	ldrh	r3, [r3, r1]
 800322e:	b29b      	uxth	r3, r3
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	b29a      	uxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	0011      	movs	r1, r2
 8003238:	0018      	movs	r0, r3
 800323a:	f000 f92d 	bl	8003498 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800323e:	e10c      	b.n	800345a <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	225c      	movs	r2, #92	@ 0x5c
 8003244:	5a9b      	ldrh	r3, [r3, r2]
 8003246:	227e      	movs	r2, #126	@ 0x7e
 8003248:	18ba      	adds	r2, r7, r2
 800324a:	8812      	ldrh	r2, [r2, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d000      	beq.n	8003252 <HAL_UART_IRQHandler+0x466>
 8003250:	e103      	b.n	800345a <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2280      	movs	r2, #128	@ 0x80
 8003256:	589b      	ldr	r3, [r3, r2]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2220      	movs	r2, #32
 800325e:	4013      	ands	r3, r2
 8003260:	2b20      	cmp	r3, #32
 8003262:	d000      	beq.n	8003266 <HAL_UART_IRQHandler+0x47a>
 8003264:	e0f9      	b.n	800345a <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	225c      	movs	r2, #92	@ 0x5c
 8003270:	5a9a      	ldrh	r2, [r3, r2]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0011      	movs	r1, r2
 8003276:	0018      	movs	r0, r3
 8003278:	f000 f90e 	bl	8003498 <HAL_UARTEx_RxEventCallback>
      return;
 800327c:	e0ed      	b.n	800345a <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	225c      	movs	r2, #92	@ 0x5c
 8003282:	5a99      	ldrh	r1, [r3, r2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	225e      	movs	r2, #94	@ 0x5e
 8003288:	5a9b      	ldrh	r3, [r3, r2]
 800328a:	b29a      	uxth	r2, r3
 800328c:	208e      	movs	r0, #142	@ 0x8e
 800328e:	183b      	adds	r3, r7, r0
 8003290:	1a8a      	subs	r2, r1, r2
 8003292:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	225e      	movs	r2, #94	@ 0x5e
 8003298:	5a9b      	ldrh	r3, [r3, r2]
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d100      	bne.n	80032a2 <HAL_UART_IRQHandler+0x4b6>
 80032a0:	e0dd      	b.n	800345e <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80032a2:	183b      	adds	r3, r7, r0
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d100      	bne.n	80032ac <HAL_UART_IRQHandler+0x4c0>
 80032aa:	e0d8      	b.n	800345e <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032ac:	f3ef 8310 	mrs	r3, PRIMASK
 80032b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80032b2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032b4:	2488      	movs	r4, #136	@ 0x88
 80032b6:	193a      	adds	r2, r7, r4
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	2301      	movs	r3, #1
 80032bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f383 8810 	msr	PRIMASK, r3
}
 80032c4:	46c0      	nop			@ (mov r8, r8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4967      	ldr	r1, [pc, #412]	@ (8003470 <HAL_UART_IRQHandler+0x684>)
 80032d2:	400a      	ands	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f383 8810 	msr	PRIMASK, r3
}
 80032e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032e4:	f3ef 8310 	mrs	r3, PRIMASK
 80032e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80032ea:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032ec:	2484      	movs	r4, #132	@ 0x84
 80032ee:	193a      	adds	r2, r7, r4
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	2301      	movs	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f383 8810 	msr	PRIMASK, r3
}
 80032fc:	46c0      	nop			@ (mov r8, r8)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	495a      	ldr	r1, [pc, #360]	@ (8003474 <HAL_UART_IRQHandler+0x688>)
 800330a:	400a      	ands	r2, r1
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	193b      	adds	r3, r7, r4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	f383 8810 	msr	PRIMASK, r3
}
 800331a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	228c      	movs	r2, #140	@ 0x8c
 8003320:	2120      	movs	r1, #32
 8003322:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003330:	f3ef 8310 	mrs	r3, PRIMASK
 8003334:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003338:	2480      	movs	r4, #128	@ 0x80
 800333a:	193a      	adds	r2, r7, r4
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	2301      	movs	r3, #1
 8003340:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003344:	f383 8810 	msr	PRIMASK, r3
}
 8003348:	46c0      	nop			@ (mov r8, r8)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2110      	movs	r1, #16
 8003356:	438a      	bics	r2, r1
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	193b      	adds	r3, r7, r4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003362:	f383 8810 	msr	PRIMASK, r3
}
 8003366:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800336e:	183b      	adds	r3, r7, r0
 8003370:	881a      	ldrh	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	0011      	movs	r1, r2
 8003376:	0018      	movs	r0, r3
 8003378:	f000 f88e 	bl	8003498 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800337c:	e06f      	b.n	800345e <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800337e:	23a4      	movs	r3, #164	@ 0xa4
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	@ 0x80
 8003386:	035b      	lsls	r3, r3, #13
 8003388:	4013      	ands	r3, r2
 800338a:	d010      	beq.n	80033ae <HAL_UART_IRQHandler+0x5c2>
 800338c:	239c      	movs	r3, #156	@ 0x9c
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	03db      	lsls	r3, r3, #15
 8003396:	4013      	ands	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2280      	movs	r2, #128	@ 0x80
 80033a0:	0352      	lsls	r2, r2, #13
 80033a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f001 fa90 	bl	80048cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033ac:	e05a      	b.n	8003464 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80033ae:	23a4      	movs	r3, #164	@ 0xa4
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2280      	movs	r2, #128	@ 0x80
 80033b6:	4013      	ands	r3, r2
 80033b8:	d016      	beq.n	80033e8 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80033ba:	23a0      	movs	r3, #160	@ 0xa0
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2280      	movs	r2, #128	@ 0x80
 80033c2:	4013      	ands	r3, r2
 80033c4:	d106      	bne.n	80033d4 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80033c6:	239c      	movs	r3, #156	@ 0x9c
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	4013      	ands	r3, r2
 80033d2:	d009      	beq.n	80033e8 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d042      	beq.n	8003462 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	0010      	movs	r0, r2
 80033e4:	4798      	blx	r3
    }
    return;
 80033e6:	e03c      	b.n	8003462 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033e8:	23a4      	movs	r3, #164	@ 0xa4
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2240      	movs	r2, #64	@ 0x40
 80033f0:	4013      	ands	r3, r2
 80033f2:	d00a      	beq.n	800340a <HAL_UART_IRQHandler+0x61e>
 80033f4:	23a0      	movs	r3, #160	@ 0xa0
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2240      	movs	r2, #64	@ 0x40
 80033fc:	4013      	ands	r3, r2
 80033fe:	d004      	beq.n	800340a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0018      	movs	r0, r3
 8003404:	f000 fd3d 	bl	8003e82 <UART_EndTransmit_IT>
    return;
 8003408:	e02c      	b.n	8003464 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800340a:	23a4      	movs	r3, #164	@ 0xa4
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	4013      	ands	r3, r2
 8003416:	d00b      	beq.n	8003430 <HAL_UART_IRQHandler+0x644>
 8003418:	23a0      	movs	r3, #160	@ 0xa0
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	2380      	movs	r3, #128	@ 0x80
 8003420:	05db      	lsls	r3, r3, #23
 8003422:	4013      	ands	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f001 fa5f 	bl	80048ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800342e:	e019      	b.n	8003464 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003430:	23a4      	movs	r3, #164	@ 0xa4
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	045b      	lsls	r3, r3, #17
 800343a:	4013      	ands	r3, r2
 800343c:	d012      	beq.n	8003464 <HAL_UART_IRQHandler+0x678>
 800343e:	23a0      	movs	r3, #160	@ 0xa0
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	da0d      	bge.n	8003464 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0018      	movs	r0, r3
 800344c:	f001 fa46 	bl	80048dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003450:	e008      	b.n	8003464 <HAL_UART_IRQHandler+0x678>
      return;
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	e006      	b.n	8003464 <HAL_UART_IRQHandler+0x678>
    return;
 8003456:	46c0      	nop			@ (mov r8, r8)
 8003458:	e004      	b.n	8003464 <HAL_UART_IRQHandler+0x678>
      return;
 800345a:	46c0      	nop			@ (mov r8, r8)
 800345c:	e002      	b.n	8003464 <HAL_UART_IRQHandler+0x678>
      return;
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	e000      	b.n	8003464 <HAL_UART_IRQHandler+0x678>
    return;
 8003462:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003464:	46bd      	mov	sp, r7
 8003466:	b02a      	add	sp, #168	@ 0xa8
 8003468:	bdb0      	pop	{r4, r5, r7, pc}
 800346a:	46c0      	nop			@ (mov r8, r8)
 800346c:	fffffeff 	.word	0xfffffeff
 8003470:	fffffedf 	.word	0xfffffedf
 8003474:	effffffe 	.word	0xeffffffe

08003478 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003480:	46c0      	nop			@ (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	b002      	add	sp, #8
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003490:	46c0      	nop			@ (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	000a      	movs	r2, r1
 80034a2:	1cbb      	adds	r3, r7, #2
 80034a4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b002      	add	sp, #8
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034b8:	231e      	movs	r3, #30
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4aab      	ldr	r2, [pc, #684]	@ (800378c <UART_SetConfig+0x2dc>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4aa6      	ldr	r2, [pc, #664]	@ (8003790 <UART_SetConfig+0x2e0>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a9d      	ldr	r2, [pc, #628]	@ (8003794 <UART_SetConfig+0x2e4>)
 800351e:	4013      	ands	r3, r2
 8003520:	0019      	movs	r1, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	430a      	orrs	r2, r1
 800352a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003532:	220f      	movs	r2, #15
 8003534:	4393      	bics	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a93      	ldr	r2, [pc, #588]	@ (8003798 <UART_SetConfig+0x2e8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d127      	bne.n	800359e <UART_SetConfig+0xee>
 800354e:	4b93      	ldr	r3, [pc, #588]	@ (800379c <UART_SetConfig+0x2ec>)
 8003550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003552:	2203      	movs	r2, #3
 8003554:	4013      	ands	r3, r2
 8003556:	2b03      	cmp	r3, #3
 8003558:	d017      	beq.n	800358a <UART_SetConfig+0xda>
 800355a:	d81b      	bhi.n	8003594 <UART_SetConfig+0xe4>
 800355c:	2b02      	cmp	r3, #2
 800355e:	d00a      	beq.n	8003576 <UART_SetConfig+0xc6>
 8003560:	d818      	bhi.n	8003594 <UART_SetConfig+0xe4>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <UART_SetConfig+0xbc>
 8003566:	2b01      	cmp	r3, #1
 8003568:	d00a      	beq.n	8003580 <UART_SetConfig+0xd0>
 800356a:	e013      	b.n	8003594 <UART_SetConfig+0xe4>
 800356c:	231f      	movs	r3, #31
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e021      	b.n	80035ba <UART_SetConfig+0x10a>
 8003576:	231f      	movs	r3, #31
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2202      	movs	r2, #2
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	e01c      	b.n	80035ba <UART_SetConfig+0x10a>
 8003580:	231f      	movs	r3, #31
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	2204      	movs	r2, #4
 8003586:	701a      	strb	r2, [r3, #0]
 8003588:	e017      	b.n	80035ba <UART_SetConfig+0x10a>
 800358a:	231f      	movs	r3, #31
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	2208      	movs	r2, #8
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e012      	b.n	80035ba <UART_SetConfig+0x10a>
 8003594:	231f      	movs	r3, #31
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	2210      	movs	r2, #16
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	e00d      	b.n	80035ba <UART_SetConfig+0x10a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a7f      	ldr	r2, [pc, #508]	@ (80037a0 <UART_SetConfig+0x2f0>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d104      	bne.n	80035b2 <UART_SetConfig+0x102>
 80035a8:	231f      	movs	r3, #31
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	e003      	b.n	80035ba <UART_SetConfig+0x10a>
 80035b2:	231f      	movs	r3, #31
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	2210      	movs	r2, #16
 80035b8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	2380      	movs	r3, #128	@ 0x80
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d000      	beq.n	80035c8 <UART_SetConfig+0x118>
 80035c6:	e06f      	b.n	80036a8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80035c8:	231f      	movs	r3, #31
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d01f      	beq.n	8003612 <UART_SetConfig+0x162>
 80035d2:	dc22      	bgt.n	800361a <UART_SetConfig+0x16a>
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d017      	beq.n	8003608 <UART_SetConfig+0x158>
 80035d8:	dc1f      	bgt.n	800361a <UART_SetConfig+0x16a>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <UART_SetConfig+0x134>
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d005      	beq.n	80035ee <UART_SetConfig+0x13e>
 80035e2:	e01a      	b.n	800361a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e4:	f7fe fe9a 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 80035e8:	0003      	movs	r3, r0
 80035ea:	61bb      	str	r3, [r7, #24]
        break;
 80035ec:	e01c      	b.n	8003628 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80035ee:	4b6b      	ldr	r3, [pc, #428]	@ (800379c <UART_SetConfig+0x2ec>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2207      	movs	r2, #7
 80035f6:	4013      	ands	r3, r2
 80035f8:	3301      	adds	r3, #1
 80035fa:	0019      	movs	r1, r3
 80035fc:	4869      	ldr	r0, [pc, #420]	@ (80037a4 <UART_SetConfig+0x2f4>)
 80035fe:	f7fc fd9f 	bl	8000140 <__udivsi3>
 8003602:	0003      	movs	r3, r0
 8003604:	61bb      	str	r3, [r7, #24]
        break;
 8003606:	e00f      	b.n	8003628 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003608:	f7fe fe14 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 800360c:	0003      	movs	r3, r0
 800360e:	61bb      	str	r3, [r7, #24]
        break;
 8003610:	e00a      	b.n	8003628 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	61bb      	str	r3, [r7, #24]
        break;
 8003618:	e006      	b.n	8003628 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800361e:	231e      	movs	r3, #30
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
        break;
 8003626:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d100      	bne.n	8003630 <UART_SetConfig+0x180>
 800362e:	e097      	b.n	8003760 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003634:	4b5c      	ldr	r3, [pc, #368]	@ (80037a8 <UART_SetConfig+0x2f8>)
 8003636:	0052      	lsls	r2, r2, #1
 8003638:	5ad3      	ldrh	r3, [r2, r3]
 800363a:	0019      	movs	r1, r3
 800363c:	69b8      	ldr	r0, [r7, #24]
 800363e:	f7fc fd7f 	bl	8000140 <__udivsi3>
 8003642:	0003      	movs	r3, r0
 8003644:	005a      	lsls	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	18d2      	adds	r2, r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0019      	movs	r1, r3
 8003654:	0010      	movs	r0, r2
 8003656:	f7fc fd73 	bl	8000140 <__udivsi3>
 800365a:	0003      	movs	r3, r0
 800365c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b0f      	cmp	r3, #15
 8003662:	d91c      	bls.n	800369e <UART_SetConfig+0x1ee>
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	2380      	movs	r3, #128	@ 0x80
 8003668:	025b      	lsls	r3, r3, #9
 800366a:	429a      	cmp	r2, r3
 800366c:	d217      	bcs.n	800369e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	b29a      	uxth	r2, r3
 8003672:	200e      	movs	r0, #14
 8003674:	183b      	adds	r3, r7, r0
 8003676:	210f      	movs	r1, #15
 8003678:	438a      	bics	r2, r1
 800367a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	b29b      	uxth	r3, r3
 8003682:	2207      	movs	r2, #7
 8003684:	4013      	ands	r3, r2
 8003686:	b299      	uxth	r1, r3
 8003688:	183b      	adds	r3, r7, r0
 800368a:	183a      	adds	r2, r7, r0
 800368c:	8812      	ldrh	r2, [r2, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	183a      	adds	r2, r7, r0
 8003698:	8812      	ldrh	r2, [r2, #0]
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	e060      	b.n	8003760 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800369e:	231e      	movs	r3, #30
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e05b      	b.n	8003760 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036a8:	231f      	movs	r3, #31
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d01f      	beq.n	80036f2 <UART_SetConfig+0x242>
 80036b2:	dc22      	bgt.n	80036fa <UART_SetConfig+0x24a>
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d017      	beq.n	80036e8 <UART_SetConfig+0x238>
 80036b8:	dc1f      	bgt.n	80036fa <UART_SetConfig+0x24a>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <UART_SetConfig+0x214>
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d005      	beq.n	80036ce <UART_SetConfig+0x21e>
 80036c2:	e01a      	b.n	80036fa <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c4:	f7fe fe2a 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 80036c8:	0003      	movs	r3, r0
 80036ca:	61bb      	str	r3, [r7, #24]
        break;
 80036cc:	e01c      	b.n	8003708 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80036ce:	4b33      	ldr	r3, [pc, #204]	@ (800379c <UART_SetConfig+0x2ec>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2207      	movs	r2, #7
 80036d6:	4013      	ands	r3, r2
 80036d8:	3301      	adds	r3, #1
 80036da:	0019      	movs	r1, r3
 80036dc:	4831      	ldr	r0, [pc, #196]	@ (80037a4 <UART_SetConfig+0x2f4>)
 80036de:	f7fc fd2f 	bl	8000140 <__udivsi3>
 80036e2:	0003      	movs	r3, r0
 80036e4:	61bb      	str	r3, [r7, #24]
        break;
 80036e6:	e00f      	b.n	8003708 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036e8:	f7fe fda4 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80036ec:	0003      	movs	r3, r0
 80036ee:	61bb      	str	r3, [r7, #24]
        break;
 80036f0:	e00a      	b.n	8003708 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	61bb      	str	r3, [r7, #24]
        break;
 80036f8:	e006      	b.n	8003708 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036fe:	231e      	movs	r3, #30
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
        break;
 8003706:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d028      	beq.n	8003760 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003712:	4b25      	ldr	r3, [pc, #148]	@ (80037a8 <UART_SetConfig+0x2f8>)
 8003714:	0052      	lsls	r2, r2, #1
 8003716:	5ad3      	ldrh	r3, [r2, r3]
 8003718:	0019      	movs	r1, r3
 800371a:	69b8      	ldr	r0, [r7, #24]
 800371c:	f7fc fd10 	bl	8000140 <__udivsi3>
 8003720:	0003      	movs	r3, r0
 8003722:	001a      	movs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	085b      	lsrs	r3, r3, #1
 800372a:	18d2      	adds	r2, r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	0019      	movs	r1, r3
 8003732:	0010      	movs	r0, r2
 8003734:	f7fc fd04 	bl	8000140 <__udivsi3>
 8003738:	0003      	movs	r3, r0
 800373a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b0f      	cmp	r3, #15
 8003740:	d90a      	bls.n	8003758 <UART_SetConfig+0x2a8>
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	2380      	movs	r3, #128	@ 0x80
 8003746:	025b      	lsls	r3, r3, #9
 8003748:	429a      	cmp	r2, r3
 800374a:	d205      	bcs.n	8003758 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	e003      	b.n	8003760 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003758:	231e      	movs	r3, #30
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	226a      	movs	r2, #106	@ 0x6a
 8003764:	2101      	movs	r1, #1
 8003766:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2268      	movs	r2, #104	@ 0x68
 800376c:	2101      	movs	r1, #1
 800376e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800377c:	231e      	movs	r3, #30
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	781b      	ldrb	r3, [r3, #0]
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b008      	add	sp, #32
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	cfff69f3 	.word	0xcfff69f3
 8003790:	ffffcfff 	.word	0xffffcfff
 8003794:	11fff4ff 	.word	0x11fff4ff
 8003798:	40013800 	.word	0x40013800
 800379c:	40021000 	.word	0x40021000
 80037a0:	40004400 	.word	0x40004400
 80037a4:	02dc6c00 	.word	0x02dc6c00
 80037a8:	08006080 	.word	0x08006080

080037ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	2208      	movs	r2, #8
 80037ba:	4013      	ands	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a4a      	ldr	r2, [pc, #296]	@ (80038f0 <UART_AdvFeatureConfig+0x144>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	0019      	movs	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	2201      	movs	r2, #1
 80037dc:	4013      	ands	r3, r2
 80037de:	d00b      	beq.n	80037f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4a43      	ldr	r2, [pc, #268]	@ (80038f4 <UART_AdvFeatureConfig+0x148>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	0019      	movs	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fc:	2202      	movs	r2, #2
 80037fe:	4013      	ands	r3, r2
 8003800:	d00b      	beq.n	800381a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a3b      	ldr	r2, [pc, #236]	@ (80038f8 <UART_AdvFeatureConfig+0x14c>)
 800380a:	4013      	ands	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381e:	2204      	movs	r2, #4
 8003820:	4013      	ands	r3, r2
 8003822:	d00b      	beq.n	800383c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a34      	ldr	r2, [pc, #208]	@ (80038fc <UART_AdvFeatureConfig+0x150>)
 800382c:	4013      	ands	r3, r2
 800382e:	0019      	movs	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003840:	2210      	movs	r2, #16
 8003842:	4013      	ands	r3, r2
 8003844:	d00b      	beq.n	800385e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a2c      	ldr	r2, [pc, #176]	@ (8003900 <UART_AdvFeatureConfig+0x154>)
 800384e:	4013      	ands	r3, r2
 8003850:	0019      	movs	r1, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	2220      	movs	r2, #32
 8003864:	4013      	ands	r3, r2
 8003866:	d00b      	beq.n	8003880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	4a25      	ldr	r2, [pc, #148]	@ (8003904 <UART_AdvFeatureConfig+0x158>)
 8003870:	4013      	ands	r3, r2
 8003872:	0019      	movs	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003884:	2240      	movs	r2, #64	@ 0x40
 8003886:	4013      	ands	r3, r2
 8003888:	d01d      	beq.n	80038c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4a1d      	ldr	r2, [pc, #116]	@ (8003908 <UART_AdvFeatureConfig+0x15c>)
 8003892:	4013      	ands	r3, r2
 8003894:	0019      	movs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038a6:	2380      	movs	r3, #128	@ 0x80
 80038a8:	035b      	lsls	r3, r3, #13
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d10b      	bne.n	80038c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a15      	ldr	r2, [pc, #84]	@ (800390c <UART_AdvFeatureConfig+0x160>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ca:	2280      	movs	r2, #128	@ 0x80
 80038cc:	4013      	ands	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003910 <UART_AdvFeatureConfig+0x164>)
 80038d8:	4013      	ands	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
  }
}
 80038e8:	46c0      	nop			@ (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	ffff7fff 	.word	0xffff7fff
 80038f4:	fffdffff 	.word	0xfffdffff
 80038f8:	fffeffff 	.word	0xfffeffff
 80038fc:	fffbffff 	.word	0xfffbffff
 8003900:	ffffefff 	.word	0xffffefff
 8003904:	ffffdfff 	.word	0xffffdfff
 8003908:	ffefffff 	.word	0xffefffff
 800390c:	ff9fffff 	.word	0xff9fffff
 8003910:	fff7ffff 	.word	0xfff7ffff

08003914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b092      	sub	sp, #72	@ 0x48
 8003918:	af02      	add	r7, sp, #8
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2290      	movs	r2, #144	@ 0x90
 8003920:	2100      	movs	r1, #0
 8003922:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003924:	f7fd fdd8 	bl	80014d8 <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2208      	movs	r2, #8
 8003934:	4013      	ands	r3, r2
 8003936:	2b08      	cmp	r3, #8
 8003938:	d12d      	bne.n	8003996 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800393a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393c:	2280      	movs	r2, #128	@ 0x80
 800393e:	0391      	lsls	r1, r2, #14
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4a47      	ldr	r2, [pc, #284]	@ (8003a60 <UART_CheckIdleState+0x14c>)
 8003944:	9200      	str	r2, [sp, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	f000 f88e 	bl	8003a68 <UART_WaitOnFlagUntilTimeout>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d022      	beq.n	8003996 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003950:	f3ef 8310 	mrs	r3, PRIMASK
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003958:	63bb      	str	r3, [r7, #56]	@ 0x38
 800395a:	2301      	movs	r3, #1
 800395c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003960:	f383 8810 	msr	PRIMASK, r3
}
 8003964:	46c0      	nop			@ (mov r8, r8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2180      	movs	r1, #128	@ 0x80
 8003972:	438a      	bics	r2, r1
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397c:	f383 8810 	msr	PRIMASK, r3
}
 8003980:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2288      	movs	r2, #136	@ 0x88
 8003986:	2120      	movs	r1, #32
 8003988:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2284      	movs	r2, #132	@ 0x84
 800398e:	2100      	movs	r1, #0
 8003990:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e060      	b.n	8003a58 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2204      	movs	r2, #4
 800399e:	4013      	ands	r3, r2
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d146      	bne.n	8003a32 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a6:	2280      	movs	r2, #128	@ 0x80
 80039a8:	03d1      	lsls	r1, r2, #15
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003a60 <UART_CheckIdleState+0x14c>)
 80039ae:	9200      	str	r2, [sp, #0]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f000 f859 	bl	8003a68 <UART_WaitOnFlagUntilTimeout>
 80039b6:	1e03      	subs	r3, r0, #0
 80039b8:	d03b      	beq.n	8003a32 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039ba:	f3ef 8310 	mrs	r3, PRIMASK
 80039be:	60fb      	str	r3, [r7, #12]
  return(result);
 80039c0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c4:	2301      	movs	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f383 8810 	msr	PRIMASK, r3
}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4922      	ldr	r1, [pc, #136]	@ (8003a64 <UART_CheckIdleState+0x150>)
 80039dc:	400a      	ands	r2, r1
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f383 8810 	msr	PRIMASK, r3
}
 80039ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039ec:	f3ef 8310 	mrs	r3, PRIMASK
 80039f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80039f2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039f6:	2301      	movs	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f383 8810 	msr	PRIMASK, r3
}
 8003a00:	46c0      	nop			@ (mov r8, r8)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	438a      	bics	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	f383 8810 	msr	PRIMASK, r3
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	228c      	movs	r2, #140	@ 0x8c
 8003a22:	2120      	movs	r1, #32
 8003a24:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2284      	movs	r2, #132	@ 0x84
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e012      	b.n	8003a58 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2288      	movs	r2, #136	@ 0x88
 8003a36:	2120      	movs	r1, #32
 8003a38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	228c      	movs	r2, #140	@ 0x8c
 8003a3e:	2120      	movs	r1, #32
 8003a40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2284      	movs	r2, #132	@ 0x84
 8003a52:	2100      	movs	r1, #0
 8003a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	0018      	movs	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b010      	add	sp, #64	@ 0x40
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	01ffffff 	.word	0x01ffffff
 8003a64:	fffffedf 	.word	0xfffffedf

08003a68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	1dfb      	adds	r3, r7, #7
 8003a76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a78:	e051      	b.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	d04e      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a80:	f7fd fd2a 	bl	80014d8 <HAL_GetTick>
 8003a84:	0002      	movs	r2, r0
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d302      	bcc.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e051      	b.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d03b      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b80      	cmp	r3, #128	@ 0x80
 8003aaa:	d038      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b40      	cmp	r3, #64	@ 0x40
 8003ab0:	d035      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d111      	bne.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 f960 	bl	8003d90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2290      	movs	r2, #144	@ 0x90
 8003ad4:	2108      	movs	r1, #8
 8003ad6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2284      	movs	r2, #132	@ 0x84
 8003adc:	2100      	movs	r1, #0
 8003ade:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e02c      	b.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	2380      	movs	r3, #128	@ 0x80
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	401a      	ands	r2, r3
 8003af0:	2380      	movs	r3, #128	@ 0x80
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d112      	bne.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2280      	movs	r2, #128	@ 0x80
 8003afe:	0112      	lsls	r2, r2, #4
 8003b00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	0018      	movs	r0, r3
 8003b06:	f000 f943 	bl	8003d90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2290      	movs	r2, #144	@ 0x90
 8003b0e:	2120      	movs	r1, #32
 8003b10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2284      	movs	r2, #132	@ 0x84
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e00f      	b.n	8003b3e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	425a      	negs	r2, r3
 8003b2e:	4153      	adcs	r3, r2
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	001a      	movs	r2, r3
 8003b34:	1dfb      	adds	r3, r7, #7
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d09e      	beq.n	8003a7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b004      	add	sp, #16
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b098      	sub	sp, #96	@ 0x60
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	1dbb      	adds	r3, r7, #6
 8003b54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1dba      	adds	r2, r7, #6
 8003b60:	215c      	movs	r1, #92	@ 0x5c
 8003b62:	8812      	ldrh	r2, [r2, #0]
 8003b64:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1dba      	adds	r2, r7, #6
 8003b6a:	215e      	movs	r1, #94	@ 0x5e
 8003b6c:	8812      	ldrh	r2, [r2, #0]
 8003b6e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	2380      	movs	r3, #128	@ 0x80
 8003b7c:	015b      	lsls	r3, r3, #5
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d10d      	bne.n	8003b9e <UART_Start_Receive_IT+0x56>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d104      	bne.n	8003b94 <UART_Start_Receive_IT+0x4c>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2260      	movs	r2, #96	@ 0x60
 8003b8e:	497b      	ldr	r1, [pc, #492]	@ (8003d7c <UART_Start_Receive_IT+0x234>)
 8003b90:	5299      	strh	r1, [r3, r2]
 8003b92:	e02e      	b.n	8003bf2 <UART_Start_Receive_IT+0xaa>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2260      	movs	r2, #96	@ 0x60
 8003b98:	21ff      	movs	r1, #255	@ 0xff
 8003b9a:	5299      	strh	r1, [r3, r2]
 8003b9c:	e029      	b.n	8003bf2 <UART_Start_Receive_IT+0xaa>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10d      	bne.n	8003bc2 <UART_Start_Receive_IT+0x7a>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <UART_Start_Receive_IT+0x70>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2260      	movs	r2, #96	@ 0x60
 8003bb2:	21ff      	movs	r1, #255	@ 0xff
 8003bb4:	5299      	strh	r1, [r3, r2]
 8003bb6:	e01c      	b.n	8003bf2 <UART_Start_Receive_IT+0xaa>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2260      	movs	r2, #96	@ 0x60
 8003bbc:	217f      	movs	r1, #127	@ 0x7f
 8003bbe:	5299      	strh	r1, [r3, r2]
 8003bc0:	e017      	b.n	8003bf2 <UART_Start_Receive_IT+0xaa>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	2380      	movs	r3, #128	@ 0x80
 8003bc8:	055b      	lsls	r3, r3, #21
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d10d      	bne.n	8003bea <UART_Start_Receive_IT+0xa2>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d104      	bne.n	8003be0 <UART_Start_Receive_IT+0x98>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2260      	movs	r2, #96	@ 0x60
 8003bda:	217f      	movs	r1, #127	@ 0x7f
 8003bdc:	5299      	strh	r1, [r3, r2]
 8003bde:	e008      	b.n	8003bf2 <UART_Start_Receive_IT+0xaa>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2260      	movs	r2, #96	@ 0x60
 8003be4:	213f      	movs	r1, #63	@ 0x3f
 8003be6:	5299      	strh	r1, [r3, r2]
 8003be8:	e003      	b.n	8003bf2 <UART_Start_Receive_IT+0xaa>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2260      	movs	r2, #96	@ 0x60
 8003bee:	2100      	movs	r1, #0
 8003bf0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2290      	movs	r2, #144	@ 0x90
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	228c      	movs	r2, #140	@ 0x8c
 8003bfe:	2122      	movs	r1, #34	@ 0x22
 8003c00:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c02:	f3ef 8310 	mrs	r3, PRIMASK
 8003c06:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8003c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c12:	f383 8810 	msr	PRIMASK, r3
}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2101      	movs	r1, #1
 8003c24:	430a      	orrs	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c2e:	f383 8810 	msr	PRIMASK, r3
}
 8003c32:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003c38:	2380      	movs	r3, #128	@ 0x80
 8003c3a:	059b      	lsls	r3, r3, #22
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d150      	bne.n	8003ce2 <UART_Start_Receive_IT+0x19a>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2268      	movs	r2, #104	@ 0x68
 8003c44:	5a9b      	ldrh	r3, [r3, r2]
 8003c46:	1dba      	adds	r2, r7, #6
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d349      	bcc.n	8003ce2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	2380      	movs	r3, #128	@ 0x80
 8003c54:	015b      	lsls	r3, r3, #5
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d107      	bne.n	8003c6a <UART_Start_Receive_IT+0x122>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a46      	ldr	r2, [pc, #280]	@ (8003d80 <UART_Start_Receive_IT+0x238>)
 8003c66:	675a      	str	r2, [r3, #116]	@ 0x74
 8003c68:	e002      	b.n	8003c70 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a45      	ldr	r2, [pc, #276]	@ (8003d84 <UART_Start_Receive_IT+0x23c>)
 8003c6e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d019      	beq.n	8003cac <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c78:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c82:	2301      	movs	r3, #1
 8003c84:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c88:	f383 8810 	msr	PRIMASK, r3
}
 8003c8c:	46c0      	nop			@ (mov r8, r8)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2180      	movs	r1, #128	@ 0x80
 8003c9a:	0049      	lsls	r1, r1, #1
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cac:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003cb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			@ (mov r8, r8)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2180      	movs	r1, #128	@ 0x80
 8003cce:	0549      	lsls	r1, r1, #21
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	f383 8810 	msr	PRIMASK, r3
}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	e047      	b.n	8003d72 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	2380      	movs	r3, #128	@ 0x80
 8003ce8:	015b      	lsls	r3, r3, #5
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d107      	bne.n	8003cfe <UART_Start_Receive_IT+0x1b6>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d103      	bne.n	8003cfe <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a23      	ldr	r2, [pc, #140]	@ (8003d88 <UART_Start_Receive_IT+0x240>)
 8003cfa:	675a      	str	r2, [r3, #116]	@ 0x74
 8003cfc:	e002      	b.n	8003d04 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4a22      	ldr	r2, [pc, #136]	@ (8003d8c <UART_Start_Receive_IT+0x244>)
 8003d02:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d019      	beq.n	8003d40 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d10:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d12:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d16:	2301      	movs	r3, #1
 8003d18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f383 8810 	msr	PRIMASK, r3
}
 8003d20:	46c0      	nop			@ (mov r8, r8)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2190      	movs	r1, #144	@ 0x90
 8003d2e:	0049      	lsls	r1, r1, #1
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	f383 8810 	msr	PRIMASK, r3
}
 8003d3e:	e018      	b.n	8003d72 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d40:	f3ef 8310 	mrs	r3, PRIMASK
 8003d44:	613b      	str	r3, [r7, #16]
  return(result);
 8003d46:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d48:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f383 8810 	msr	PRIMASK, r3
}
 8003d54:	46c0      	nop			@ (mov r8, r8)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2120      	movs	r1, #32
 8003d62:	430a      	orrs	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f383 8810 	msr	PRIMASK, r3
}
 8003d70:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b018      	add	sp, #96	@ 0x60
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	000001ff 	.word	0x000001ff
 8003d80:	08004581 	.word	0x08004581
 8003d84:	0800424d 	.word	0x0800424d
 8003d88:	08004095 	.word	0x08004095
 8003d8c:	08003edd 	.word	0x08003edd

08003d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08e      	sub	sp, #56	@ 0x38
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d98:	f3ef 8310 	mrs	r3, PRIMASK
 8003d9c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d9e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f383 8810 	msr	PRIMASK, r3
}
 8003dac:	46c0      	nop			@ (mov r8, r8)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4926      	ldr	r1, [pc, #152]	@ (8003e54 <UART_EndRxTransfer+0xc4>)
 8003dba:	400a      	ands	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f383 8810 	msr	PRIMASK, r3
}
 8003dc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003dca:	f3ef 8310 	mrs	r3, PRIMASK
 8003dce:	623b      	str	r3, [r7, #32]
  return(result);
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003dd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	f383 8810 	msr	PRIMASK, r3
}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	491b      	ldr	r1, [pc, #108]	@ (8003e58 <UART_EndRxTransfer+0xc8>)
 8003dec:	400a      	ands	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df6:	f383 8810 	msr	PRIMASK, r3
}
 8003dfa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d118      	bne.n	8003e36 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e04:	f3ef 8310 	mrs	r3, PRIMASK
 8003e08:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e0e:	2301      	movs	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f383 8810 	msr	PRIMASK, r3
}
 8003e18:	46c0      	nop			@ (mov r8, r8)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2110      	movs	r1, #16
 8003e26:	438a      	bics	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f383 8810 	msr	PRIMASK, r3
}
 8003e34:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	228c      	movs	r2, #140	@ 0x8c
 8003e3a:	2120      	movs	r1, #32
 8003e3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b00e      	add	sp, #56	@ 0x38
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	fffffedf 	.word	0xfffffedf
 8003e58:	effffffe 	.word	0xeffffffe

08003e5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	225e      	movs	r2, #94	@ 0x5e
 8003e6e:	2100      	movs	r1, #0
 8003e70:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7ff fb07 	bl	8003488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b004      	add	sp, #16
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e90:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	2301      	movs	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f383 8810 	msr	PRIMASK, r3
}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2140      	movs	r1, #64	@ 0x40
 8003eac:	438a      	bics	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f383 8810 	msr	PRIMASK, r3
}
 8003eba:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2288      	movs	r2, #136	@ 0x88
 8003ec0:	2120      	movs	r1, #32
 8003ec2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f7ff fad3 	bl	8003478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b006      	add	sp, #24
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b094      	sub	sp, #80	@ 0x50
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ee4:	204e      	movs	r0, #78	@ 0x4e
 8003ee6:	183b      	adds	r3, r7, r0
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	2160      	movs	r1, #96	@ 0x60
 8003eec:	5a52      	ldrh	r2, [r2, r1]
 8003eee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	228c      	movs	r2, #140	@ 0x8c
 8003ef4:	589b      	ldr	r3, [r3, r2]
 8003ef6:	2b22      	cmp	r3, #34	@ 0x22
 8003ef8:	d000      	beq.n	8003efc <UART_RxISR_8BIT+0x20>
 8003efa:	e0ba      	b.n	8004072 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f02:	214c      	movs	r1, #76	@ 0x4c
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f08:	187b      	adds	r3, r7, r1
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	183b      	adds	r3, r7, r0
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	b2d9      	uxtb	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f18:	400a      	ands	r2, r1
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	225e      	movs	r2, #94	@ 0x5e
 8003f2c:	5a9b      	ldrh	r3, [r3, r2]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b299      	uxth	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	225e      	movs	r2, #94	@ 0x5e
 8003f38:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	225e      	movs	r2, #94	@ 0x5e
 8003f3e:	5a9b      	ldrh	r3, [r3, r2]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d000      	beq.n	8003f48 <UART_RxISR_8BIT+0x6c>
 8003f46:	e09c      	b.n	8004082 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f48:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f52:	2301      	movs	r3, #1
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	46c0      	nop			@ (mov r8, r8)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4948      	ldr	r1, [pc, #288]	@ (800408c <UART_RxISR_8BIT+0x1b0>)
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f74:	f383 8810 	msr	PRIMASK, r3
}
 8003f78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f84:	2301      	movs	r3, #1
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8a:	f383 8810 	msr	PRIMASK, r3
}
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa6:	f383 8810 	msr	PRIMASK, r3
}
 8003faa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	228c      	movs	r2, #140	@ 0x8c
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	2380      	movs	r3, #128	@ 0x80
 8003fc8:	041b      	lsls	r3, r3, #16
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d018      	beq.n	8004000 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fce:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fd8:	2301      	movs	r3, #1
 8003fda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4928      	ldr	r1, [pc, #160]	@ (8004090 <UART_RxISR_8BIT+0x1b4>)
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f383 8810 	msr	PRIMASK, r3
}
 8003ffe:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d12f      	bne.n	8004068 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800400e:	f3ef 8310 	mrs	r3, PRIMASK
 8004012:	60fb      	str	r3, [r7, #12]
  return(result);
 8004014:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004018:	2301      	movs	r3, #1
 800401a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f383 8810 	msr	PRIMASK, r3
}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2110      	movs	r1, #16
 8004030:	438a      	bics	r2, r1
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004036:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f383 8810 	msr	PRIMASK, r3
}
 800403e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	2210      	movs	r2, #16
 8004048:	4013      	ands	r3, r2
 800404a:	2b10      	cmp	r3, #16
 800404c:	d103      	bne.n	8004056 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2210      	movs	r2, #16
 8004054:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	225c      	movs	r2, #92	@ 0x5c
 800405a:	5a9a      	ldrh	r2, [r3, r2]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0011      	movs	r1, r2
 8004060:	0018      	movs	r0, r3
 8004062:	f7ff fa19 	bl	8003498 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004066:	e00c      	b.n	8004082 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	0018      	movs	r0, r3
 800406c:	f7fc fc8a 	bl	8000984 <HAL_UART_RxCpltCallback>
}
 8004070:	e007      	b.n	8004082 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2108      	movs	r1, #8
 800407e:	430a      	orrs	r2, r1
 8004080:	619a      	str	r2, [r3, #24]
}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	46bd      	mov	sp, r7
 8004086:	b014      	add	sp, #80	@ 0x50
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	fffffedf 	.word	0xfffffedf
 8004090:	fbffffff 	.word	0xfbffffff

08004094 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b094      	sub	sp, #80	@ 0x50
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800409c:	204e      	movs	r0, #78	@ 0x4e
 800409e:	183b      	adds	r3, r7, r0
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	2160      	movs	r1, #96	@ 0x60
 80040a4:	5a52      	ldrh	r2, [r2, r1]
 80040a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	228c      	movs	r2, #140	@ 0x8c
 80040ac:	589b      	ldr	r3, [r3, r2]
 80040ae:	2b22      	cmp	r3, #34	@ 0x22
 80040b0:	d000      	beq.n	80040b4 <UART_RxISR_16BIT+0x20>
 80040b2:	e0ba      	b.n	800422a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040ba:	214c      	movs	r1, #76	@ 0x4c
 80040bc:	187b      	adds	r3, r7, r1
 80040be:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80040c6:	187b      	adds	r3, r7, r1
 80040c8:	183a      	adds	r2, r7, r0
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	4013      	ands	r3, r2
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040da:	1c9a      	adds	r2, r3, #2
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	225e      	movs	r2, #94	@ 0x5e
 80040e4:	5a9b      	ldrh	r3, [r3, r2]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b299      	uxth	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	225e      	movs	r2, #94	@ 0x5e
 80040f0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	225e      	movs	r2, #94	@ 0x5e
 80040f6:	5a9b      	ldrh	r3, [r3, r2]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d000      	beq.n	8004100 <UART_RxISR_16BIT+0x6c>
 80040fe:	e09c      	b.n	800423a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004100:	f3ef 8310 	mrs	r3, PRIMASK
 8004104:	623b      	str	r3, [r7, #32]
  return(result);
 8004106:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004108:	647b      	str	r3, [r7, #68]	@ 0x44
 800410a:	2301      	movs	r3, #1
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	f383 8810 	msr	PRIMASK, r3
}
 8004114:	46c0      	nop			@ (mov r8, r8)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4948      	ldr	r1, [pc, #288]	@ (8004244 <UART_RxISR_16BIT+0x1b0>)
 8004122:	400a      	ands	r2, r1
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004128:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412c:	f383 8810 	msr	PRIMASK, r3
}
 8004130:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004132:	f3ef 8310 	mrs	r3, PRIMASK
 8004136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413a:	643b      	str	r3, [r7, #64]	@ 0x40
 800413c:	2301      	movs	r3, #1
 800413e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004142:	f383 8810 	msr	PRIMASK, r3
}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2101      	movs	r1, #1
 8004154:	438a      	bics	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800415a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415e:	f383 8810 	msr	PRIMASK, r3
}
 8004162:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	228c      	movs	r2, #140	@ 0x8c
 8004168:	2120      	movs	r1, #32
 800416a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	2380      	movs	r3, #128	@ 0x80
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	4013      	ands	r3, r2
 8004184:	d018      	beq.n	80041b8 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004186:	f3ef 8310 	mrs	r3, PRIMASK
 800418a:	617b      	str	r3, [r7, #20]
  return(result);
 800418c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004190:	2301      	movs	r3, #1
 8004192:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f383 8810 	msr	PRIMASK, r3
}
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4928      	ldr	r1, [pc, #160]	@ (8004248 <UART_RxISR_16BIT+0x1b4>)
 80041a8:	400a      	ands	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f383 8810 	msr	PRIMASK, r3
}
 80041b6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d12f      	bne.n	8004220 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041c6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80041cc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041d0:	2301      	movs	r3, #1
 80041d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f383 8810 	msr	PRIMASK, r3
}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2110      	movs	r1, #16
 80041e8:	438a      	bics	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f383 8810 	msr	PRIMASK, r3
}
 80041f6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	2210      	movs	r2, #16
 8004200:	4013      	ands	r3, r2
 8004202:	2b10      	cmp	r3, #16
 8004204:	d103      	bne.n	800420e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2210      	movs	r2, #16
 800420c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	225c      	movs	r2, #92	@ 0x5c
 8004212:	5a9a      	ldrh	r2, [r3, r2]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	0011      	movs	r1, r2
 8004218:	0018      	movs	r0, r3
 800421a:	f7ff f93d 	bl	8003498 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800421e:	e00c      	b.n	800423a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	0018      	movs	r0, r3
 8004224:	f7fc fbae 	bl	8000984 <HAL_UART_RxCpltCallback>
}
 8004228:	e007      	b.n	800423a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2108      	movs	r1, #8
 8004236:	430a      	orrs	r2, r1
 8004238:	619a      	str	r2, [r3, #24]
}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	46bd      	mov	sp, r7
 800423e:	b014      	add	sp, #80	@ 0x50
 8004240:	bd80      	pop	{r7, pc}
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	fffffedf 	.word	0xfffffedf
 8004248:	fbffffff 	.word	0xfbffffff

0800424c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b0a0      	sub	sp, #128	@ 0x80
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004254:	237a      	movs	r3, #122	@ 0x7a
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	2160      	movs	r1, #96	@ 0x60
 800425c:	5a52      	ldrh	r2, [r2, r1]
 800425e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	228c      	movs	r2, #140	@ 0x8c
 800427c:	589b      	ldr	r3, [r3, r2]
 800427e:	2b22      	cmp	r3, #34	@ 0x22
 8004280:	d000      	beq.n	8004284 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004282:	e166      	b.n	8004552 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004284:	236e      	movs	r3, #110	@ 0x6e
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	2168      	movs	r1, #104	@ 0x68
 800428c:	5a52      	ldrh	r2, [r2, r1]
 800428e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004290:	e10d      	b.n	80044ae <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004298:	216c      	movs	r1, #108	@ 0x6c
 800429a:	187b      	adds	r3, r7, r1
 800429c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800429e:	187b      	adds	r3, r7, r1
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	237a      	movs	r3, #122	@ 0x7a
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b2d9      	uxtb	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b0:	400a      	ands	r2, r1
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	225e      	movs	r2, #94	@ 0x5e
 80042c4:	5a9b      	ldrh	r3, [r3, r2]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b299      	uxth	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	225e      	movs	r2, #94	@ 0x5e
 80042d0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80042da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042dc:	2207      	movs	r2, #7
 80042de:	4013      	ands	r3, r2
 80042e0:	d049      	beq.n	8004376 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042e4:	2201      	movs	r2, #1
 80042e6:	4013      	ands	r3, r2
 80042e8:	d010      	beq.n	800430c <UART_RxISR_8BIT_FIFOEN+0xc0>
 80042ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4013      	ands	r3, r2
 80042f2:	d00b      	beq.n	800430c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2201      	movs	r2, #1
 80042fa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2290      	movs	r2, #144	@ 0x90
 8004300:	589b      	ldr	r3, [r3, r2]
 8004302:	2201      	movs	r2, #1
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2190      	movs	r1, #144	@ 0x90
 800430a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800430c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800430e:	2202      	movs	r2, #2
 8004310:	4013      	ands	r3, r2
 8004312:	d00f      	beq.n	8004334 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004314:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004316:	2201      	movs	r2, #1
 8004318:	4013      	ands	r3, r2
 800431a:	d00b      	beq.n	8004334 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2202      	movs	r2, #2
 8004322:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2290      	movs	r2, #144	@ 0x90
 8004328:	589b      	ldr	r3, [r3, r2]
 800432a:	2204      	movs	r2, #4
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2190      	movs	r1, #144	@ 0x90
 8004332:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004334:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004336:	2204      	movs	r2, #4
 8004338:	4013      	ands	r3, r2
 800433a:	d00f      	beq.n	800435c <UART_RxISR_8BIT_FIFOEN+0x110>
 800433c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800433e:	2201      	movs	r2, #1
 8004340:	4013      	ands	r3, r2
 8004342:	d00b      	beq.n	800435c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2204      	movs	r2, #4
 800434a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2290      	movs	r2, #144	@ 0x90
 8004350:	589b      	ldr	r3, [r3, r2]
 8004352:	2202      	movs	r2, #2
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2190      	movs	r1, #144	@ 0x90
 800435a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2290      	movs	r2, #144	@ 0x90
 8004360:	589b      	ldr	r3, [r3, r2]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f7ff f88d 	bl	8003488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2290      	movs	r2, #144	@ 0x90
 8004372:	2100      	movs	r1, #0
 8004374:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	225e      	movs	r2, #94	@ 0x5e
 800437a:	5a9b      	ldrh	r3, [r3, r2]
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d000      	beq.n	8004384 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004382:	e094      	b.n	80044ae <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004384:	f3ef 8310 	mrs	r3, PRIMASK
 8004388:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800438a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800438c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800438e:	2301      	movs	r3, #1
 8004390:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004394:	f383 8810 	msr	PRIMASK, r3
}
 8004398:	46c0      	nop			@ (mov r8, r8)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4971      	ldr	r1, [pc, #452]	@ (800456c <UART_RxISR_8BIT_FIFOEN+0x320>)
 80043a6:	400a      	ands	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043ac:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043b0:	f383 8810 	msr	PRIMASK, r3
}
 80043b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043b6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ba:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80043bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043be:	667b      	str	r3, [r7, #100]	@ 0x64
 80043c0:	2301      	movs	r3, #1
 80043c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043c6:	f383 8810 	msr	PRIMASK, r3
}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4966      	ldr	r1, [pc, #408]	@ (8004570 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80043d8:	400a      	ands	r2, r1
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e2:	f383 8810 	msr	PRIMASK, r3
}
 80043e6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	228c      	movs	r2, #140	@ 0x8c
 80043ec:	2120      	movs	r1, #32
 80043ee:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	2380      	movs	r3, #128	@ 0x80
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	4013      	ands	r3, r2
 8004408:	d018      	beq.n	800443c <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800440a:	f3ef 8310 	mrs	r3, PRIMASK
 800440e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004412:	663b      	str	r3, [r7, #96]	@ 0x60
 8004414:	2301      	movs	r3, #1
 8004416:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	f383 8810 	msr	PRIMASK, r3
}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4952      	ldr	r1, [pc, #328]	@ (8004574 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800442c:	400a      	ands	r2, r1
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004432:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004436:	f383 8810 	msr	PRIMASK, r3
}
 800443a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d12f      	bne.n	80044a4 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800444a:	f3ef 8310 	mrs	r3, PRIMASK
 800444e:	623b      	str	r3, [r7, #32]
  return(result);
 8004450:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004452:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004454:	2301      	movs	r3, #1
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	f383 8810 	msr	PRIMASK, r3
}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2110      	movs	r1, #16
 800446c:	438a      	bics	r2, r1
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004476:	f383 8810 	msr	PRIMASK, r3
}
 800447a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	2210      	movs	r2, #16
 8004484:	4013      	ands	r3, r2
 8004486:	2b10      	cmp	r3, #16
 8004488:	d103      	bne.n	8004492 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2210      	movs	r2, #16
 8004490:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	225c      	movs	r2, #92	@ 0x5c
 8004496:	5a9a      	ldrh	r2, [r3, r2]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	0011      	movs	r1, r2
 800449c:	0018      	movs	r0, r3
 800449e:	f7fe fffb 	bl	8003498 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80044a2:	e00e      	b.n	80044c2 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	0018      	movs	r0, r3
 80044a8:	f7fc fa6c 	bl	8000984 <HAL_UART_RxCpltCallback>
        break;
 80044ac:	e009      	b.n	80044c2 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80044ae:	236e      	movs	r3, #110	@ 0x6e
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <UART_RxISR_8BIT_FIFOEN+0x276>
 80044b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044ba:	2220      	movs	r2, #32
 80044bc:	4013      	ands	r3, r2
 80044be:	d000      	beq.n	80044c2 <UART_RxISR_8BIT_FIFOEN+0x276>
 80044c0:	e6e7      	b.n	8004292 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80044c2:	205a      	movs	r0, #90	@ 0x5a
 80044c4:	183b      	adds	r3, r7, r0
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	215e      	movs	r1, #94	@ 0x5e
 80044ca:	5a52      	ldrh	r2, [r2, r1]
 80044cc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80044ce:	0001      	movs	r1, r0
 80044d0:	187b      	adds	r3, r7, r1
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d044      	beq.n	8004562 <UART_RxISR_8BIT_FIFOEN+0x316>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2268      	movs	r2, #104	@ 0x68
 80044dc:	5a9b      	ldrh	r3, [r3, r2]
 80044de:	187a      	adds	r2, r7, r1
 80044e0:	8812      	ldrh	r2, [r2, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d23d      	bcs.n	8004562 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044e6:	f3ef 8310 	mrs	r3, PRIMASK
 80044ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ec:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80044ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80044f0:	2301      	movs	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f383 8810 	msr	PRIMASK, r3
}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	491c      	ldr	r1, [pc, #112]	@ (8004578 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8004508:	400a      	ands	r2, r1
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f383 8810 	msr	PRIMASK, r3
}
 8004516:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a18      	ldr	r2, [pc, #96]	@ (800457c <UART_RxISR_8BIT_FIFOEN+0x330>)
 800451c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800451e:	f3ef 8310 	mrs	r3, PRIMASK
 8004522:	617b      	str	r3, [r7, #20]
  return(result);
 8004524:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004526:	653b      	str	r3, [r7, #80]	@ 0x50
 8004528:	2301      	movs	r3, #1
 800452a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f383 8810 	msr	PRIMASK, r3
}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2120      	movs	r1, #32
 8004540:	430a      	orrs	r2, r1
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004546:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f383 8810 	msr	PRIMASK, r3
}
 800454e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004550:	e007      	b.n	8004562 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699a      	ldr	r2, [r3, #24]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2108      	movs	r1, #8
 800455e:	430a      	orrs	r2, r1
 8004560:	619a      	str	r2, [r3, #24]
}
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	46bd      	mov	sp, r7
 8004566:	b020      	add	sp, #128	@ 0x80
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	fffffeff 	.word	0xfffffeff
 8004570:	effffffe 	.word	0xeffffffe
 8004574:	fbffffff 	.word	0xfbffffff
 8004578:	efffffff 	.word	0xefffffff
 800457c:	08003edd 	.word	0x08003edd

08004580 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b0a2      	sub	sp, #136	@ 0x88
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004588:	2382      	movs	r3, #130	@ 0x82
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	2160      	movs	r1, #96	@ 0x60
 8004590:	5a52      	ldrh	r2, [r2, r1]
 8004592:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	2284      	movs	r2, #132	@ 0x84
 800459c:	18ba      	adds	r2, r7, r2
 800459e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	228c      	movs	r2, #140	@ 0x8c
 80045b4:	589b      	ldr	r3, [r3, r2]
 80045b6:	2b22      	cmp	r3, #34	@ 0x22
 80045b8:	d000      	beq.n	80045bc <UART_RxISR_16BIT_FIFOEN+0x3c>
 80045ba:	e170      	b.n	800489e <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80045bc:	2376      	movs	r3, #118	@ 0x76
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	2168      	movs	r1, #104	@ 0x68
 80045c4:	5a52      	ldrh	r2, [r2, r1]
 80045c6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045c8:	e115      	b.n	80047f6 <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045d0:	2174      	movs	r1, #116	@ 0x74
 80045d2:	187b      	adds	r3, r7, r1
 80045d4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045da:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	2282      	movs	r2, #130	@ 0x82
 80045e0:	18ba      	adds	r2, r7, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	8812      	ldrh	r2, [r2, #0]
 80045e6:	4013      	ands	r3, r2
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f2:	1c9a      	adds	r2, r3, #2
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	225e      	movs	r2, #94	@ 0x5e
 80045fc:	5a9b      	ldrh	r3, [r3, r2]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b299      	uxth	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	225e      	movs	r2, #94	@ 0x5e
 8004608:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	2184      	movs	r1, #132	@ 0x84
 8004612:	187a      	adds	r2, r7, r1
 8004614:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004616:	187b      	adds	r3, r7, r1
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2207      	movs	r2, #7
 800461c:	4013      	ands	r3, r2
 800461e:	d04e      	beq.n	80046be <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004620:	187b      	adds	r3, r7, r1
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2201      	movs	r2, #1
 8004626:	4013      	ands	r3, r2
 8004628:	d010      	beq.n	800464c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800462a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800462c:	2380      	movs	r3, #128	@ 0x80
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	4013      	ands	r3, r2
 8004632:	d00b      	beq.n	800464c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2201      	movs	r2, #1
 800463a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2290      	movs	r2, #144	@ 0x90
 8004640:	589b      	ldr	r3, [r3, r2]
 8004642:	2201      	movs	r2, #1
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2190      	movs	r1, #144	@ 0x90
 800464a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800464c:	2384      	movs	r3, #132	@ 0x84
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2202      	movs	r2, #2
 8004654:	4013      	ands	r3, r2
 8004656:	d00f      	beq.n	8004678 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004658:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800465a:	2201      	movs	r2, #1
 800465c:	4013      	ands	r3, r2
 800465e:	d00b      	beq.n	8004678 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2202      	movs	r2, #2
 8004666:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2290      	movs	r2, #144	@ 0x90
 800466c:	589b      	ldr	r3, [r3, r2]
 800466e:	2204      	movs	r2, #4
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2190      	movs	r1, #144	@ 0x90
 8004676:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004678:	2384      	movs	r3, #132	@ 0x84
 800467a:	18fb      	adds	r3, r7, r3
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2204      	movs	r2, #4
 8004680:	4013      	ands	r3, r2
 8004682:	d00f      	beq.n	80046a4 <UART_RxISR_16BIT_FIFOEN+0x124>
 8004684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004686:	2201      	movs	r2, #1
 8004688:	4013      	ands	r3, r2
 800468a:	d00b      	beq.n	80046a4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2204      	movs	r2, #4
 8004692:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2290      	movs	r2, #144	@ 0x90
 8004698:	589b      	ldr	r3, [r3, r2]
 800469a:	2202      	movs	r2, #2
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2190      	movs	r1, #144	@ 0x90
 80046a2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2290      	movs	r2, #144	@ 0x90
 80046a8:	589b      	ldr	r3, [r3, r2]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fe fee9 	bl	8003488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2290      	movs	r2, #144	@ 0x90
 80046ba:	2100      	movs	r1, #0
 80046bc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	225e      	movs	r2, #94	@ 0x5e
 80046c2:	5a9b      	ldrh	r3, [r3, r2]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d000      	beq.n	80046cc <UART_RxISR_16BIT_FIFOEN+0x14c>
 80046ca:	e094      	b.n	80047f6 <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046cc:	f3ef 8310 	mrs	r3, PRIMASK
 80046d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80046d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046d6:	2301      	movs	r3, #1
 80046d8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046dc:	f383 8810 	msr	PRIMASK, r3
}
 80046e0:	46c0      	nop			@ (mov r8, r8)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4972      	ldr	r1, [pc, #456]	@ (80048b8 <UART_RxISR_16BIT_FIFOEN+0x338>)
 80046ee:	400a      	ands	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046f4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046f8:	f383 8810 	msr	PRIMASK, r3
}
 80046fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004702:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004706:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004708:	2301      	movs	r3, #1
 800470a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800470e:	f383 8810 	msr	PRIMASK, r3
}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4967      	ldr	r1, [pc, #412]	@ (80048bc <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8004720:	400a      	ands	r2, r1
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004726:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800472a:	f383 8810 	msr	PRIMASK, r3
}
 800472e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	228c      	movs	r2, #140	@ 0x8c
 8004734:	2120      	movs	r1, #32
 8004736:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	2380      	movs	r3, #128	@ 0x80
 800474c:	041b      	lsls	r3, r3, #16
 800474e:	4013      	ands	r3, r2
 8004750:	d018      	beq.n	8004784 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004752:	f3ef 8310 	mrs	r3, PRIMASK
 8004756:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800475a:	667b      	str	r3, [r7, #100]	@ 0x64
 800475c:	2301      	movs	r3, #1
 800475e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004762:	f383 8810 	msr	PRIMASK, r3
}
 8004766:	46c0      	nop			@ (mov r8, r8)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4953      	ldr	r1, [pc, #332]	@ (80048c0 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8004774:	400a      	ands	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800477a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477e:	f383 8810 	msr	PRIMASK, r3
}
 8004782:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d12f      	bne.n	80047ec <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004792:	f3ef 8310 	mrs	r3, PRIMASK
 8004796:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479a:	663b      	str	r3, [r7, #96]	@ 0x60
 800479c:	2301      	movs	r3, #1
 800479e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a2:	f383 8810 	msr	PRIMASK, r3
}
 80047a6:	46c0      	nop			@ (mov r8, r8)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2110      	movs	r1, #16
 80047b4:	438a      	bics	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047be:	f383 8810 	msr	PRIMASK, r3
}
 80047c2:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	2210      	movs	r2, #16
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d103      	bne.n	80047da <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2210      	movs	r2, #16
 80047d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	225c      	movs	r2, #92	@ 0x5c
 80047de:	5a9a      	ldrh	r2, [r3, r2]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	0011      	movs	r1, r2
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7fe fe57 	bl	8003498 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80047ea:	e010      	b.n	800480e <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7fc f8c8 	bl	8000984 <HAL_UART_RxCpltCallback>
        break;
 80047f4:	e00b      	b.n	800480e <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047f6:	2376      	movs	r3, #118	@ 0x76
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d006      	beq.n	800480e <UART_RxISR_16BIT_FIFOEN+0x28e>
 8004800:	2384      	movs	r3, #132	@ 0x84
 8004802:	18fb      	adds	r3, r7, r3
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2220      	movs	r2, #32
 8004808:	4013      	ands	r3, r2
 800480a:	d000      	beq.n	800480e <UART_RxISR_16BIT_FIFOEN+0x28e>
 800480c:	e6dd      	b.n	80045ca <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800480e:	205e      	movs	r0, #94	@ 0x5e
 8004810:	183b      	adds	r3, r7, r0
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	215e      	movs	r1, #94	@ 0x5e
 8004816:	5a52      	ldrh	r2, [r2, r1]
 8004818:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800481a:	0001      	movs	r1, r0
 800481c:	187b      	adds	r3, r7, r1
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d044      	beq.n	80048ae <UART_RxISR_16BIT_FIFOEN+0x32e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2268      	movs	r2, #104	@ 0x68
 8004828:	5a9b      	ldrh	r3, [r3, r2]
 800482a:	187a      	adds	r2, r7, r1
 800482c:	8812      	ldrh	r2, [r2, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d23d      	bcs.n	80048ae <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	60fb      	str	r3, [r7, #12]
  return(result);
 8004838:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800483a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800483c:	2301      	movs	r3, #1
 800483e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f383 8810 	msr	PRIMASK, r3
}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	491c      	ldr	r1, [pc, #112]	@ (80048c4 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8004854:	400a      	ands	r2, r1
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800485a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f383 8810 	msr	PRIMASK, r3
}
 8004862:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a18      	ldr	r2, [pc, #96]	@ (80048c8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8004868:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800486a:	f3ef 8310 	mrs	r3, PRIMASK
 800486e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004870:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004872:	657b      	str	r3, [r7, #84]	@ 0x54
 8004874:	2301      	movs	r3, #1
 8004876:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f383 8810 	msr	PRIMASK, r3
}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2120      	movs	r1, #32
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004892:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	f383 8810 	msr	PRIMASK, r3
}
 800489a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800489c:	e007      	b.n	80048ae <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2108      	movs	r1, #8
 80048aa:	430a      	orrs	r2, r1
 80048ac:	619a      	str	r2, [r3, #24]
}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b022      	add	sp, #136	@ 0x88
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	fffffeff 	.word	0xfffffeff
 80048bc:	effffffe 	.word	0xeffffffe
 80048c0:	fbffffff 	.word	0xfbffffff
 80048c4:	efffffff 	.word	0xefffffff
 80048c8:	08004095 	.word	0x08004095

080048cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048d4:	46c0      	nop			@ (mov r8, r8)
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b002      	add	sp, #8
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80048e4:	46c0      	nop			@ (mov r8, r8)
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b002      	add	sp, #8
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80048f4:	46c0      	nop			@ (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b002      	add	sp, #8
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2284      	movs	r2, #132	@ 0x84
 8004908:	5c9b      	ldrb	r3, [r3, r2]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_UARTEx_DisableFifoMode+0x16>
 800490e:	2302      	movs	r3, #2
 8004910:	e027      	b.n	8004962 <HAL_UARTEx_DisableFifoMode+0x66>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2284      	movs	r2, #132	@ 0x84
 8004916:	2101      	movs	r1, #1
 8004918:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2288      	movs	r2, #136	@ 0x88
 800491e:	2124      	movs	r1, #36	@ 0x24
 8004920:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2101      	movs	r1, #1
 8004936:	438a      	bics	r2, r1
 8004938:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a0b      	ldr	r2, [pc, #44]	@ (800496c <HAL_UARTEx_DisableFifoMode+0x70>)
 800493e:	4013      	ands	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2288      	movs	r2, #136	@ 0x88
 8004954:	2120      	movs	r1, #32
 8004956:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2284      	movs	r2, #132	@ 0x84
 800495c:	2100      	movs	r1, #0
 800495e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	0018      	movs	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	b004      	add	sp, #16
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			@ (mov r8, r8)
 800496c:	dfffffff 	.word	0xdfffffff

08004970 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2284      	movs	r2, #132	@ 0x84
 800497e:	5c9b      	ldrb	r3, [r3, r2]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004984:	2302      	movs	r3, #2
 8004986:	e02e      	b.n	80049e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2284      	movs	r2, #132	@ 0x84
 800498c:	2101      	movs	r1, #1
 800498e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2288      	movs	r2, #136	@ 0x88
 8004994:	2124      	movs	r1, #36	@ 0x24
 8004996:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2101      	movs	r1, #1
 80049ac:	438a      	bics	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	08d9      	lsrs	r1, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f000 f854 	bl	8004a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2288      	movs	r2, #136	@ 0x88
 80049d8:	2120      	movs	r1, #32
 80049da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2284      	movs	r2, #132	@ 0x84
 80049e0:	2100      	movs	r1, #0
 80049e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b004      	add	sp, #16
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2284      	movs	r2, #132	@ 0x84
 80049fe:	5c9b      	ldrb	r3, [r3, r2]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e02f      	b.n	8004a68 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2284      	movs	r2, #132	@ 0x84
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2288      	movs	r2, #136	@ 0x88
 8004a14:	2124      	movs	r1, #36	@ 0x24
 8004a16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	438a      	bics	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	4a0e      	ldr	r2, [pc, #56]	@ (8004a70 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f000 f813 	bl	8004a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2288      	movs	r2, #136	@ 0x88
 8004a5a:	2120      	movs	r1, #32
 8004a5c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2284      	movs	r2, #132	@ 0x84
 8004a62:	2100      	movs	r1, #0
 8004a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	0018      	movs	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b004      	add	sp, #16
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	f1ffffff 	.word	0xf1ffffff

08004a74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d108      	bne.n	8004a96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	226a      	movs	r2, #106	@ 0x6a
 8004a88:	2101      	movs	r1, #1
 8004a8a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2268      	movs	r2, #104	@ 0x68
 8004a90:	2101      	movs	r1, #1
 8004a92:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a94:	e043      	b.n	8004b1e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a96:	260f      	movs	r6, #15
 8004a98:	19bb      	adds	r3, r7, r6
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a9e:	200e      	movs	r0, #14
 8004aa0:	183b      	adds	r3, r7, r0
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	0e5b      	lsrs	r3, r3, #25
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	240d      	movs	r4, #13
 8004ab2:	193b      	adds	r3, r7, r4
 8004ab4:	2107      	movs	r1, #7
 8004ab6:	400a      	ands	r2, r1
 8004ab8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	0f5b      	lsrs	r3, r3, #29
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	250c      	movs	r5, #12
 8004ac6:	197b      	adds	r3, r7, r5
 8004ac8:	2107      	movs	r1, #7
 8004aca:	400a      	ands	r2, r1
 8004acc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ace:	183b      	adds	r3, r7, r0
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	197a      	adds	r2, r7, r5
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	4914      	ldr	r1, [pc, #80]	@ (8004b28 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ad8:	5c8a      	ldrb	r2, [r1, r2]
 8004ada:	435a      	muls	r2, r3
 8004adc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ade:	197b      	adds	r3, r7, r5
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	4a12      	ldr	r2, [pc, #72]	@ (8004b2c <UARTEx_SetNbDataToProcess+0xb8>)
 8004ae4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	f7fb fbb4 	bl	8000254 <__divsi3>
 8004aec:	0003      	movs	r3, r0
 8004aee:	b299      	uxth	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	226a      	movs	r2, #106	@ 0x6a
 8004af4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004af6:	19bb      	adds	r3, r7, r6
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	193a      	adds	r2, r7, r4
 8004afc:	7812      	ldrb	r2, [r2, #0]
 8004afe:	490a      	ldr	r1, [pc, #40]	@ (8004b28 <UARTEx_SetNbDataToProcess+0xb4>)
 8004b00:	5c8a      	ldrb	r2, [r1, r2]
 8004b02:	435a      	muls	r2, r3
 8004b04:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b06:	193b      	adds	r3, r7, r4
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	4a08      	ldr	r2, [pc, #32]	@ (8004b2c <UARTEx_SetNbDataToProcess+0xb8>)
 8004b0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b0e:	0019      	movs	r1, r3
 8004b10:	f7fb fba0 	bl	8000254 <__divsi3>
 8004b14:	0003      	movs	r3, r0
 8004b16:	b299      	uxth	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2268      	movs	r2, #104	@ 0x68
 8004b1c:	5299      	strh	r1, [r3, r2]
}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b005      	add	sp, #20
 8004b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b26:	46c0      	nop			@ (mov r8, r8)
 8004b28:	08006098 	.word	0x08006098
 8004b2c:	080060a0 	.word	0x080060a0

08004b30 <std>:
 8004b30:	2300      	movs	r3, #0
 8004b32:	b510      	push	{r4, lr}
 8004b34:	0004      	movs	r4, r0
 8004b36:	6003      	str	r3, [r0, #0]
 8004b38:	6043      	str	r3, [r0, #4]
 8004b3a:	6083      	str	r3, [r0, #8]
 8004b3c:	8181      	strh	r1, [r0, #12]
 8004b3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b40:	81c2      	strh	r2, [r0, #14]
 8004b42:	6103      	str	r3, [r0, #16]
 8004b44:	6143      	str	r3, [r0, #20]
 8004b46:	6183      	str	r3, [r0, #24]
 8004b48:	0019      	movs	r1, r3
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	305c      	adds	r0, #92	@ 0x5c
 8004b4e:	f000 f953 	bl	8004df8 <memset>
 8004b52:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <std+0x50>)
 8004b54:	6224      	str	r4, [r4, #32]
 8004b56:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b58:	4b0a      	ldr	r3, [pc, #40]	@ (8004b84 <std+0x54>)
 8004b5a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b88 <std+0x58>)
 8004b5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b60:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <std+0x5c>)
 8004b62:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b64:	4b0a      	ldr	r3, [pc, #40]	@ (8004b90 <std+0x60>)
 8004b66:	429c      	cmp	r4, r3
 8004b68:	d005      	beq.n	8004b76 <std+0x46>
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <std+0x64>)
 8004b6c:	429c      	cmp	r4, r3
 8004b6e:	d002      	beq.n	8004b76 <std+0x46>
 8004b70:	4b09      	ldr	r3, [pc, #36]	@ (8004b98 <std+0x68>)
 8004b72:	429c      	cmp	r4, r3
 8004b74:	d103      	bne.n	8004b7e <std+0x4e>
 8004b76:	0020      	movs	r0, r4
 8004b78:	3058      	adds	r0, #88	@ 0x58
 8004b7a:	f000 fa1d 	bl	8004fb8 <__retarget_lock_init_recursive>
 8004b7e:	bd10      	pop	{r4, pc}
 8004b80:	08004d61 	.word	0x08004d61
 8004b84:	08004d89 	.word	0x08004d89
 8004b88:	08004dc1 	.word	0x08004dc1
 8004b8c:	08004ded 	.word	0x08004ded
 8004b90:	200004a4 	.word	0x200004a4
 8004b94:	2000050c 	.word	0x2000050c
 8004b98:	20000574 	.word	0x20000574

08004b9c <stdio_exit_handler>:
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	4a03      	ldr	r2, [pc, #12]	@ (8004bac <stdio_exit_handler+0x10>)
 8004ba0:	4903      	ldr	r1, [pc, #12]	@ (8004bb0 <stdio_exit_handler+0x14>)
 8004ba2:	4804      	ldr	r0, [pc, #16]	@ (8004bb4 <stdio_exit_handler+0x18>)
 8004ba4:	f000 f86c 	bl	8004c80 <_fwalk_sglue>
 8004ba8:	bd10      	pop	{r4, pc}
 8004baa:	46c0      	nop			@ (mov r8, r8)
 8004bac:	2000000c 	.word	0x2000000c
 8004bb0:	080058dd 	.word	0x080058dd
 8004bb4:	2000001c 	.word	0x2000001c

08004bb8 <cleanup_stdio>:
 8004bb8:	6841      	ldr	r1, [r0, #4]
 8004bba:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <cleanup_stdio+0x30>)
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	0004      	movs	r4, r0
 8004bc0:	4299      	cmp	r1, r3
 8004bc2:	d001      	beq.n	8004bc8 <cleanup_stdio+0x10>
 8004bc4:	f000 fe8a 	bl	80058dc <_fflush_r>
 8004bc8:	68a1      	ldr	r1, [r4, #8]
 8004bca:	4b08      	ldr	r3, [pc, #32]	@ (8004bec <cleanup_stdio+0x34>)
 8004bcc:	4299      	cmp	r1, r3
 8004bce:	d002      	beq.n	8004bd6 <cleanup_stdio+0x1e>
 8004bd0:	0020      	movs	r0, r4
 8004bd2:	f000 fe83 	bl	80058dc <_fflush_r>
 8004bd6:	68e1      	ldr	r1, [r4, #12]
 8004bd8:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <cleanup_stdio+0x38>)
 8004bda:	4299      	cmp	r1, r3
 8004bdc:	d002      	beq.n	8004be4 <cleanup_stdio+0x2c>
 8004bde:	0020      	movs	r0, r4
 8004be0:	f000 fe7c 	bl	80058dc <_fflush_r>
 8004be4:	bd10      	pop	{r4, pc}
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	200004a4 	.word	0x200004a4
 8004bec:	2000050c 	.word	0x2000050c
 8004bf0:	20000574 	.word	0x20000574

08004bf4 <global_stdio_init.part.0>:
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <global_stdio_init.part.0+0x28>)
 8004bf8:	4a09      	ldr	r2, [pc, #36]	@ (8004c20 <global_stdio_init.part.0+0x2c>)
 8004bfa:	2104      	movs	r1, #4
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	4809      	ldr	r0, [pc, #36]	@ (8004c24 <global_stdio_init.part.0+0x30>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	f7ff ff95 	bl	8004b30 <std>
 8004c06:	2201      	movs	r2, #1
 8004c08:	2109      	movs	r1, #9
 8004c0a:	4807      	ldr	r0, [pc, #28]	@ (8004c28 <global_stdio_init.part.0+0x34>)
 8004c0c:	f7ff ff90 	bl	8004b30 <std>
 8004c10:	2202      	movs	r2, #2
 8004c12:	2112      	movs	r1, #18
 8004c14:	4805      	ldr	r0, [pc, #20]	@ (8004c2c <global_stdio_init.part.0+0x38>)
 8004c16:	f7ff ff8b 	bl	8004b30 <std>
 8004c1a:	bd10      	pop	{r4, pc}
 8004c1c:	200005dc 	.word	0x200005dc
 8004c20:	08004b9d 	.word	0x08004b9d
 8004c24:	200004a4 	.word	0x200004a4
 8004c28:	2000050c 	.word	0x2000050c
 8004c2c:	20000574 	.word	0x20000574

08004c30 <__sfp_lock_acquire>:
 8004c30:	b510      	push	{r4, lr}
 8004c32:	4802      	ldr	r0, [pc, #8]	@ (8004c3c <__sfp_lock_acquire+0xc>)
 8004c34:	f000 f9c1 	bl	8004fba <__retarget_lock_acquire_recursive>
 8004c38:	bd10      	pop	{r4, pc}
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	200005e5 	.word	0x200005e5

08004c40 <__sfp_lock_release>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	4802      	ldr	r0, [pc, #8]	@ (8004c4c <__sfp_lock_release+0xc>)
 8004c44:	f000 f9ba 	bl	8004fbc <__retarget_lock_release_recursive>
 8004c48:	bd10      	pop	{r4, pc}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	200005e5 	.word	0x200005e5

08004c50 <__sinit>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	0004      	movs	r4, r0
 8004c54:	f7ff ffec 	bl	8004c30 <__sfp_lock_acquire>
 8004c58:	6a23      	ldr	r3, [r4, #32]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <__sinit+0x14>
 8004c5e:	f7ff ffef 	bl	8004c40 <__sfp_lock_release>
 8004c62:	bd10      	pop	{r4, pc}
 8004c64:	4b04      	ldr	r3, [pc, #16]	@ (8004c78 <__sinit+0x28>)
 8004c66:	6223      	str	r3, [r4, #32]
 8004c68:	4b04      	ldr	r3, [pc, #16]	@ (8004c7c <__sinit+0x2c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f6      	bne.n	8004c5e <__sinit+0xe>
 8004c70:	f7ff ffc0 	bl	8004bf4 <global_stdio_init.part.0>
 8004c74:	e7f3      	b.n	8004c5e <__sinit+0xe>
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	08004bb9 	.word	0x08004bb9
 8004c7c:	200005dc 	.word	0x200005dc

08004c80 <_fwalk_sglue>:
 8004c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c82:	0014      	movs	r4, r2
 8004c84:	2600      	movs	r6, #0
 8004c86:	9000      	str	r0, [sp, #0]
 8004c88:	9101      	str	r1, [sp, #4]
 8004c8a:	68a5      	ldr	r5, [r4, #8]
 8004c8c:	6867      	ldr	r7, [r4, #4]
 8004c8e:	3f01      	subs	r7, #1
 8004c90:	d504      	bpl.n	8004c9c <_fwalk_sglue+0x1c>
 8004c92:	6824      	ldr	r4, [r4, #0]
 8004c94:	2c00      	cmp	r4, #0
 8004c96:	d1f8      	bne.n	8004c8a <_fwalk_sglue+0xa>
 8004c98:	0030      	movs	r0, r6
 8004c9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c9c:	89ab      	ldrh	r3, [r5, #12]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d908      	bls.n	8004cb4 <_fwalk_sglue+0x34>
 8004ca2:	220e      	movs	r2, #14
 8004ca4:	5eab      	ldrsh	r3, [r5, r2]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	d004      	beq.n	8004cb4 <_fwalk_sglue+0x34>
 8004caa:	0029      	movs	r1, r5
 8004cac:	9800      	ldr	r0, [sp, #0]
 8004cae:	9b01      	ldr	r3, [sp, #4]
 8004cb0:	4798      	blx	r3
 8004cb2:	4306      	orrs	r6, r0
 8004cb4:	3568      	adds	r5, #104	@ 0x68
 8004cb6:	e7ea      	b.n	8004c8e <_fwalk_sglue+0xe>

08004cb8 <sniprintf>:
 8004cb8:	b40c      	push	{r2, r3}
 8004cba:	b530      	push	{r4, r5, lr}
 8004cbc:	4b17      	ldr	r3, [pc, #92]	@ (8004d1c <sniprintf+0x64>)
 8004cbe:	000c      	movs	r4, r1
 8004cc0:	681d      	ldr	r5, [r3, #0]
 8004cc2:	b09d      	sub	sp, #116	@ 0x74
 8004cc4:	2900      	cmp	r1, #0
 8004cc6:	da08      	bge.n	8004cda <sniprintf+0x22>
 8004cc8:	238b      	movs	r3, #139	@ 0x8b
 8004cca:	2001      	movs	r0, #1
 8004ccc:	602b      	str	r3, [r5, #0]
 8004cce:	4240      	negs	r0, r0
 8004cd0:	b01d      	add	sp, #116	@ 0x74
 8004cd2:	bc30      	pop	{r4, r5}
 8004cd4:	bc08      	pop	{r3}
 8004cd6:	b002      	add	sp, #8
 8004cd8:	4718      	bx	r3
 8004cda:	2382      	movs	r3, #130	@ 0x82
 8004cdc:	466a      	mov	r2, sp
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	8293      	strh	r3, [r2, #20]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9002      	str	r0, [sp, #8]
 8004ce6:	9006      	str	r0, [sp, #24]
 8004ce8:	4299      	cmp	r1, r3
 8004cea:	d000      	beq.n	8004cee <sniprintf+0x36>
 8004cec:	1e4b      	subs	r3, r1, #1
 8004cee:	9304      	str	r3, [sp, #16]
 8004cf0:	9307      	str	r3, [sp, #28]
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	466a      	mov	r2, sp
 8004cf6:	425b      	negs	r3, r3
 8004cf8:	82d3      	strh	r3, [r2, #22]
 8004cfa:	0028      	movs	r0, r5
 8004cfc:	ab21      	add	r3, sp, #132	@ 0x84
 8004cfe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d00:	a902      	add	r1, sp, #8
 8004d02:	9301      	str	r3, [sp, #4]
 8004d04:	f000 fae8 	bl	80052d8 <_svfiprintf_r>
 8004d08:	1c43      	adds	r3, r0, #1
 8004d0a:	da01      	bge.n	8004d10 <sniprintf+0x58>
 8004d0c:	238b      	movs	r3, #139	@ 0x8b
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	2c00      	cmp	r4, #0
 8004d12:	d0dd      	beq.n	8004cd0 <sniprintf+0x18>
 8004d14:	2200      	movs	r2, #0
 8004d16:	9b02      	ldr	r3, [sp, #8]
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	e7d9      	b.n	8004cd0 <sniprintf+0x18>
 8004d1c:	20000018 	.word	0x20000018

08004d20 <siprintf>:
 8004d20:	b40e      	push	{r1, r2, r3}
 8004d22:	b500      	push	{lr}
 8004d24:	490b      	ldr	r1, [pc, #44]	@ (8004d54 <siprintf+0x34>)
 8004d26:	b09c      	sub	sp, #112	@ 0x70
 8004d28:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d2a:	9002      	str	r0, [sp, #8]
 8004d2c:	9006      	str	r0, [sp, #24]
 8004d2e:	9107      	str	r1, [sp, #28]
 8004d30:	9104      	str	r1, [sp, #16]
 8004d32:	4809      	ldr	r0, [pc, #36]	@ (8004d58 <siprintf+0x38>)
 8004d34:	4909      	ldr	r1, [pc, #36]	@ (8004d5c <siprintf+0x3c>)
 8004d36:	cb04      	ldmia	r3!, {r2}
 8004d38:	9105      	str	r1, [sp, #20]
 8004d3a:	6800      	ldr	r0, [r0, #0]
 8004d3c:	a902      	add	r1, sp, #8
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	f000 faca 	bl	80052d8 <_svfiprintf_r>
 8004d44:	2200      	movs	r2, #0
 8004d46:	9b02      	ldr	r3, [sp, #8]
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	b01c      	add	sp, #112	@ 0x70
 8004d4c:	bc08      	pop	{r3}
 8004d4e:	b003      	add	sp, #12
 8004d50:	4718      	bx	r3
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	7fffffff 	.word	0x7fffffff
 8004d58:	20000018 	.word	0x20000018
 8004d5c:	ffff0208 	.word	0xffff0208

08004d60 <__sread>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	000c      	movs	r4, r1
 8004d64:	250e      	movs	r5, #14
 8004d66:	5f49      	ldrsh	r1, [r1, r5]
 8004d68:	f000 f8d4 	bl	8004f14 <_read_r>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	db03      	blt.n	8004d78 <__sread+0x18>
 8004d70:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004d72:	181b      	adds	r3, r3, r0
 8004d74:	6563      	str	r3, [r4, #84]	@ 0x54
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	89a3      	ldrh	r3, [r4, #12]
 8004d7a:	4a02      	ldr	r2, [pc, #8]	@ (8004d84 <__sread+0x24>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	e7f9      	b.n	8004d76 <__sread+0x16>
 8004d82:	46c0      	nop			@ (mov r8, r8)
 8004d84:	ffffefff 	.word	0xffffefff

08004d88 <__swrite>:
 8004d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8a:	001f      	movs	r7, r3
 8004d8c:	898b      	ldrh	r3, [r1, #12]
 8004d8e:	0005      	movs	r5, r0
 8004d90:	000c      	movs	r4, r1
 8004d92:	0016      	movs	r6, r2
 8004d94:	05db      	lsls	r3, r3, #23
 8004d96:	d505      	bpl.n	8004da4 <__swrite+0x1c>
 8004d98:	230e      	movs	r3, #14
 8004d9a:	5ec9      	ldrsh	r1, [r1, r3]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2302      	movs	r3, #2
 8004da0:	f000 f8a4 	bl	8004eec <_lseek_r>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	4a05      	ldr	r2, [pc, #20]	@ (8004dbc <__swrite+0x34>)
 8004da8:	0028      	movs	r0, r5
 8004daa:	4013      	ands	r3, r2
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	0032      	movs	r2, r6
 8004db0:	230e      	movs	r3, #14
 8004db2:	5ee1      	ldrsh	r1, [r4, r3]
 8004db4:	003b      	movs	r3, r7
 8004db6:	f000 f8c1 	bl	8004f3c <_write_r>
 8004dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dbc:	ffffefff 	.word	0xffffefff

08004dc0 <__sseek>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	000c      	movs	r4, r1
 8004dc4:	250e      	movs	r5, #14
 8004dc6:	5f49      	ldrsh	r1, [r1, r5]
 8004dc8:	f000 f890 	bl	8004eec <_lseek_r>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	1c42      	adds	r2, r0, #1
 8004dd0:	d103      	bne.n	8004dda <__sseek+0x1a>
 8004dd2:	4a05      	ldr	r2, [pc, #20]	@ (8004de8 <__sseek+0x28>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	bd70      	pop	{r4, r5, r6, pc}
 8004dda:	2280      	movs	r2, #128	@ 0x80
 8004ddc:	0152      	lsls	r2, r2, #5
 8004dde:	4313      	orrs	r3, r2
 8004de0:	81a3      	strh	r3, [r4, #12]
 8004de2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004de4:	e7f8      	b.n	8004dd8 <__sseek+0x18>
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	ffffefff 	.word	0xffffefff

08004dec <__sclose>:
 8004dec:	b510      	push	{r4, lr}
 8004dee:	230e      	movs	r3, #14
 8004df0:	5ec9      	ldrsh	r1, [r1, r3]
 8004df2:	f000 f869 	bl	8004ec8 <_close_r>
 8004df6:	bd10      	pop	{r4, pc}

08004df8 <memset>:
 8004df8:	0003      	movs	r3, r0
 8004dfa:	1882      	adds	r2, r0, r2
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d100      	bne.n	8004e02 <memset+0xa>
 8004e00:	4770      	bx	lr
 8004e02:	7019      	strb	r1, [r3, #0]
 8004e04:	3301      	adds	r3, #1
 8004e06:	e7f9      	b.n	8004dfc <memset+0x4>

08004e08 <strtok>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	4b16      	ldr	r3, [pc, #88]	@ (8004e64 <strtok+0x5c>)
 8004e0c:	0005      	movs	r5, r0
 8004e0e:	681f      	ldr	r7, [r3, #0]
 8004e10:	000e      	movs	r6, r1
 8004e12:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004e14:	2c00      	cmp	r4, #0
 8004e16:	d11d      	bne.n	8004e54 <strtok+0x4c>
 8004e18:	2050      	movs	r0, #80	@ 0x50
 8004e1a:	f000 f941 	bl	80050a0 <malloc>
 8004e1e:	1e02      	subs	r2, r0, #0
 8004e20:	6478      	str	r0, [r7, #68]	@ 0x44
 8004e22:	d104      	bne.n	8004e2e <strtok+0x26>
 8004e24:	215b      	movs	r1, #91	@ 0x5b
 8004e26:	4b10      	ldr	r3, [pc, #64]	@ (8004e68 <strtok+0x60>)
 8004e28:	4810      	ldr	r0, [pc, #64]	@ (8004e6c <strtok+0x64>)
 8004e2a:	f000 f8d1 	bl	8004fd0 <__assert_func>
 8004e2e:	6004      	str	r4, [r0, #0]
 8004e30:	6044      	str	r4, [r0, #4]
 8004e32:	6084      	str	r4, [r0, #8]
 8004e34:	60c4      	str	r4, [r0, #12]
 8004e36:	6104      	str	r4, [r0, #16]
 8004e38:	6144      	str	r4, [r0, #20]
 8004e3a:	6184      	str	r4, [r0, #24]
 8004e3c:	6284      	str	r4, [r0, #40]	@ 0x28
 8004e3e:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8004e40:	6304      	str	r4, [r0, #48]	@ 0x30
 8004e42:	6344      	str	r4, [r0, #52]	@ 0x34
 8004e44:	6384      	str	r4, [r0, #56]	@ 0x38
 8004e46:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8004e48:	6404      	str	r4, [r0, #64]	@ 0x40
 8004e4a:	6444      	str	r4, [r0, #68]	@ 0x44
 8004e4c:	6484      	str	r4, [r0, #72]	@ 0x48
 8004e4e:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8004e50:	7704      	strb	r4, [r0, #28]
 8004e52:	6244      	str	r4, [r0, #36]	@ 0x24
 8004e54:	0031      	movs	r1, r6
 8004e56:	0028      	movs	r0, r5
 8004e58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f000 f808 	bl	8004e70 <__strtok_r>
 8004e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	20000018 	.word	0x20000018
 8004e68:	080060a8 	.word	0x080060a8
 8004e6c:	080060bf 	.word	0x080060bf

08004e70 <__strtok_r>:
 8004e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e72:	1e04      	subs	r4, r0, #0
 8004e74:	d102      	bne.n	8004e7c <__strtok_r+0xc>
 8004e76:	6814      	ldr	r4, [r2, #0]
 8004e78:	2c00      	cmp	r4, #0
 8004e7a:	d009      	beq.n	8004e90 <__strtok_r+0x20>
 8004e7c:	0020      	movs	r0, r4
 8004e7e:	000e      	movs	r6, r1
 8004e80:	7805      	ldrb	r5, [r0, #0]
 8004e82:	3401      	adds	r4, #1
 8004e84:	7837      	ldrb	r7, [r6, #0]
 8004e86:	2f00      	cmp	r7, #0
 8004e88:	d104      	bne.n	8004e94 <__strtok_r+0x24>
 8004e8a:	2d00      	cmp	r5, #0
 8004e8c:	d10d      	bne.n	8004eaa <__strtok_r+0x3a>
 8004e8e:	6015      	str	r5, [r2, #0]
 8004e90:	2000      	movs	r0, #0
 8004e92:	e006      	b.n	8004ea2 <__strtok_r+0x32>
 8004e94:	3601      	adds	r6, #1
 8004e96:	42bd      	cmp	r5, r7
 8004e98:	d1f4      	bne.n	8004e84 <__strtok_r+0x14>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1ee      	bne.n	8004e7c <__strtok_r+0xc>
 8004e9e:	6014      	str	r4, [r2, #0]
 8004ea0:	7003      	strb	r3, [r0, #0]
 8004ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	2d00      	cmp	r5, #0
 8004ea8:	d102      	bne.n	8004eb0 <__strtok_r+0x40>
 8004eaa:	000b      	movs	r3, r1
 8004eac:	7826      	ldrb	r6, [r4, #0]
 8004eae:	3401      	adds	r4, #1
 8004eb0:	781d      	ldrb	r5, [r3, #0]
 8004eb2:	42ae      	cmp	r6, r5
 8004eb4:	d1f6      	bne.n	8004ea4 <__strtok_r+0x34>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	001d      	movs	r5, r3
 8004eba:	429e      	cmp	r6, r3
 8004ebc:	d002      	beq.n	8004ec4 <__strtok_r+0x54>
 8004ebe:	0023      	movs	r3, r4
 8004ec0:	1e61      	subs	r1, r4, #1
 8004ec2:	700d      	strb	r5, [r1, #0]
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e7ec      	b.n	8004ea2 <__strtok_r+0x32>

08004ec8 <_close_r>:
 8004ec8:	2300      	movs	r3, #0
 8004eca:	b570      	push	{r4, r5, r6, lr}
 8004ecc:	4d06      	ldr	r5, [pc, #24]	@ (8004ee8 <_close_r+0x20>)
 8004ece:	0004      	movs	r4, r0
 8004ed0:	0008      	movs	r0, r1
 8004ed2:	602b      	str	r3, [r5, #0]
 8004ed4:	f7fb ff34 	bl	8000d40 <_close>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d103      	bne.n	8004ee4 <_close_r+0x1c>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d000      	beq.n	8004ee4 <_close_r+0x1c>
 8004ee2:	6023      	str	r3, [r4, #0]
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	200005e0 	.word	0x200005e0

08004eec <_lseek_r>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	0004      	movs	r4, r0
 8004ef0:	0008      	movs	r0, r1
 8004ef2:	0011      	movs	r1, r2
 8004ef4:	001a      	movs	r2, r3
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	4d05      	ldr	r5, [pc, #20]	@ (8004f10 <_lseek_r+0x24>)
 8004efa:	602b      	str	r3, [r5, #0]
 8004efc:	f7fb ff41 	bl	8000d82 <_lseek>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d103      	bne.n	8004f0c <_lseek_r+0x20>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d000      	beq.n	8004f0c <_lseek_r+0x20>
 8004f0a:	6023      	str	r3, [r4, #0]
 8004f0c:	bd70      	pop	{r4, r5, r6, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	200005e0 	.word	0x200005e0

08004f14 <_read_r>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	0004      	movs	r4, r0
 8004f18:	0008      	movs	r0, r1
 8004f1a:	0011      	movs	r1, r2
 8004f1c:	001a      	movs	r2, r3
 8004f1e:	2300      	movs	r3, #0
 8004f20:	4d05      	ldr	r5, [pc, #20]	@ (8004f38 <_read_r+0x24>)
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	f7fb fed3 	bl	8000cce <_read>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d103      	bne.n	8004f34 <_read_r+0x20>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d000      	beq.n	8004f34 <_read_r+0x20>
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	bd70      	pop	{r4, r5, r6, pc}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	200005e0 	.word	0x200005e0

08004f3c <_write_r>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	0004      	movs	r4, r0
 8004f40:	0008      	movs	r0, r1
 8004f42:	0011      	movs	r1, r2
 8004f44:	001a      	movs	r2, r3
 8004f46:	2300      	movs	r3, #0
 8004f48:	4d05      	ldr	r5, [pc, #20]	@ (8004f60 <_write_r+0x24>)
 8004f4a:	602b      	str	r3, [r5, #0]
 8004f4c:	f7fb fedc 	bl	8000d08 <_write>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d103      	bne.n	8004f5c <_write_r+0x20>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d000      	beq.n	8004f5c <_write_r+0x20>
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	bd70      	pop	{r4, r5, r6, pc}
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	200005e0 	.word	0x200005e0

08004f64 <__errno>:
 8004f64:	4b01      	ldr	r3, [pc, #4]	@ (8004f6c <__errno+0x8>)
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	4770      	bx	lr
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	20000018 	.word	0x20000018

08004f70 <__libc_init_array>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	2600      	movs	r6, #0
 8004f74:	4c0c      	ldr	r4, [pc, #48]	@ (8004fa8 <__libc_init_array+0x38>)
 8004f76:	4d0d      	ldr	r5, [pc, #52]	@ (8004fac <__libc_init_array+0x3c>)
 8004f78:	1b64      	subs	r4, r4, r5
 8004f7a:	10a4      	asrs	r4, r4, #2
 8004f7c:	42a6      	cmp	r6, r4
 8004f7e:	d109      	bne.n	8004f94 <__libc_init_array+0x24>
 8004f80:	2600      	movs	r6, #0
 8004f82:	f001 f813 	bl	8005fac <_init>
 8004f86:	4c0a      	ldr	r4, [pc, #40]	@ (8004fb0 <__libc_init_array+0x40>)
 8004f88:	4d0a      	ldr	r5, [pc, #40]	@ (8004fb4 <__libc_init_array+0x44>)
 8004f8a:	1b64      	subs	r4, r4, r5
 8004f8c:	10a4      	asrs	r4, r4, #2
 8004f8e:	42a6      	cmp	r6, r4
 8004f90:	d105      	bne.n	8004f9e <__libc_init_array+0x2e>
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
 8004f94:	00b3      	lsls	r3, r6, #2
 8004f96:	58eb      	ldr	r3, [r5, r3]
 8004f98:	4798      	blx	r3
 8004f9a:	3601      	adds	r6, #1
 8004f9c:	e7ee      	b.n	8004f7c <__libc_init_array+0xc>
 8004f9e:	00b3      	lsls	r3, r6, #2
 8004fa0:	58eb      	ldr	r3, [r5, r3]
 8004fa2:	4798      	blx	r3
 8004fa4:	3601      	adds	r6, #1
 8004fa6:	e7f2      	b.n	8004f8e <__libc_init_array+0x1e>
 8004fa8:	08006188 	.word	0x08006188
 8004fac:	08006188 	.word	0x08006188
 8004fb0:	0800618c 	.word	0x0800618c
 8004fb4:	08006188 	.word	0x08006188

08004fb8 <__retarget_lock_init_recursive>:
 8004fb8:	4770      	bx	lr

08004fba <__retarget_lock_acquire_recursive>:
 8004fba:	4770      	bx	lr

08004fbc <__retarget_lock_release_recursive>:
 8004fbc:	4770      	bx	lr

08004fbe <memcpy>:
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d100      	bne.n	8004fc8 <memcpy+0xa>
 8004fc6:	bd10      	pop	{r4, pc}
 8004fc8:	5ccc      	ldrb	r4, [r1, r3]
 8004fca:	54c4      	strb	r4, [r0, r3]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	e7f8      	b.n	8004fc2 <memcpy+0x4>

08004fd0 <__assert_func>:
 8004fd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004fd2:	0014      	movs	r4, r2
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <__assert_func+0x2c>)
 8004fd8:	0005      	movs	r5, r0
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	000e      	movs	r6, r1
 8004fde:	68d8      	ldr	r0, [r3, #12]
 8004fe0:	4b07      	ldr	r3, [pc, #28]	@ (8005000 <__assert_func+0x30>)
 8004fe2:	2c00      	cmp	r4, #0
 8004fe4:	d101      	bne.n	8004fea <__assert_func+0x1a>
 8004fe6:	4b07      	ldr	r3, [pc, #28]	@ (8005004 <__assert_func+0x34>)
 8004fe8:	001c      	movs	r4, r3
 8004fea:	4907      	ldr	r1, [pc, #28]	@ (8005008 <__assert_func+0x38>)
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	9402      	str	r4, [sp, #8]
 8004ff0:	002b      	movs	r3, r5
 8004ff2:	9600      	str	r6, [sp, #0]
 8004ff4:	f000 fc9e 	bl	8005934 <fiprintf>
 8004ff8:	f000 fcdd 	bl	80059b6 <abort>
 8004ffc:	20000018 	.word	0x20000018
 8005000:	08006119 	.word	0x08006119
 8005004:	08006154 	.word	0x08006154
 8005008:	08006126 	.word	0x08006126

0800500c <_free_r>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	0005      	movs	r5, r0
 8005010:	1e0c      	subs	r4, r1, #0
 8005012:	d010      	beq.n	8005036 <_free_r+0x2a>
 8005014:	3c04      	subs	r4, #4
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	da00      	bge.n	800501e <_free_r+0x12>
 800501c:	18e4      	adds	r4, r4, r3
 800501e:	0028      	movs	r0, r5
 8005020:	f000 f8ea 	bl	80051f8 <__malloc_lock>
 8005024:	4a1d      	ldr	r2, [pc, #116]	@ (800509c <_free_r+0x90>)
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <_free_r+0x2c>
 800502c:	6063      	str	r3, [r4, #4]
 800502e:	6014      	str	r4, [r2, #0]
 8005030:	0028      	movs	r0, r5
 8005032:	f000 f8e9 	bl	8005208 <__malloc_unlock>
 8005036:	bd70      	pop	{r4, r5, r6, pc}
 8005038:	42a3      	cmp	r3, r4
 800503a:	d908      	bls.n	800504e <_free_r+0x42>
 800503c:	6820      	ldr	r0, [r4, #0]
 800503e:	1821      	adds	r1, r4, r0
 8005040:	428b      	cmp	r3, r1
 8005042:	d1f3      	bne.n	800502c <_free_r+0x20>
 8005044:	6819      	ldr	r1, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	1809      	adds	r1, r1, r0
 800504a:	6021      	str	r1, [r4, #0]
 800504c:	e7ee      	b.n	800502c <_free_r+0x20>
 800504e:	001a      	movs	r2, r3
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <_free_r+0x4e>
 8005056:	42a3      	cmp	r3, r4
 8005058:	d9f9      	bls.n	800504e <_free_r+0x42>
 800505a:	6811      	ldr	r1, [r2, #0]
 800505c:	1850      	adds	r0, r2, r1
 800505e:	42a0      	cmp	r0, r4
 8005060:	d10b      	bne.n	800507a <_free_r+0x6e>
 8005062:	6820      	ldr	r0, [r4, #0]
 8005064:	1809      	adds	r1, r1, r0
 8005066:	1850      	adds	r0, r2, r1
 8005068:	6011      	str	r1, [r2, #0]
 800506a:	4283      	cmp	r3, r0
 800506c:	d1e0      	bne.n	8005030 <_free_r+0x24>
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	1841      	adds	r1, r0, r1
 8005074:	6011      	str	r1, [r2, #0]
 8005076:	6053      	str	r3, [r2, #4]
 8005078:	e7da      	b.n	8005030 <_free_r+0x24>
 800507a:	42a0      	cmp	r0, r4
 800507c:	d902      	bls.n	8005084 <_free_r+0x78>
 800507e:	230c      	movs	r3, #12
 8005080:	602b      	str	r3, [r5, #0]
 8005082:	e7d5      	b.n	8005030 <_free_r+0x24>
 8005084:	6820      	ldr	r0, [r4, #0]
 8005086:	1821      	adds	r1, r4, r0
 8005088:	428b      	cmp	r3, r1
 800508a:	d103      	bne.n	8005094 <_free_r+0x88>
 800508c:	6819      	ldr	r1, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	1809      	adds	r1, r1, r0
 8005092:	6021      	str	r1, [r4, #0]
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	6054      	str	r4, [r2, #4]
 8005098:	e7ca      	b.n	8005030 <_free_r+0x24>
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	200005ec 	.word	0x200005ec

080050a0 <malloc>:
 80050a0:	b510      	push	{r4, lr}
 80050a2:	4b03      	ldr	r3, [pc, #12]	@ (80050b0 <malloc+0x10>)
 80050a4:	0001      	movs	r1, r0
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	f000 f826 	bl	80050f8 <_malloc_r>
 80050ac:	bd10      	pop	{r4, pc}
 80050ae:	46c0      	nop			@ (mov r8, r8)
 80050b0:	20000018 	.word	0x20000018

080050b4 <sbrk_aligned>:
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	4e0f      	ldr	r6, [pc, #60]	@ (80050f4 <sbrk_aligned+0x40>)
 80050b8:	000d      	movs	r5, r1
 80050ba:	6831      	ldr	r1, [r6, #0]
 80050bc:	0004      	movs	r4, r0
 80050be:	2900      	cmp	r1, #0
 80050c0:	d102      	bne.n	80050c8 <sbrk_aligned+0x14>
 80050c2:	f000 fc5b 	bl	800597c <_sbrk_r>
 80050c6:	6030      	str	r0, [r6, #0]
 80050c8:	0029      	movs	r1, r5
 80050ca:	0020      	movs	r0, r4
 80050cc:	f000 fc56 	bl	800597c <_sbrk_r>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	d103      	bne.n	80050dc <sbrk_aligned+0x28>
 80050d4:	2501      	movs	r5, #1
 80050d6:	426d      	negs	r5, r5
 80050d8:	0028      	movs	r0, r5
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	2303      	movs	r3, #3
 80050de:	1cc5      	adds	r5, r0, #3
 80050e0:	439d      	bics	r5, r3
 80050e2:	42a8      	cmp	r0, r5
 80050e4:	d0f8      	beq.n	80050d8 <sbrk_aligned+0x24>
 80050e6:	1a29      	subs	r1, r5, r0
 80050e8:	0020      	movs	r0, r4
 80050ea:	f000 fc47 	bl	800597c <_sbrk_r>
 80050ee:	3001      	adds	r0, #1
 80050f0:	d1f2      	bne.n	80050d8 <sbrk_aligned+0x24>
 80050f2:	e7ef      	b.n	80050d4 <sbrk_aligned+0x20>
 80050f4:	200005e8 	.word	0x200005e8

080050f8 <_malloc_r>:
 80050f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050fa:	2203      	movs	r2, #3
 80050fc:	1ccb      	adds	r3, r1, #3
 80050fe:	4393      	bics	r3, r2
 8005100:	3308      	adds	r3, #8
 8005102:	0005      	movs	r5, r0
 8005104:	001f      	movs	r7, r3
 8005106:	2b0c      	cmp	r3, #12
 8005108:	d234      	bcs.n	8005174 <_malloc_r+0x7c>
 800510a:	270c      	movs	r7, #12
 800510c:	42b9      	cmp	r1, r7
 800510e:	d833      	bhi.n	8005178 <_malloc_r+0x80>
 8005110:	0028      	movs	r0, r5
 8005112:	f000 f871 	bl	80051f8 <__malloc_lock>
 8005116:	4e37      	ldr	r6, [pc, #220]	@ (80051f4 <_malloc_r+0xfc>)
 8005118:	6833      	ldr	r3, [r6, #0]
 800511a:	001c      	movs	r4, r3
 800511c:	2c00      	cmp	r4, #0
 800511e:	d12f      	bne.n	8005180 <_malloc_r+0x88>
 8005120:	0039      	movs	r1, r7
 8005122:	0028      	movs	r0, r5
 8005124:	f7ff ffc6 	bl	80050b4 <sbrk_aligned>
 8005128:	0004      	movs	r4, r0
 800512a:	1c43      	adds	r3, r0, #1
 800512c:	d15f      	bne.n	80051ee <_malloc_r+0xf6>
 800512e:	6834      	ldr	r4, [r6, #0]
 8005130:	9400      	str	r4, [sp, #0]
 8005132:	9b00      	ldr	r3, [sp, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d14a      	bne.n	80051ce <_malloc_r+0xd6>
 8005138:	2c00      	cmp	r4, #0
 800513a:	d052      	beq.n	80051e2 <_malloc_r+0xea>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	0028      	movs	r0, r5
 8005140:	18e3      	adds	r3, r4, r3
 8005142:	9900      	ldr	r1, [sp, #0]
 8005144:	9301      	str	r3, [sp, #4]
 8005146:	f000 fc19 	bl	800597c <_sbrk_r>
 800514a:	9b01      	ldr	r3, [sp, #4]
 800514c:	4283      	cmp	r3, r0
 800514e:	d148      	bne.n	80051e2 <_malloc_r+0xea>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	0028      	movs	r0, r5
 8005154:	1aff      	subs	r7, r7, r3
 8005156:	0039      	movs	r1, r7
 8005158:	f7ff ffac 	bl	80050b4 <sbrk_aligned>
 800515c:	3001      	adds	r0, #1
 800515e:	d040      	beq.n	80051e2 <_malloc_r+0xea>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	19db      	adds	r3, r3, r7
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	6833      	ldr	r3, [r6, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	2a00      	cmp	r2, #0
 800516c:	d133      	bne.n	80051d6 <_malloc_r+0xde>
 800516e:	9b00      	ldr	r3, [sp, #0]
 8005170:	6033      	str	r3, [r6, #0]
 8005172:	e019      	b.n	80051a8 <_malloc_r+0xb0>
 8005174:	2b00      	cmp	r3, #0
 8005176:	dac9      	bge.n	800510c <_malloc_r+0x14>
 8005178:	230c      	movs	r3, #12
 800517a:	602b      	str	r3, [r5, #0]
 800517c:	2000      	movs	r0, #0
 800517e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005180:	6821      	ldr	r1, [r4, #0]
 8005182:	1bc9      	subs	r1, r1, r7
 8005184:	d420      	bmi.n	80051c8 <_malloc_r+0xd0>
 8005186:	290b      	cmp	r1, #11
 8005188:	d90a      	bls.n	80051a0 <_malloc_r+0xa8>
 800518a:	19e2      	adds	r2, r4, r7
 800518c:	6027      	str	r7, [r4, #0]
 800518e:	42a3      	cmp	r3, r4
 8005190:	d104      	bne.n	800519c <_malloc_r+0xa4>
 8005192:	6032      	str	r2, [r6, #0]
 8005194:	6863      	ldr	r3, [r4, #4]
 8005196:	6011      	str	r1, [r2, #0]
 8005198:	6053      	str	r3, [r2, #4]
 800519a:	e005      	b.n	80051a8 <_malloc_r+0xb0>
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	e7f9      	b.n	8005194 <_malloc_r+0x9c>
 80051a0:	6862      	ldr	r2, [r4, #4]
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	d10e      	bne.n	80051c4 <_malloc_r+0xcc>
 80051a6:	6032      	str	r2, [r6, #0]
 80051a8:	0028      	movs	r0, r5
 80051aa:	f000 f82d 	bl	8005208 <__malloc_unlock>
 80051ae:	0020      	movs	r0, r4
 80051b0:	2207      	movs	r2, #7
 80051b2:	300b      	adds	r0, #11
 80051b4:	1d23      	adds	r3, r4, #4
 80051b6:	4390      	bics	r0, r2
 80051b8:	1ac2      	subs	r2, r0, r3
 80051ba:	4298      	cmp	r0, r3
 80051bc:	d0df      	beq.n	800517e <_malloc_r+0x86>
 80051be:	1a1b      	subs	r3, r3, r0
 80051c0:	50a3      	str	r3, [r4, r2]
 80051c2:	e7dc      	b.n	800517e <_malloc_r+0x86>
 80051c4:	605a      	str	r2, [r3, #4]
 80051c6:	e7ef      	b.n	80051a8 <_malloc_r+0xb0>
 80051c8:	0023      	movs	r3, r4
 80051ca:	6864      	ldr	r4, [r4, #4]
 80051cc:	e7a6      	b.n	800511c <_malloc_r+0x24>
 80051ce:	9c00      	ldr	r4, [sp, #0]
 80051d0:	6863      	ldr	r3, [r4, #4]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	e7ad      	b.n	8005132 <_malloc_r+0x3a>
 80051d6:	001a      	movs	r2, r3
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	42a3      	cmp	r3, r4
 80051dc:	d1fb      	bne.n	80051d6 <_malloc_r+0xde>
 80051de:	2300      	movs	r3, #0
 80051e0:	e7da      	b.n	8005198 <_malloc_r+0xa0>
 80051e2:	230c      	movs	r3, #12
 80051e4:	0028      	movs	r0, r5
 80051e6:	602b      	str	r3, [r5, #0]
 80051e8:	f000 f80e 	bl	8005208 <__malloc_unlock>
 80051ec:	e7c6      	b.n	800517c <_malloc_r+0x84>
 80051ee:	6007      	str	r7, [r0, #0]
 80051f0:	e7da      	b.n	80051a8 <_malloc_r+0xb0>
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	200005ec 	.word	0x200005ec

080051f8 <__malloc_lock>:
 80051f8:	b510      	push	{r4, lr}
 80051fa:	4802      	ldr	r0, [pc, #8]	@ (8005204 <__malloc_lock+0xc>)
 80051fc:	f7ff fedd 	bl	8004fba <__retarget_lock_acquire_recursive>
 8005200:	bd10      	pop	{r4, pc}
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	200005e4 	.word	0x200005e4

08005208 <__malloc_unlock>:
 8005208:	b510      	push	{r4, lr}
 800520a:	4802      	ldr	r0, [pc, #8]	@ (8005214 <__malloc_unlock+0xc>)
 800520c:	f7ff fed6 	bl	8004fbc <__retarget_lock_release_recursive>
 8005210:	bd10      	pop	{r4, pc}
 8005212:	46c0      	nop			@ (mov r8, r8)
 8005214:	200005e4 	.word	0x200005e4

08005218 <__ssputs_r>:
 8005218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800521a:	688e      	ldr	r6, [r1, #8]
 800521c:	b085      	sub	sp, #20
 800521e:	001f      	movs	r7, r3
 8005220:	000c      	movs	r4, r1
 8005222:	680b      	ldr	r3, [r1, #0]
 8005224:	9002      	str	r0, [sp, #8]
 8005226:	9203      	str	r2, [sp, #12]
 8005228:	42be      	cmp	r6, r7
 800522a:	d830      	bhi.n	800528e <__ssputs_r+0x76>
 800522c:	210c      	movs	r1, #12
 800522e:	5e62      	ldrsh	r2, [r4, r1]
 8005230:	2190      	movs	r1, #144	@ 0x90
 8005232:	00c9      	lsls	r1, r1, #3
 8005234:	420a      	tst	r2, r1
 8005236:	d028      	beq.n	800528a <__ssputs_r+0x72>
 8005238:	2003      	movs	r0, #3
 800523a:	6921      	ldr	r1, [r4, #16]
 800523c:	1a5b      	subs	r3, r3, r1
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	6963      	ldr	r3, [r4, #20]
 8005242:	4343      	muls	r3, r0
 8005244:	9801      	ldr	r0, [sp, #4]
 8005246:	0fdd      	lsrs	r5, r3, #31
 8005248:	18ed      	adds	r5, r5, r3
 800524a:	1c7b      	adds	r3, r7, #1
 800524c:	181b      	adds	r3, r3, r0
 800524e:	106d      	asrs	r5, r5, #1
 8005250:	42ab      	cmp	r3, r5
 8005252:	d900      	bls.n	8005256 <__ssputs_r+0x3e>
 8005254:	001d      	movs	r5, r3
 8005256:	0552      	lsls	r2, r2, #21
 8005258:	d528      	bpl.n	80052ac <__ssputs_r+0x94>
 800525a:	0029      	movs	r1, r5
 800525c:	9802      	ldr	r0, [sp, #8]
 800525e:	f7ff ff4b 	bl	80050f8 <_malloc_r>
 8005262:	1e06      	subs	r6, r0, #0
 8005264:	d02c      	beq.n	80052c0 <__ssputs_r+0xa8>
 8005266:	9a01      	ldr	r2, [sp, #4]
 8005268:	6921      	ldr	r1, [r4, #16]
 800526a:	f7ff fea8 	bl	8004fbe <memcpy>
 800526e:	89a2      	ldrh	r2, [r4, #12]
 8005270:	4b18      	ldr	r3, [pc, #96]	@ (80052d4 <__ssputs_r+0xbc>)
 8005272:	401a      	ands	r2, r3
 8005274:	2380      	movs	r3, #128	@ 0x80
 8005276:	4313      	orrs	r3, r2
 8005278:	81a3      	strh	r3, [r4, #12]
 800527a:	9b01      	ldr	r3, [sp, #4]
 800527c:	6126      	str	r6, [r4, #16]
 800527e:	18f6      	adds	r6, r6, r3
 8005280:	6026      	str	r6, [r4, #0]
 8005282:	003e      	movs	r6, r7
 8005284:	6165      	str	r5, [r4, #20]
 8005286:	1aed      	subs	r5, r5, r3
 8005288:	60a5      	str	r5, [r4, #8]
 800528a:	42be      	cmp	r6, r7
 800528c:	d900      	bls.n	8005290 <__ssputs_r+0x78>
 800528e:	003e      	movs	r6, r7
 8005290:	0032      	movs	r2, r6
 8005292:	9903      	ldr	r1, [sp, #12]
 8005294:	6820      	ldr	r0, [r4, #0]
 8005296:	f000 fb5d 	bl	8005954 <memmove>
 800529a:	2000      	movs	r0, #0
 800529c:	68a3      	ldr	r3, [r4, #8]
 800529e:	1b9b      	subs	r3, r3, r6
 80052a0:	60a3      	str	r3, [r4, #8]
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	199b      	adds	r3, r3, r6
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	b005      	add	sp, #20
 80052aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ac:	002a      	movs	r2, r5
 80052ae:	9802      	ldr	r0, [sp, #8]
 80052b0:	f000 fb88 	bl	80059c4 <_realloc_r>
 80052b4:	1e06      	subs	r6, r0, #0
 80052b6:	d1e0      	bne.n	800527a <__ssputs_r+0x62>
 80052b8:	6921      	ldr	r1, [r4, #16]
 80052ba:	9802      	ldr	r0, [sp, #8]
 80052bc:	f7ff fea6 	bl	800500c <_free_r>
 80052c0:	230c      	movs	r3, #12
 80052c2:	2001      	movs	r0, #1
 80052c4:	9a02      	ldr	r2, [sp, #8]
 80052c6:	4240      	negs	r0, r0
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	89a2      	ldrh	r2, [r4, #12]
 80052cc:	3334      	adds	r3, #52	@ 0x34
 80052ce:	4313      	orrs	r3, r2
 80052d0:	81a3      	strh	r3, [r4, #12]
 80052d2:	e7e9      	b.n	80052a8 <__ssputs_r+0x90>
 80052d4:	fffffb7f 	.word	0xfffffb7f

080052d8 <_svfiprintf_r>:
 80052d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052da:	b0a1      	sub	sp, #132	@ 0x84
 80052dc:	9003      	str	r0, [sp, #12]
 80052de:	001d      	movs	r5, r3
 80052e0:	898b      	ldrh	r3, [r1, #12]
 80052e2:	000f      	movs	r7, r1
 80052e4:	0016      	movs	r6, r2
 80052e6:	061b      	lsls	r3, r3, #24
 80052e8:	d511      	bpl.n	800530e <_svfiprintf_r+0x36>
 80052ea:	690b      	ldr	r3, [r1, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10e      	bne.n	800530e <_svfiprintf_r+0x36>
 80052f0:	2140      	movs	r1, #64	@ 0x40
 80052f2:	f7ff ff01 	bl	80050f8 <_malloc_r>
 80052f6:	6038      	str	r0, [r7, #0]
 80052f8:	6138      	str	r0, [r7, #16]
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d105      	bne.n	800530a <_svfiprintf_r+0x32>
 80052fe:	230c      	movs	r3, #12
 8005300:	9a03      	ldr	r2, [sp, #12]
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	2001      	movs	r0, #1
 8005306:	4240      	negs	r0, r0
 8005308:	e0cf      	b.n	80054aa <_svfiprintf_r+0x1d2>
 800530a:	2340      	movs	r3, #64	@ 0x40
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	2300      	movs	r3, #0
 8005310:	ac08      	add	r4, sp, #32
 8005312:	6163      	str	r3, [r4, #20]
 8005314:	3320      	adds	r3, #32
 8005316:	7663      	strb	r3, [r4, #25]
 8005318:	3310      	adds	r3, #16
 800531a:	76a3      	strb	r3, [r4, #26]
 800531c:	9507      	str	r5, [sp, #28]
 800531e:	0035      	movs	r5, r6
 8005320:	782b      	ldrb	r3, [r5, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <_svfiprintf_r+0x52>
 8005326:	2b25      	cmp	r3, #37	@ 0x25
 8005328:	d148      	bne.n	80053bc <_svfiprintf_r+0xe4>
 800532a:	1bab      	subs	r3, r5, r6
 800532c:	9305      	str	r3, [sp, #20]
 800532e:	42b5      	cmp	r5, r6
 8005330:	d00b      	beq.n	800534a <_svfiprintf_r+0x72>
 8005332:	0032      	movs	r2, r6
 8005334:	0039      	movs	r1, r7
 8005336:	9803      	ldr	r0, [sp, #12]
 8005338:	f7ff ff6e 	bl	8005218 <__ssputs_r>
 800533c:	3001      	adds	r0, #1
 800533e:	d100      	bne.n	8005342 <_svfiprintf_r+0x6a>
 8005340:	e0ae      	b.n	80054a0 <_svfiprintf_r+0x1c8>
 8005342:	6963      	ldr	r3, [r4, #20]
 8005344:	9a05      	ldr	r2, [sp, #20]
 8005346:	189b      	adds	r3, r3, r2
 8005348:	6163      	str	r3, [r4, #20]
 800534a:	782b      	ldrb	r3, [r5, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d100      	bne.n	8005352 <_svfiprintf_r+0x7a>
 8005350:	e0a6      	b.n	80054a0 <_svfiprintf_r+0x1c8>
 8005352:	2201      	movs	r2, #1
 8005354:	2300      	movs	r3, #0
 8005356:	4252      	negs	r2, r2
 8005358:	6062      	str	r2, [r4, #4]
 800535a:	a904      	add	r1, sp, #16
 800535c:	3254      	adds	r2, #84	@ 0x54
 800535e:	1852      	adds	r2, r2, r1
 8005360:	1c6e      	adds	r6, r5, #1
 8005362:	6023      	str	r3, [r4, #0]
 8005364:	60e3      	str	r3, [r4, #12]
 8005366:	60a3      	str	r3, [r4, #8]
 8005368:	7013      	strb	r3, [r2, #0]
 800536a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800536c:	4b54      	ldr	r3, [pc, #336]	@ (80054c0 <_svfiprintf_r+0x1e8>)
 800536e:	2205      	movs	r2, #5
 8005370:	0018      	movs	r0, r3
 8005372:	7831      	ldrb	r1, [r6, #0]
 8005374:	9305      	str	r3, [sp, #20]
 8005376:	f000 fb13 	bl	80059a0 <memchr>
 800537a:	1c75      	adds	r5, r6, #1
 800537c:	2800      	cmp	r0, #0
 800537e:	d11f      	bne.n	80053c0 <_svfiprintf_r+0xe8>
 8005380:	6822      	ldr	r2, [r4, #0]
 8005382:	06d3      	lsls	r3, r2, #27
 8005384:	d504      	bpl.n	8005390 <_svfiprintf_r+0xb8>
 8005386:	2353      	movs	r3, #83	@ 0x53
 8005388:	a904      	add	r1, sp, #16
 800538a:	185b      	adds	r3, r3, r1
 800538c:	2120      	movs	r1, #32
 800538e:	7019      	strb	r1, [r3, #0]
 8005390:	0713      	lsls	r3, r2, #28
 8005392:	d504      	bpl.n	800539e <_svfiprintf_r+0xc6>
 8005394:	2353      	movs	r3, #83	@ 0x53
 8005396:	a904      	add	r1, sp, #16
 8005398:	185b      	adds	r3, r3, r1
 800539a:	212b      	movs	r1, #43	@ 0x2b
 800539c:	7019      	strb	r1, [r3, #0]
 800539e:	7833      	ldrb	r3, [r6, #0]
 80053a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a2:	d016      	beq.n	80053d2 <_svfiprintf_r+0xfa>
 80053a4:	0035      	movs	r5, r6
 80053a6:	2100      	movs	r1, #0
 80053a8:	200a      	movs	r0, #10
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	782a      	ldrb	r2, [r5, #0]
 80053ae:	1c6e      	adds	r6, r5, #1
 80053b0:	3a30      	subs	r2, #48	@ 0x30
 80053b2:	2a09      	cmp	r2, #9
 80053b4:	d950      	bls.n	8005458 <_svfiprintf_r+0x180>
 80053b6:	2900      	cmp	r1, #0
 80053b8:	d111      	bne.n	80053de <_svfiprintf_r+0x106>
 80053ba:	e017      	b.n	80053ec <_svfiprintf_r+0x114>
 80053bc:	3501      	adds	r5, #1
 80053be:	e7af      	b.n	8005320 <_svfiprintf_r+0x48>
 80053c0:	9b05      	ldr	r3, [sp, #20]
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	1ac0      	subs	r0, r0, r3
 80053c6:	2301      	movs	r3, #1
 80053c8:	4083      	lsls	r3, r0
 80053ca:	4313      	orrs	r3, r2
 80053cc:	002e      	movs	r6, r5
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	e7cc      	b.n	800536c <_svfiprintf_r+0x94>
 80053d2:	9b07      	ldr	r3, [sp, #28]
 80053d4:	1d19      	adds	r1, r3, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	9107      	str	r1, [sp, #28]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	db01      	blt.n	80053e2 <_svfiprintf_r+0x10a>
 80053de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053e0:	e004      	b.n	80053ec <_svfiprintf_r+0x114>
 80053e2:	425b      	negs	r3, r3
 80053e4:	60e3      	str	r3, [r4, #12]
 80053e6:	2302      	movs	r3, #2
 80053e8:	4313      	orrs	r3, r2
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	782b      	ldrb	r3, [r5, #0]
 80053ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80053f0:	d10c      	bne.n	800540c <_svfiprintf_r+0x134>
 80053f2:	786b      	ldrb	r3, [r5, #1]
 80053f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80053f6:	d134      	bne.n	8005462 <_svfiprintf_r+0x18a>
 80053f8:	9b07      	ldr	r3, [sp, #28]
 80053fa:	3502      	adds	r5, #2
 80053fc:	1d1a      	adds	r2, r3, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	9207      	str	r2, [sp, #28]
 8005402:	2b00      	cmp	r3, #0
 8005404:	da01      	bge.n	800540a <_svfiprintf_r+0x132>
 8005406:	2301      	movs	r3, #1
 8005408:	425b      	negs	r3, r3
 800540a:	9309      	str	r3, [sp, #36]	@ 0x24
 800540c:	4e2d      	ldr	r6, [pc, #180]	@ (80054c4 <_svfiprintf_r+0x1ec>)
 800540e:	2203      	movs	r2, #3
 8005410:	0030      	movs	r0, r6
 8005412:	7829      	ldrb	r1, [r5, #0]
 8005414:	f000 fac4 	bl	80059a0 <memchr>
 8005418:	2800      	cmp	r0, #0
 800541a:	d006      	beq.n	800542a <_svfiprintf_r+0x152>
 800541c:	2340      	movs	r3, #64	@ 0x40
 800541e:	1b80      	subs	r0, r0, r6
 8005420:	4083      	lsls	r3, r0
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	3501      	adds	r5, #1
 8005426:	4313      	orrs	r3, r2
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	7829      	ldrb	r1, [r5, #0]
 800542c:	2206      	movs	r2, #6
 800542e:	4826      	ldr	r0, [pc, #152]	@ (80054c8 <_svfiprintf_r+0x1f0>)
 8005430:	1c6e      	adds	r6, r5, #1
 8005432:	7621      	strb	r1, [r4, #24]
 8005434:	f000 fab4 	bl	80059a0 <memchr>
 8005438:	2800      	cmp	r0, #0
 800543a:	d038      	beq.n	80054ae <_svfiprintf_r+0x1d6>
 800543c:	4b23      	ldr	r3, [pc, #140]	@ (80054cc <_svfiprintf_r+0x1f4>)
 800543e:	2b00      	cmp	r3, #0
 8005440:	d122      	bne.n	8005488 <_svfiprintf_r+0x1b0>
 8005442:	2207      	movs	r2, #7
 8005444:	9b07      	ldr	r3, [sp, #28]
 8005446:	3307      	adds	r3, #7
 8005448:	4393      	bics	r3, r2
 800544a:	3308      	adds	r3, #8
 800544c:	9307      	str	r3, [sp, #28]
 800544e:	6963      	ldr	r3, [r4, #20]
 8005450:	9a04      	ldr	r2, [sp, #16]
 8005452:	189b      	adds	r3, r3, r2
 8005454:	6163      	str	r3, [r4, #20]
 8005456:	e762      	b.n	800531e <_svfiprintf_r+0x46>
 8005458:	4343      	muls	r3, r0
 800545a:	0035      	movs	r5, r6
 800545c:	2101      	movs	r1, #1
 800545e:	189b      	adds	r3, r3, r2
 8005460:	e7a4      	b.n	80053ac <_svfiprintf_r+0xd4>
 8005462:	2300      	movs	r3, #0
 8005464:	200a      	movs	r0, #10
 8005466:	0019      	movs	r1, r3
 8005468:	3501      	adds	r5, #1
 800546a:	6063      	str	r3, [r4, #4]
 800546c:	782a      	ldrb	r2, [r5, #0]
 800546e:	1c6e      	adds	r6, r5, #1
 8005470:	3a30      	subs	r2, #48	@ 0x30
 8005472:	2a09      	cmp	r2, #9
 8005474:	d903      	bls.n	800547e <_svfiprintf_r+0x1a6>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0c8      	beq.n	800540c <_svfiprintf_r+0x134>
 800547a:	9109      	str	r1, [sp, #36]	@ 0x24
 800547c:	e7c6      	b.n	800540c <_svfiprintf_r+0x134>
 800547e:	4341      	muls	r1, r0
 8005480:	0035      	movs	r5, r6
 8005482:	2301      	movs	r3, #1
 8005484:	1889      	adds	r1, r1, r2
 8005486:	e7f1      	b.n	800546c <_svfiprintf_r+0x194>
 8005488:	aa07      	add	r2, sp, #28
 800548a:	9200      	str	r2, [sp, #0]
 800548c:	0021      	movs	r1, r4
 800548e:	003a      	movs	r2, r7
 8005490:	4b0f      	ldr	r3, [pc, #60]	@ (80054d0 <_svfiprintf_r+0x1f8>)
 8005492:	9803      	ldr	r0, [sp, #12]
 8005494:	e000      	b.n	8005498 <_svfiprintf_r+0x1c0>
 8005496:	bf00      	nop
 8005498:	9004      	str	r0, [sp, #16]
 800549a:	9b04      	ldr	r3, [sp, #16]
 800549c:	3301      	adds	r3, #1
 800549e:	d1d6      	bne.n	800544e <_svfiprintf_r+0x176>
 80054a0:	89bb      	ldrh	r3, [r7, #12]
 80054a2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80054a4:	065b      	lsls	r3, r3, #25
 80054a6:	d500      	bpl.n	80054aa <_svfiprintf_r+0x1d2>
 80054a8:	e72c      	b.n	8005304 <_svfiprintf_r+0x2c>
 80054aa:	b021      	add	sp, #132	@ 0x84
 80054ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ae:	aa07      	add	r2, sp, #28
 80054b0:	9200      	str	r2, [sp, #0]
 80054b2:	0021      	movs	r1, r4
 80054b4:	003a      	movs	r2, r7
 80054b6:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <_svfiprintf_r+0x1f8>)
 80054b8:	9803      	ldr	r0, [sp, #12]
 80054ba:	f000 f87b 	bl	80055b4 <_printf_i>
 80054be:	e7eb      	b.n	8005498 <_svfiprintf_r+0x1c0>
 80054c0:	08006155 	.word	0x08006155
 80054c4:	0800615b 	.word	0x0800615b
 80054c8:	0800615f 	.word	0x0800615f
 80054cc:	00000000 	.word	0x00000000
 80054d0:	08005219 	.word	0x08005219

080054d4 <_printf_common>:
 80054d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054d6:	0016      	movs	r6, r2
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	688a      	ldr	r2, [r1, #8]
 80054dc:	690b      	ldr	r3, [r1, #16]
 80054de:	000c      	movs	r4, r1
 80054e0:	9000      	str	r0, [sp, #0]
 80054e2:	4293      	cmp	r3, r2
 80054e4:	da00      	bge.n	80054e8 <_printf_common+0x14>
 80054e6:	0013      	movs	r3, r2
 80054e8:	0022      	movs	r2, r4
 80054ea:	6033      	str	r3, [r6, #0]
 80054ec:	3243      	adds	r2, #67	@ 0x43
 80054ee:	7812      	ldrb	r2, [r2, #0]
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	d001      	beq.n	80054f8 <_printf_common+0x24>
 80054f4:	3301      	adds	r3, #1
 80054f6:	6033      	str	r3, [r6, #0]
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	069b      	lsls	r3, r3, #26
 80054fc:	d502      	bpl.n	8005504 <_printf_common+0x30>
 80054fe:	6833      	ldr	r3, [r6, #0]
 8005500:	3302      	adds	r3, #2
 8005502:	6033      	str	r3, [r6, #0]
 8005504:	6822      	ldr	r2, [r4, #0]
 8005506:	2306      	movs	r3, #6
 8005508:	0015      	movs	r5, r2
 800550a:	401d      	ands	r5, r3
 800550c:	421a      	tst	r2, r3
 800550e:	d027      	beq.n	8005560 <_printf_common+0x8c>
 8005510:	0023      	movs	r3, r4
 8005512:	3343      	adds	r3, #67	@ 0x43
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	1e5a      	subs	r2, r3, #1
 8005518:	4193      	sbcs	r3, r2
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	0692      	lsls	r2, r2, #26
 800551e:	d430      	bmi.n	8005582 <_printf_common+0xae>
 8005520:	0022      	movs	r2, r4
 8005522:	9901      	ldr	r1, [sp, #4]
 8005524:	9800      	ldr	r0, [sp, #0]
 8005526:	9d08      	ldr	r5, [sp, #32]
 8005528:	3243      	adds	r2, #67	@ 0x43
 800552a:	47a8      	blx	r5
 800552c:	3001      	adds	r0, #1
 800552e:	d025      	beq.n	800557c <_printf_common+0xa8>
 8005530:	2206      	movs	r2, #6
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	2500      	movs	r5, #0
 8005536:	4013      	ands	r3, r2
 8005538:	2b04      	cmp	r3, #4
 800553a:	d105      	bne.n	8005548 <_printf_common+0x74>
 800553c:	6833      	ldr	r3, [r6, #0]
 800553e:	68e5      	ldr	r5, [r4, #12]
 8005540:	1aed      	subs	r5, r5, r3
 8005542:	43eb      	mvns	r3, r5
 8005544:	17db      	asrs	r3, r3, #31
 8005546:	401d      	ands	r5, r3
 8005548:	68a3      	ldr	r3, [r4, #8]
 800554a:	6922      	ldr	r2, [r4, #16]
 800554c:	4293      	cmp	r3, r2
 800554e:	dd01      	ble.n	8005554 <_printf_common+0x80>
 8005550:	1a9b      	subs	r3, r3, r2
 8005552:	18ed      	adds	r5, r5, r3
 8005554:	2600      	movs	r6, #0
 8005556:	42b5      	cmp	r5, r6
 8005558:	d120      	bne.n	800559c <_printf_common+0xc8>
 800555a:	2000      	movs	r0, #0
 800555c:	e010      	b.n	8005580 <_printf_common+0xac>
 800555e:	3501      	adds	r5, #1
 8005560:	68e3      	ldr	r3, [r4, #12]
 8005562:	6832      	ldr	r2, [r6, #0]
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	42ab      	cmp	r3, r5
 8005568:	ddd2      	ble.n	8005510 <_printf_common+0x3c>
 800556a:	0022      	movs	r2, r4
 800556c:	2301      	movs	r3, #1
 800556e:	9901      	ldr	r1, [sp, #4]
 8005570:	9800      	ldr	r0, [sp, #0]
 8005572:	9f08      	ldr	r7, [sp, #32]
 8005574:	3219      	adds	r2, #25
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	d1f0      	bne.n	800555e <_printf_common+0x8a>
 800557c:	2001      	movs	r0, #1
 800557e:	4240      	negs	r0, r0
 8005580:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005582:	2030      	movs	r0, #48	@ 0x30
 8005584:	18e1      	adds	r1, r4, r3
 8005586:	3143      	adds	r1, #67	@ 0x43
 8005588:	7008      	strb	r0, [r1, #0]
 800558a:	0021      	movs	r1, r4
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	3145      	adds	r1, #69	@ 0x45
 8005590:	7809      	ldrb	r1, [r1, #0]
 8005592:	18a2      	adds	r2, r4, r2
 8005594:	3243      	adds	r2, #67	@ 0x43
 8005596:	3302      	adds	r3, #2
 8005598:	7011      	strb	r1, [r2, #0]
 800559a:	e7c1      	b.n	8005520 <_printf_common+0x4c>
 800559c:	0022      	movs	r2, r4
 800559e:	2301      	movs	r3, #1
 80055a0:	9901      	ldr	r1, [sp, #4]
 80055a2:	9800      	ldr	r0, [sp, #0]
 80055a4:	9f08      	ldr	r7, [sp, #32]
 80055a6:	321a      	adds	r2, #26
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	d0e6      	beq.n	800557c <_printf_common+0xa8>
 80055ae:	3601      	adds	r6, #1
 80055b0:	e7d1      	b.n	8005556 <_printf_common+0x82>
	...

080055b4 <_printf_i>:
 80055b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b6:	b08b      	sub	sp, #44	@ 0x2c
 80055b8:	9206      	str	r2, [sp, #24]
 80055ba:	000a      	movs	r2, r1
 80055bc:	3243      	adds	r2, #67	@ 0x43
 80055be:	9307      	str	r3, [sp, #28]
 80055c0:	9005      	str	r0, [sp, #20]
 80055c2:	9203      	str	r2, [sp, #12]
 80055c4:	7e0a      	ldrb	r2, [r1, #24]
 80055c6:	000c      	movs	r4, r1
 80055c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80055ca:	2a78      	cmp	r2, #120	@ 0x78
 80055cc:	d809      	bhi.n	80055e2 <_printf_i+0x2e>
 80055ce:	2a62      	cmp	r2, #98	@ 0x62
 80055d0:	d80b      	bhi.n	80055ea <_printf_i+0x36>
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	d100      	bne.n	80055d8 <_printf_i+0x24>
 80055d6:	e0bc      	b.n	8005752 <_printf_i+0x19e>
 80055d8:	497b      	ldr	r1, [pc, #492]	@ (80057c8 <_printf_i+0x214>)
 80055da:	9104      	str	r1, [sp, #16]
 80055dc:	2a58      	cmp	r2, #88	@ 0x58
 80055de:	d100      	bne.n	80055e2 <_printf_i+0x2e>
 80055e0:	e090      	b.n	8005704 <_printf_i+0x150>
 80055e2:	0025      	movs	r5, r4
 80055e4:	3542      	adds	r5, #66	@ 0x42
 80055e6:	702a      	strb	r2, [r5, #0]
 80055e8:	e022      	b.n	8005630 <_printf_i+0x7c>
 80055ea:	0010      	movs	r0, r2
 80055ec:	3863      	subs	r0, #99	@ 0x63
 80055ee:	2815      	cmp	r0, #21
 80055f0:	d8f7      	bhi.n	80055e2 <_printf_i+0x2e>
 80055f2:	f7fa fd9b 	bl	800012c <__gnu_thumb1_case_shi>
 80055f6:	0016      	.short	0x0016
 80055f8:	fff6001f 	.word	0xfff6001f
 80055fc:	fff6fff6 	.word	0xfff6fff6
 8005600:	001ffff6 	.word	0x001ffff6
 8005604:	fff6fff6 	.word	0xfff6fff6
 8005608:	fff6fff6 	.word	0xfff6fff6
 800560c:	003600a1 	.word	0x003600a1
 8005610:	fff60080 	.word	0xfff60080
 8005614:	00b2fff6 	.word	0x00b2fff6
 8005618:	0036fff6 	.word	0x0036fff6
 800561c:	fff6fff6 	.word	0xfff6fff6
 8005620:	0084      	.short	0x0084
 8005622:	0025      	movs	r5, r4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	3542      	adds	r5, #66	@ 0x42
 8005628:	1d11      	adds	r1, r2, #4
 800562a:	6019      	str	r1, [r3, #0]
 800562c:	6813      	ldr	r3, [r2, #0]
 800562e:	702b      	strb	r3, [r5, #0]
 8005630:	2301      	movs	r3, #1
 8005632:	e0a0      	b.n	8005776 <_printf_i+0x1c2>
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	6809      	ldr	r1, [r1, #0]
 8005638:	1d02      	adds	r2, r0, #4
 800563a:	060d      	lsls	r5, r1, #24
 800563c:	d50b      	bpl.n	8005656 <_printf_i+0xa2>
 800563e:	6806      	ldr	r6, [r0, #0]
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	2e00      	cmp	r6, #0
 8005644:	da03      	bge.n	800564e <_printf_i+0x9a>
 8005646:	232d      	movs	r3, #45	@ 0x2d
 8005648:	9a03      	ldr	r2, [sp, #12]
 800564a:	4276      	negs	r6, r6
 800564c:	7013      	strb	r3, [r2, #0]
 800564e:	4b5e      	ldr	r3, [pc, #376]	@ (80057c8 <_printf_i+0x214>)
 8005650:	270a      	movs	r7, #10
 8005652:	9304      	str	r3, [sp, #16]
 8005654:	e018      	b.n	8005688 <_printf_i+0xd4>
 8005656:	6806      	ldr	r6, [r0, #0]
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	0649      	lsls	r1, r1, #25
 800565c:	d5f1      	bpl.n	8005642 <_printf_i+0x8e>
 800565e:	b236      	sxth	r6, r6
 8005660:	e7ef      	b.n	8005642 <_printf_i+0x8e>
 8005662:	6808      	ldr	r0, [r1, #0]
 8005664:	6819      	ldr	r1, [r3, #0]
 8005666:	c940      	ldmia	r1!, {r6}
 8005668:	0605      	lsls	r5, r0, #24
 800566a:	d402      	bmi.n	8005672 <_printf_i+0xbe>
 800566c:	0640      	lsls	r0, r0, #25
 800566e:	d500      	bpl.n	8005672 <_printf_i+0xbe>
 8005670:	b2b6      	uxth	r6, r6
 8005672:	6019      	str	r1, [r3, #0]
 8005674:	4b54      	ldr	r3, [pc, #336]	@ (80057c8 <_printf_i+0x214>)
 8005676:	270a      	movs	r7, #10
 8005678:	9304      	str	r3, [sp, #16]
 800567a:	2a6f      	cmp	r2, #111	@ 0x6f
 800567c:	d100      	bne.n	8005680 <_printf_i+0xcc>
 800567e:	3f02      	subs	r7, #2
 8005680:	0023      	movs	r3, r4
 8005682:	2200      	movs	r2, #0
 8005684:	3343      	adds	r3, #67	@ 0x43
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	60a3      	str	r3, [r4, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	db03      	blt.n	8005698 <_printf_i+0xe4>
 8005690:	2104      	movs	r1, #4
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	438a      	bics	r2, r1
 8005696:	6022      	str	r2, [r4, #0]
 8005698:	2e00      	cmp	r6, #0
 800569a:	d102      	bne.n	80056a2 <_printf_i+0xee>
 800569c:	9d03      	ldr	r5, [sp, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <_printf_i+0x108>
 80056a2:	9d03      	ldr	r5, [sp, #12]
 80056a4:	0030      	movs	r0, r6
 80056a6:	0039      	movs	r1, r7
 80056a8:	f7fa fdd0 	bl	800024c <__aeabi_uidivmod>
 80056ac:	9b04      	ldr	r3, [sp, #16]
 80056ae:	3d01      	subs	r5, #1
 80056b0:	5c5b      	ldrb	r3, [r3, r1]
 80056b2:	702b      	strb	r3, [r5, #0]
 80056b4:	0033      	movs	r3, r6
 80056b6:	0006      	movs	r6, r0
 80056b8:	429f      	cmp	r7, r3
 80056ba:	d9f3      	bls.n	80056a4 <_printf_i+0xf0>
 80056bc:	2f08      	cmp	r7, #8
 80056be:	d109      	bne.n	80056d4 <_printf_i+0x120>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	07db      	lsls	r3, r3, #31
 80056c4:	d506      	bpl.n	80056d4 <_printf_i+0x120>
 80056c6:	6862      	ldr	r2, [r4, #4]
 80056c8:	6923      	ldr	r3, [r4, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	dc02      	bgt.n	80056d4 <_printf_i+0x120>
 80056ce:	2330      	movs	r3, #48	@ 0x30
 80056d0:	3d01      	subs	r5, #1
 80056d2:	702b      	strb	r3, [r5, #0]
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	1b5b      	subs	r3, r3, r5
 80056d8:	6123      	str	r3, [r4, #16]
 80056da:	9b07      	ldr	r3, [sp, #28]
 80056dc:	0021      	movs	r1, r4
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	9805      	ldr	r0, [sp, #20]
 80056e2:	9b06      	ldr	r3, [sp, #24]
 80056e4:	aa09      	add	r2, sp, #36	@ 0x24
 80056e6:	f7ff fef5 	bl	80054d4 <_printf_common>
 80056ea:	3001      	adds	r0, #1
 80056ec:	d148      	bne.n	8005780 <_printf_i+0x1cc>
 80056ee:	2001      	movs	r0, #1
 80056f0:	4240      	negs	r0, r0
 80056f2:	b00b      	add	sp, #44	@ 0x2c
 80056f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f6:	2220      	movs	r2, #32
 80056f8:	6809      	ldr	r1, [r1, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	6022      	str	r2, [r4, #0]
 80056fe:	2278      	movs	r2, #120	@ 0x78
 8005700:	4932      	ldr	r1, [pc, #200]	@ (80057cc <_printf_i+0x218>)
 8005702:	9104      	str	r1, [sp, #16]
 8005704:	0021      	movs	r1, r4
 8005706:	3145      	adds	r1, #69	@ 0x45
 8005708:	700a      	strb	r2, [r1, #0]
 800570a:	6819      	ldr	r1, [r3, #0]
 800570c:	6822      	ldr	r2, [r4, #0]
 800570e:	c940      	ldmia	r1!, {r6}
 8005710:	0610      	lsls	r0, r2, #24
 8005712:	d402      	bmi.n	800571a <_printf_i+0x166>
 8005714:	0650      	lsls	r0, r2, #25
 8005716:	d500      	bpl.n	800571a <_printf_i+0x166>
 8005718:	b2b6      	uxth	r6, r6
 800571a:	6019      	str	r1, [r3, #0]
 800571c:	07d3      	lsls	r3, r2, #31
 800571e:	d502      	bpl.n	8005726 <_printf_i+0x172>
 8005720:	2320      	movs	r3, #32
 8005722:	4313      	orrs	r3, r2
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	2e00      	cmp	r6, #0
 8005728:	d001      	beq.n	800572e <_printf_i+0x17a>
 800572a:	2710      	movs	r7, #16
 800572c:	e7a8      	b.n	8005680 <_printf_i+0xcc>
 800572e:	2220      	movs	r2, #32
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	4393      	bics	r3, r2
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	e7f8      	b.n	800572a <_printf_i+0x176>
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	680d      	ldr	r5, [r1, #0]
 800573c:	1d10      	adds	r0, r2, #4
 800573e:	6949      	ldr	r1, [r1, #20]
 8005740:	6018      	str	r0, [r3, #0]
 8005742:	6813      	ldr	r3, [r2, #0]
 8005744:	062e      	lsls	r6, r5, #24
 8005746:	d501      	bpl.n	800574c <_printf_i+0x198>
 8005748:	6019      	str	r1, [r3, #0]
 800574a:	e002      	b.n	8005752 <_printf_i+0x19e>
 800574c:	066d      	lsls	r5, r5, #25
 800574e:	d5fb      	bpl.n	8005748 <_printf_i+0x194>
 8005750:	8019      	strh	r1, [r3, #0]
 8005752:	2300      	movs	r3, #0
 8005754:	9d03      	ldr	r5, [sp, #12]
 8005756:	6123      	str	r3, [r4, #16]
 8005758:	e7bf      	b.n	80056da <_printf_i+0x126>
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	1d11      	adds	r1, r2, #4
 800575e:	6019      	str	r1, [r3, #0]
 8005760:	6815      	ldr	r5, [r2, #0]
 8005762:	2100      	movs	r1, #0
 8005764:	0028      	movs	r0, r5
 8005766:	6862      	ldr	r2, [r4, #4]
 8005768:	f000 f91a 	bl	80059a0 <memchr>
 800576c:	2800      	cmp	r0, #0
 800576e:	d001      	beq.n	8005774 <_printf_i+0x1c0>
 8005770:	1b40      	subs	r0, r0, r5
 8005772:	6060      	str	r0, [r4, #4]
 8005774:	6863      	ldr	r3, [r4, #4]
 8005776:	6123      	str	r3, [r4, #16]
 8005778:	2300      	movs	r3, #0
 800577a:	9a03      	ldr	r2, [sp, #12]
 800577c:	7013      	strb	r3, [r2, #0]
 800577e:	e7ac      	b.n	80056da <_printf_i+0x126>
 8005780:	002a      	movs	r2, r5
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	9906      	ldr	r1, [sp, #24]
 8005786:	9805      	ldr	r0, [sp, #20]
 8005788:	9d07      	ldr	r5, [sp, #28]
 800578a:	47a8      	blx	r5
 800578c:	3001      	adds	r0, #1
 800578e:	d0ae      	beq.n	80056ee <_printf_i+0x13a>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	079b      	lsls	r3, r3, #30
 8005794:	d415      	bmi.n	80057c2 <_printf_i+0x20e>
 8005796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005798:	68e0      	ldr	r0, [r4, #12]
 800579a:	4298      	cmp	r0, r3
 800579c:	daa9      	bge.n	80056f2 <_printf_i+0x13e>
 800579e:	0018      	movs	r0, r3
 80057a0:	e7a7      	b.n	80056f2 <_printf_i+0x13e>
 80057a2:	0022      	movs	r2, r4
 80057a4:	2301      	movs	r3, #1
 80057a6:	9906      	ldr	r1, [sp, #24]
 80057a8:	9805      	ldr	r0, [sp, #20]
 80057aa:	9e07      	ldr	r6, [sp, #28]
 80057ac:	3219      	adds	r2, #25
 80057ae:	47b0      	blx	r6
 80057b0:	3001      	adds	r0, #1
 80057b2:	d09c      	beq.n	80056ee <_printf_i+0x13a>
 80057b4:	3501      	adds	r5, #1
 80057b6:	68e3      	ldr	r3, [r4, #12]
 80057b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	42ab      	cmp	r3, r5
 80057be:	dcf0      	bgt.n	80057a2 <_printf_i+0x1ee>
 80057c0:	e7e9      	b.n	8005796 <_printf_i+0x1e2>
 80057c2:	2500      	movs	r5, #0
 80057c4:	e7f7      	b.n	80057b6 <_printf_i+0x202>
 80057c6:	46c0      	nop			@ (mov r8, r8)
 80057c8:	08006166 	.word	0x08006166
 80057cc:	08006177 	.word	0x08006177

080057d0 <__sflush_r>:
 80057d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057d2:	220c      	movs	r2, #12
 80057d4:	5e8b      	ldrsh	r3, [r1, r2]
 80057d6:	0005      	movs	r5, r0
 80057d8:	000c      	movs	r4, r1
 80057da:	071a      	lsls	r2, r3, #28
 80057dc:	d456      	bmi.n	800588c <__sflush_r+0xbc>
 80057de:	684a      	ldr	r2, [r1, #4]
 80057e0:	2a00      	cmp	r2, #0
 80057e2:	dc02      	bgt.n	80057ea <__sflush_r+0x1a>
 80057e4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80057e6:	2a00      	cmp	r2, #0
 80057e8:	dd4e      	ble.n	8005888 <__sflush_r+0xb8>
 80057ea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80057ec:	2f00      	cmp	r7, #0
 80057ee:	d04b      	beq.n	8005888 <__sflush_r+0xb8>
 80057f0:	2200      	movs	r2, #0
 80057f2:	2080      	movs	r0, #128	@ 0x80
 80057f4:	682e      	ldr	r6, [r5, #0]
 80057f6:	602a      	str	r2, [r5, #0]
 80057f8:	001a      	movs	r2, r3
 80057fa:	0140      	lsls	r0, r0, #5
 80057fc:	6a21      	ldr	r1, [r4, #32]
 80057fe:	4002      	ands	r2, r0
 8005800:	4203      	tst	r3, r0
 8005802:	d033      	beq.n	800586c <__sflush_r+0x9c>
 8005804:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	075b      	lsls	r3, r3, #29
 800580a:	d506      	bpl.n	800581a <__sflush_r+0x4a>
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <__sflush_r+0x4a>
 8005816:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005818:	1ad2      	subs	r2, r2, r3
 800581a:	2300      	movs	r3, #0
 800581c:	0028      	movs	r0, r5
 800581e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005820:	6a21      	ldr	r1, [r4, #32]
 8005822:	47b8      	blx	r7
 8005824:	89a2      	ldrh	r2, [r4, #12]
 8005826:	1c43      	adds	r3, r0, #1
 8005828:	d106      	bne.n	8005838 <__sflush_r+0x68>
 800582a:	6829      	ldr	r1, [r5, #0]
 800582c:	291d      	cmp	r1, #29
 800582e:	d846      	bhi.n	80058be <__sflush_r+0xee>
 8005830:	4b29      	ldr	r3, [pc, #164]	@ (80058d8 <__sflush_r+0x108>)
 8005832:	410b      	asrs	r3, r1
 8005834:	07db      	lsls	r3, r3, #31
 8005836:	d442      	bmi.n	80058be <__sflush_r+0xee>
 8005838:	2300      	movs	r3, #0
 800583a:	6063      	str	r3, [r4, #4]
 800583c:	6923      	ldr	r3, [r4, #16]
 800583e:	6023      	str	r3, [r4, #0]
 8005840:	04d2      	lsls	r2, r2, #19
 8005842:	d505      	bpl.n	8005850 <__sflush_r+0x80>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <__sflush_r+0x7e>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d100      	bne.n	8005850 <__sflush_r+0x80>
 800584e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005852:	602e      	str	r6, [r5, #0]
 8005854:	2900      	cmp	r1, #0
 8005856:	d017      	beq.n	8005888 <__sflush_r+0xb8>
 8005858:	0023      	movs	r3, r4
 800585a:	3344      	adds	r3, #68	@ 0x44
 800585c:	4299      	cmp	r1, r3
 800585e:	d002      	beq.n	8005866 <__sflush_r+0x96>
 8005860:	0028      	movs	r0, r5
 8005862:	f7ff fbd3 	bl	800500c <_free_r>
 8005866:	2300      	movs	r3, #0
 8005868:	6363      	str	r3, [r4, #52]	@ 0x34
 800586a:	e00d      	b.n	8005888 <__sflush_r+0xb8>
 800586c:	2301      	movs	r3, #1
 800586e:	0028      	movs	r0, r5
 8005870:	47b8      	blx	r7
 8005872:	0002      	movs	r2, r0
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	d1c6      	bne.n	8005806 <__sflush_r+0x36>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0c3      	beq.n	8005806 <__sflush_r+0x36>
 800587e:	2b1d      	cmp	r3, #29
 8005880:	d001      	beq.n	8005886 <__sflush_r+0xb6>
 8005882:	2b16      	cmp	r3, #22
 8005884:	d11a      	bne.n	80058bc <__sflush_r+0xec>
 8005886:	602e      	str	r6, [r5, #0]
 8005888:	2000      	movs	r0, #0
 800588a:	e01e      	b.n	80058ca <__sflush_r+0xfa>
 800588c:	690e      	ldr	r6, [r1, #16]
 800588e:	2e00      	cmp	r6, #0
 8005890:	d0fa      	beq.n	8005888 <__sflush_r+0xb8>
 8005892:	680f      	ldr	r7, [r1, #0]
 8005894:	600e      	str	r6, [r1, #0]
 8005896:	1bba      	subs	r2, r7, r6
 8005898:	9201      	str	r2, [sp, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	079b      	lsls	r3, r3, #30
 800589e:	d100      	bne.n	80058a2 <__sflush_r+0xd2>
 80058a0:	694a      	ldr	r2, [r1, #20]
 80058a2:	60a2      	str	r2, [r4, #8]
 80058a4:	9b01      	ldr	r3, [sp, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	ddee      	ble.n	8005888 <__sflush_r+0xb8>
 80058aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80058ac:	0032      	movs	r2, r6
 80058ae:	001f      	movs	r7, r3
 80058b0:	0028      	movs	r0, r5
 80058b2:	9b01      	ldr	r3, [sp, #4]
 80058b4:	6a21      	ldr	r1, [r4, #32]
 80058b6:	47b8      	blx	r7
 80058b8:	2800      	cmp	r0, #0
 80058ba:	dc07      	bgt.n	80058cc <__sflush_r+0xfc>
 80058bc:	89a2      	ldrh	r2, [r4, #12]
 80058be:	2340      	movs	r3, #64	@ 0x40
 80058c0:	2001      	movs	r0, #1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	b21b      	sxth	r3, r3
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	4240      	negs	r0, r0
 80058ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058cc:	9b01      	ldr	r3, [sp, #4]
 80058ce:	1836      	adds	r6, r6, r0
 80058d0:	1a1b      	subs	r3, r3, r0
 80058d2:	9301      	str	r3, [sp, #4]
 80058d4:	e7e6      	b.n	80058a4 <__sflush_r+0xd4>
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	dfbffffe 	.word	0xdfbffffe

080058dc <_fflush_r>:
 80058dc:	690b      	ldr	r3, [r1, #16]
 80058de:	b570      	push	{r4, r5, r6, lr}
 80058e0:	0005      	movs	r5, r0
 80058e2:	000c      	movs	r4, r1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d102      	bne.n	80058ee <_fflush_r+0x12>
 80058e8:	2500      	movs	r5, #0
 80058ea:	0028      	movs	r0, r5
 80058ec:	bd70      	pop	{r4, r5, r6, pc}
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d004      	beq.n	80058fc <_fflush_r+0x20>
 80058f2:	6a03      	ldr	r3, [r0, #32]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <_fflush_r+0x20>
 80058f8:	f7ff f9aa 	bl	8004c50 <__sinit>
 80058fc:	220c      	movs	r2, #12
 80058fe:	5ea3      	ldrsh	r3, [r4, r2]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f1      	beq.n	80058e8 <_fflush_r+0xc>
 8005904:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005906:	07d2      	lsls	r2, r2, #31
 8005908:	d404      	bmi.n	8005914 <_fflush_r+0x38>
 800590a:	059b      	lsls	r3, r3, #22
 800590c:	d402      	bmi.n	8005914 <_fflush_r+0x38>
 800590e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005910:	f7ff fb53 	bl	8004fba <__retarget_lock_acquire_recursive>
 8005914:	0028      	movs	r0, r5
 8005916:	0021      	movs	r1, r4
 8005918:	f7ff ff5a 	bl	80057d0 <__sflush_r>
 800591c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800591e:	0005      	movs	r5, r0
 8005920:	07db      	lsls	r3, r3, #31
 8005922:	d4e2      	bmi.n	80058ea <_fflush_r+0xe>
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	059b      	lsls	r3, r3, #22
 8005928:	d4df      	bmi.n	80058ea <_fflush_r+0xe>
 800592a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800592c:	f7ff fb46 	bl	8004fbc <__retarget_lock_release_recursive>
 8005930:	e7db      	b.n	80058ea <_fflush_r+0xe>
	...

08005934 <fiprintf>:
 8005934:	b40e      	push	{r1, r2, r3}
 8005936:	b517      	push	{r0, r1, r2, r4, lr}
 8005938:	4c05      	ldr	r4, [pc, #20]	@ (8005950 <fiprintf+0x1c>)
 800593a:	ab05      	add	r3, sp, #20
 800593c:	cb04      	ldmia	r3!, {r2}
 800593e:	0001      	movs	r1, r0
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	f000 f894 	bl	8005a70 <_vfiprintf_r>
 8005948:	bc1e      	pop	{r1, r2, r3, r4}
 800594a:	bc08      	pop	{r3}
 800594c:	b003      	add	sp, #12
 800594e:	4718      	bx	r3
 8005950:	20000018 	.word	0x20000018

08005954 <memmove>:
 8005954:	b510      	push	{r4, lr}
 8005956:	4288      	cmp	r0, r1
 8005958:	d806      	bhi.n	8005968 <memmove+0x14>
 800595a:	2300      	movs	r3, #0
 800595c:	429a      	cmp	r2, r3
 800595e:	d008      	beq.n	8005972 <memmove+0x1e>
 8005960:	5ccc      	ldrb	r4, [r1, r3]
 8005962:	54c4      	strb	r4, [r0, r3]
 8005964:	3301      	adds	r3, #1
 8005966:	e7f9      	b.n	800595c <memmove+0x8>
 8005968:	188b      	adds	r3, r1, r2
 800596a:	4298      	cmp	r0, r3
 800596c:	d2f5      	bcs.n	800595a <memmove+0x6>
 800596e:	3a01      	subs	r2, #1
 8005970:	d200      	bcs.n	8005974 <memmove+0x20>
 8005972:	bd10      	pop	{r4, pc}
 8005974:	5c8b      	ldrb	r3, [r1, r2]
 8005976:	5483      	strb	r3, [r0, r2]
 8005978:	e7f9      	b.n	800596e <memmove+0x1a>
	...

0800597c <_sbrk_r>:
 800597c:	2300      	movs	r3, #0
 800597e:	b570      	push	{r4, r5, r6, lr}
 8005980:	4d06      	ldr	r5, [pc, #24]	@ (800599c <_sbrk_r+0x20>)
 8005982:	0004      	movs	r4, r0
 8005984:	0008      	movs	r0, r1
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	f7fb fa06 	bl	8000d98 <_sbrk>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d103      	bne.n	8005998 <_sbrk_r+0x1c>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d000      	beq.n	8005998 <_sbrk_r+0x1c>
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	bd70      	pop	{r4, r5, r6, pc}
 800599a:	46c0      	nop			@ (mov r8, r8)
 800599c:	200005e0 	.word	0x200005e0

080059a0 <memchr>:
 80059a0:	b2c9      	uxtb	r1, r1
 80059a2:	1882      	adds	r2, r0, r2
 80059a4:	4290      	cmp	r0, r2
 80059a6:	d101      	bne.n	80059ac <memchr+0xc>
 80059a8:	2000      	movs	r0, #0
 80059aa:	4770      	bx	lr
 80059ac:	7803      	ldrb	r3, [r0, #0]
 80059ae:	428b      	cmp	r3, r1
 80059b0:	d0fb      	beq.n	80059aa <memchr+0xa>
 80059b2:	3001      	adds	r0, #1
 80059b4:	e7f6      	b.n	80059a4 <memchr+0x4>

080059b6 <abort>:
 80059b6:	2006      	movs	r0, #6
 80059b8:	b510      	push	{r4, lr}
 80059ba:	f000 fa3f 	bl	8005e3c <raise>
 80059be:	2001      	movs	r0, #1
 80059c0:	f7fb f978 	bl	8000cb4 <_exit>

080059c4 <_realloc_r>:
 80059c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059c6:	0006      	movs	r6, r0
 80059c8:	000c      	movs	r4, r1
 80059ca:	0015      	movs	r5, r2
 80059cc:	2900      	cmp	r1, #0
 80059ce:	d105      	bne.n	80059dc <_realloc_r+0x18>
 80059d0:	0011      	movs	r1, r2
 80059d2:	f7ff fb91 	bl	80050f8 <_malloc_r>
 80059d6:	0004      	movs	r4, r0
 80059d8:	0020      	movs	r0, r4
 80059da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059dc:	2a00      	cmp	r2, #0
 80059de:	d103      	bne.n	80059e8 <_realloc_r+0x24>
 80059e0:	f7ff fb14 	bl	800500c <_free_r>
 80059e4:	2400      	movs	r4, #0
 80059e6:	e7f7      	b.n	80059d8 <_realloc_r+0x14>
 80059e8:	f000 fa48 	bl	8005e7c <_malloc_usable_size_r>
 80059ec:	0007      	movs	r7, r0
 80059ee:	4285      	cmp	r5, r0
 80059f0:	d802      	bhi.n	80059f8 <_realloc_r+0x34>
 80059f2:	0843      	lsrs	r3, r0, #1
 80059f4:	42ab      	cmp	r3, r5
 80059f6:	d3ef      	bcc.n	80059d8 <_realloc_r+0x14>
 80059f8:	0029      	movs	r1, r5
 80059fa:	0030      	movs	r0, r6
 80059fc:	f7ff fb7c 	bl	80050f8 <_malloc_r>
 8005a00:	9001      	str	r0, [sp, #4]
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d0ee      	beq.n	80059e4 <_realloc_r+0x20>
 8005a06:	002a      	movs	r2, r5
 8005a08:	42bd      	cmp	r5, r7
 8005a0a:	d900      	bls.n	8005a0e <_realloc_r+0x4a>
 8005a0c:	003a      	movs	r2, r7
 8005a0e:	0021      	movs	r1, r4
 8005a10:	9801      	ldr	r0, [sp, #4]
 8005a12:	f7ff fad4 	bl	8004fbe <memcpy>
 8005a16:	0021      	movs	r1, r4
 8005a18:	0030      	movs	r0, r6
 8005a1a:	f7ff faf7 	bl	800500c <_free_r>
 8005a1e:	9c01      	ldr	r4, [sp, #4]
 8005a20:	e7da      	b.n	80059d8 <_realloc_r+0x14>

08005a22 <__sfputc_r>:
 8005a22:	6893      	ldr	r3, [r2, #8]
 8005a24:	b510      	push	{r4, lr}
 8005a26:	3b01      	subs	r3, #1
 8005a28:	6093      	str	r3, [r2, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	da04      	bge.n	8005a38 <__sfputc_r+0x16>
 8005a2e:	6994      	ldr	r4, [r2, #24]
 8005a30:	42a3      	cmp	r3, r4
 8005a32:	db07      	blt.n	8005a44 <__sfputc_r+0x22>
 8005a34:	290a      	cmp	r1, #10
 8005a36:	d005      	beq.n	8005a44 <__sfputc_r+0x22>
 8005a38:	6813      	ldr	r3, [r2, #0]
 8005a3a:	1c58      	adds	r0, r3, #1
 8005a3c:	6010      	str	r0, [r2, #0]
 8005a3e:	7019      	strb	r1, [r3, #0]
 8005a40:	0008      	movs	r0, r1
 8005a42:	bd10      	pop	{r4, pc}
 8005a44:	f000 f930 	bl	8005ca8 <__swbuf_r>
 8005a48:	0001      	movs	r1, r0
 8005a4a:	e7f9      	b.n	8005a40 <__sfputc_r+0x1e>

08005a4c <__sfputs_r>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	0006      	movs	r6, r0
 8005a50:	000f      	movs	r7, r1
 8005a52:	0014      	movs	r4, r2
 8005a54:	18d5      	adds	r5, r2, r3
 8005a56:	42ac      	cmp	r4, r5
 8005a58:	d101      	bne.n	8005a5e <__sfputs_r+0x12>
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	e007      	b.n	8005a6e <__sfputs_r+0x22>
 8005a5e:	7821      	ldrb	r1, [r4, #0]
 8005a60:	003a      	movs	r2, r7
 8005a62:	0030      	movs	r0, r6
 8005a64:	f7ff ffdd 	bl	8005a22 <__sfputc_r>
 8005a68:	3401      	adds	r4, #1
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	d1f3      	bne.n	8005a56 <__sfputs_r+0xa>
 8005a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a70 <_vfiprintf_r>:
 8005a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a72:	b0a1      	sub	sp, #132	@ 0x84
 8005a74:	000f      	movs	r7, r1
 8005a76:	0015      	movs	r5, r2
 8005a78:	001e      	movs	r6, r3
 8005a7a:	9003      	str	r0, [sp, #12]
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d004      	beq.n	8005a8a <_vfiprintf_r+0x1a>
 8005a80:	6a03      	ldr	r3, [r0, #32]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <_vfiprintf_r+0x1a>
 8005a86:	f7ff f8e3 	bl	8004c50 <__sinit>
 8005a8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a8c:	07db      	lsls	r3, r3, #31
 8005a8e:	d405      	bmi.n	8005a9c <_vfiprintf_r+0x2c>
 8005a90:	89bb      	ldrh	r3, [r7, #12]
 8005a92:	059b      	lsls	r3, r3, #22
 8005a94:	d402      	bmi.n	8005a9c <_vfiprintf_r+0x2c>
 8005a96:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005a98:	f7ff fa8f 	bl	8004fba <__retarget_lock_acquire_recursive>
 8005a9c:	89bb      	ldrh	r3, [r7, #12]
 8005a9e:	071b      	lsls	r3, r3, #28
 8005aa0:	d502      	bpl.n	8005aa8 <_vfiprintf_r+0x38>
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d113      	bne.n	8005ad0 <_vfiprintf_r+0x60>
 8005aa8:	0039      	movs	r1, r7
 8005aaa:	9803      	ldr	r0, [sp, #12]
 8005aac:	f000 f93e 	bl	8005d2c <__swsetup_r>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d00d      	beq.n	8005ad0 <_vfiprintf_r+0x60>
 8005ab4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ab6:	07db      	lsls	r3, r3, #31
 8005ab8:	d503      	bpl.n	8005ac2 <_vfiprintf_r+0x52>
 8005aba:	2001      	movs	r0, #1
 8005abc:	4240      	negs	r0, r0
 8005abe:	b021      	add	sp, #132	@ 0x84
 8005ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac2:	89bb      	ldrh	r3, [r7, #12]
 8005ac4:	059b      	lsls	r3, r3, #22
 8005ac6:	d4f8      	bmi.n	8005aba <_vfiprintf_r+0x4a>
 8005ac8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005aca:	f7ff fa77 	bl	8004fbc <__retarget_lock_release_recursive>
 8005ace:	e7f4      	b.n	8005aba <_vfiprintf_r+0x4a>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	ac08      	add	r4, sp, #32
 8005ad4:	6163      	str	r3, [r4, #20]
 8005ad6:	3320      	adds	r3, #32
 8005ad8:	7663      	strb	r3, [r4, #25]
 8005ada:	3310      	adds	r3, #16
 8005adc:	76a3      	strb	r3, [r4, #26]
 8005ade:	9607      	str	r6, [sp, #28]
 8005ae0:	002e      	movs	r6, r5
 8005ae2:	7833      	ldrb	r3, [r6, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <_vfiprintf_r+0x7c>
 8005ae8:	2b25      	cmp	r3, #37	@ 0x25
 8005aea:	d148      	bne.n	8005b7e <_vfiprintf_r+0x10e>
 8005aec:	1b73      	subs	r3, r6, r5
 8005aee:	9305      	str	r3, [sp, #20]
 8005af0:	42ae      	cmp	r6, r5
 8005af2:	d00b      	beq.n	8005b0c <_vfiprintf_r+0x9c>
 8005af4:	002a      	movs	r2, r5
 8005af6:	0039      	movs	r1, r7
 8005af8:	9803      	ldr	r0, [sp, #12]
 8005afa:	f7ff ffa7 	bl	8005a4c <__sfputs_r>
 8005afe:	3001      	adds	r0, #1
 8005b00:	d100      	bne.n	8005b04 <_vfiprintf_r+0x94>
 8005b02:	e0ae      	b.n	8005c62 <_vfiprintf_r+0x1f2>
 8005b04:	6963      	ldr	r3, [r4, #20]
 8005b06:	9a05      	ldr	r2, [sp, #20]
 8005b08:	189b      	adds	r3, r3, r2
 8005b0a:	6163      	str	r3, [r4, #20]
 8005b0c:	7833      	ldrb	r3, [r6, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d100      	bne.n	8005b14 <_vfiprintf_r+0xa4>
 8005b12:	e0a6      	b.n	8005c62 <_vfiprintf_r+0x1f2>
 8005b14:	2201      	movs	r2, #1
 8005b16:	2300      	movs	r3, #0
 8005b18:	4252      	negs	r2, r2
 8005b1a:	6062      	str	r2, [r4, #4]
 8005b1c:	a904      	add	r1, sp, #16
 8005b1e:	3254      	adds	r2, #84	@ 0x54
 8005b20:	1852      	adds	r2, r2, r1
 8005b22:	1c75      	adds	r5, r6, #1
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	60e3      	str	r3, [r4, #12]
 8005b28:	60a3      	str	r3, [r4, #8]
 8005b2a:	7013      	strb	r3, [r2, #0]
 8005b2c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005b2e:	4b59      	ldr	r3, [pc, #356]	@ (8005c94 <_vfiprintf_r+0x224>)
 8005b30:	2205      	movs	r2, #5
 8005b32:	0018      	movs	r0, r3
 8005b34:	7829      	ldrb	r1, [r5, #0]
 8005b36:	9305      	str	r3, [sp, #20]
 8005b38:	f7ff ff32 	bl	80059a0 <memchr>
 8005b3c:	1c6e      	adds	r6, r5, #1
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d11f      	bne.n	8005b82 <_vfiprintf_r+0x112>
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	06d3      	lsls	r3, r2, #27
 8005b46:	d504      	bpl.n	8005b52 <_vfiprintf_r+0xe2>
 8005b48:	2353      	movs	r3, #83	@ 0x53
 8005b4a:	a904      	add	r1, sp, #16
 8005b4c:	185b      	adds	r3, r3, r1
 8005b4e:	2120      	movs	r1, #32
 8005b50:	7019      	strb	r1, [r3, #0]
 8005b52:	0713      	lsls	r3, r2, #28
 8005b54:	d504      	bpl.n	8005b60 <_vfiprintf_r+0xf0>
 8005b56:	2353      	movs	r3, #83	@ 0x53
 8005b58:	a904      	add	r1, sp, #16
 8005b5a:	185b      	adds	r3, r3, r1
 8005b5c:	212b      	movs	r1, #43	@ 0x2b
 8005b5e:	7019      	strb	r1, [r3, #0]
 8005b60:	782b      	ldrb	r3, [r5, #0]
 8005b62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b64:	d016      	beq.n	8005b94 <_vfiprintf_r+0x124>
 8005b66:	002e      	movs	r6, r5
 8005b68:	2100      	movs	r1, #0
 8005b6a:	200a      	movs	r0, #10
 8005b6c:	68e3      	ldr	r3, [r4, #12]
 8005b6e:	7832      	ldrb	r2, [r6, #0]
 8005b70:	1c75      	adds	r5, r6, #1
 8005b72:	3a30      	subs	r2, #48	@ 0x30
 8005b74:	2a09      	cmp	r2, #9
 8005b76:	d950      	bls.n	8005c1a <_vfiprintf_r+0x1aa>
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	d111      	bne.n	8005ba0 <_vfiprintf_r+0x130>
 8005b7c:	e017      	b.n	8005bae <_vfiprintf_r+0x13e>
 8005b7e:	3601      	adds	r6, #1
 8005b80:	e7af      	b.n	8005ae2 <_vfiprintf_r+0x72>
 8005b82:	9b05      	ldr	r3, [sp, #20]
 8005b84:	6822      	ldr	r2, [r4, #0]
 8005b86:	1ac0      	subs	r0, r0, r3
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4083      	lsls	r3, r0
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	0035      	movs	r5, r6
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	e7cc      	b.n	8005b2e <_vfiprintf_r+0xbe>
 8005b94:	9b07      	ldr	r3, [sp, #28]
 8005b96:	1d19      	adds	r1, r3, #4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	9107      	str	r1, [sp, #28]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	db01      	blt.n	8005ba4 <_vfiprintf_r+0x134>
 8005ba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ba2:	e004      	b.n	8005bae <_vfiprintf_r+0x13e>
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	60e3      	str	r3, [r4, #12]
 8005ba8:	2302      	movs	r3, #2
 8005baa:	4313      	orrs	r3, r2
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	7833      	ldrb	r3, [r6, #0]
 8005bb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bb2:	d10c      	bne.n	8005bce <_vfiprintf_r+0x15e>
 8005bb4:	7873      	ldrb	r3, [r6, #1]
 8005bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bb8:	d134      	bne.n	8005c24 <_vfiprintf_r+0x1b4>
 8005bba:	9b07      	ldr	r3, [sp, #28]
 8005bbc:	3602      	adds	r6, #2
 8005bbe:	1d1a      	adds	r2, r3, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	9207      	str	r2, [sp, #28]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	da01      	bge.n	8005bcc <_vfiprintf_r+0x15c>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	425b      	negs	r3, r3
 8005bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bce:	4d32      	ldr	r5, [pc, #200]	@ (8005c98 <_vfiprintf_r+0x228>)
 8005bd0:	2203      	movs	r2, #3
 8005bd2:	0028      	movs	r0, r5
 8005bd4:	7831      	ldrb	r1, [r6, #0]
 8005bd6:	f7ff fee3 	bl	80059a0 <memchr>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d006      	beq.n	8005bec <_vfiprintf_r+0x17c>
 8005bde:	2340      	movs	r3, #64	@ 0x40
 8005be0:	1b40      	subs	r0, r0, r5
 8005be2:	4083      	lsls	r3, r0
 8005be4:	6822      	ldr	r2, [r4, #0]
 8005be6:	3601      	adds	r6, #1
 8005be8:	4313      	orrs	r3, r2
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	7831      	ldrb	r1, [r6, #0]
 8005bee:	2206      	movs	r2, #6
 8005bf0:	482a      	ldr	r0, [pc, #168]	@ (8005c9c <_vfiprintf_r+0x22c>)
 8005bf2:	1c75      	adds	r5, r6, #1
 8005bf4:	7621      	strb	r1, [r4, #24]
 8005bf6:	f7ff fed3 	bl	80059a0 <memchr>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	d040      	beq.n	8005c80 <_vfiprintf_r+0x210>
 8005bfe:	4b28      	ldr	r3, [pc, #160]	@ (8005ca0 <_vfiprintf_r+0x230>)
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d122      	bne.n	8005c4a <_vfiprintf_r+0x1da>
 8005c04:	2207      	movs	r2, #7
 8005c06:	9b07      	ldr	r3, [sp, #28]
 8005c08:	3307      	adds	r3, #7
 8005c0a:	4393      	bics	r3, r2
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	9307      	str	r3, [sp, #28]
 8005c10:	6963      	ldr	r3, [r4, #20]
 8005c12:	9a04      	ldr	r2, [sp, #16]
 8005c14:	189b      	adds	r3, r3, r2
 8005c16:	6163      	str	r3, [r4, #20]
 8005c18:	e762      	b.n	8005ae0 <_vfiprintf_r+0x70>
 8005c1a:	4343      	muls	r3, r0
 8005c1c:	002e      	movs	r6, r5
 8005c1e:	2101      	movs	r1, #1
 8005c20:	189b      	adds	r3, r3, r2
 8005c22:	e7a4      	b.n	8005b6e <_vfiprintf_r+0xfe>
 8005c24:	2300      	movs	r3, #0
 8005c26:	200a      	movs	r0, #10
 8005c28:	0019      	movs	r1, r3
 8005c2a:	3601      	adds	r6, #1
 8005c2c:	6063      	str	r3, [r4, #4]
 8005c2e:	7832      	ldrb	r2, [r6, #0]
 8005c30:	1c75      	adds	r5, r6, #1
 8005c32:	3a30      	subs	r2, #48	@ 0x30
 8005c34:	2a09      	cmp	r2, #9
 8005c36:	d903      	bls.n	8005c40 <_vfiprintf_r+0x1d0>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0c8      	beq.n	8005bce <_vfiprintf_r+0x15e>
 8005c3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c3e:	e7c6      	b.n	8005bce <_vfiprintf_r+0x15e>
 8005c40:	4341      	muls	r1, r0
 8005c42:	002e      	movs	r6, r5
 8005c44:	2301      	movs	r3, #1
 8005c46:	1889      	adds	r1, r1, r2
 8005c48:	e7f1      	b.n	8005c2e <_vfiprintf_r+0x1be>
 8005c4a:	aa07      	add	r2, sp, #28
 8005c4c:	9200      	str	r2, [sp, #0]
 8005c4e:	0021      	movs	r1, r4
 8005c50:	003a      	movs	r2, r7
 8005c52:	4b14      	ldr	r3, [pc, #80]	@ (8005ca4 <_vfiprintf_r+0x234>)
 8005c54:	9803      	ldr	r0, [sp, #12]
 8005c56:	e000      	b.n	8005c5a <_vfiprintf_r+0x1ea>
 8005c58:	bf00      	nop
 8005c5a:	9004      	str	r0, [sp, #16]
 8005c5c:	9b04      	ldr	r3, [sp, #16]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	d1d6      	bne.n	8005c10 <_vfiprintf_r+0x1a0>
 8005c62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c64:	07db      	lsls	r3, r3, #31
 8005c66:	d405      	bmi.n	8005c74 <_vfiprintf_r+0x204>
 8005c68:	89bb      	ldrh	r3, [r7, #12]
 8005c6a:	059b      	lsls	r3, r3, #22
 8005c6c:	d402      	bmi.n	8005c74 <_vfiprintf_r+0x204>
 8005c6e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005c70:	f7ff f9a4 	bl	8004fbc <__retarget_lock_release_recursive>
 8005c74:	89bb      	ldrh	r3, [r7, #12]
 8005c76:	065b      	lsls	r3, r3, #25
 8005c78:	d500      	bpl.n	8005c7c <_vfiprintf_r+0x20c>
 8005c7a:	e71e      	b.n	8005aba <_vfiprintf_r+0x4a>
 8005c7c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005c7e:	e71e      	b.n	8005abe <_vfiprintf_r+0x4e>
 8005c80:	aa07      	add	r2, sp, #28
 8005c82:	9200      	str	r2, [sp, #0]
 8005c84:	0021      	movs	r1, r4
 8005c86:	003a      	movs	r2, r7
 8005c88:	4b06      	ldr	r3, [pc, #24]	@ (8005ca4 <_vfiprintf_r+0x234>)
 8005c8a:	9803      	ldr	r0, [sp, #12]
 8005c8c:	f7ff fc92 	bl	80055b4 <_printf_i>
 8005c90:	e7e3      	b.n	8005c5a <_vfiprintf_r+0x1ea>
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	08006155 	.word	0x08006155
 8005c98:	0800615b 	.word	0x0800615b
 8005c9c:	0800615f 	.word	0x0800615f
 8005ca0:	00000000 	.word	0x00000000
 8005ca4:	08005a4d 	.word	0x08005a4d

08005ca8 <__swbuf_r>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	0006      	movs	r6, r0
 8005cac:	000d      	movs	r5, r1
 8005cae:	0014      	movs	r4, r2
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d004      	beq.n	8005cbe <__swbuf_r+0x16>
 8005cb4:	6a03      	ldr	r3, [r0, #32]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <__swbuf_r+0x16>
 8005cba:	f7fe ffc9 	bl	8004c50 <__sinit>
 8005cbe:	69a3      	ldr	r3, [r4, #24]
 8005cc0:	60a3      	str	r3, [r4, #8]
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	071b      	lsls	r3, r3, #28
 8005cc6:	d502      	bpl.n	8005cce <__swbuf_r+0x26>
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <__swbuf_r+0x3a>
 8005cce:	0021      	movs	r1, r4
 8005cd0:	0030      	movs	r0, r6
 8005cd2:	f000 f82b 	bl	8005d2c <__swsetup_r>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d003      	beq.n	8005ce2 <__swbuf_r+0x3a>
 8005cda:	2501      	movs	r5, #1
 8005cdc:	426d      	negs	r5, r5
 8005cde:	0028      	movs	r0, r5
 8005ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce2:	6923      	ldr	r3, [r4, #16]
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	b2ef      	uxtb	r7, r5
 8005ce8:	1ac0      	subs	r0, r0, r3
 8005cea:	6963      	ldr	r3, [r4, #20]
 8005cec:	b2ed      	uxtb	r5, r5
 8005cee:	4283      	cmp	r3, r0
 8005cf0:	dc05      	bgt.n	8005cfe <__swbuf_r+0x56>
 8005cf2:	0021      	movs	r1, r4
 8005cf4:	0030      	movs	r0, r6
 8005cf6:	f7ff fdf1 	bl	80058dc <_fflush_r>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d1ed      	bne.n	8005cda <__swbuf_r+0x32>
 8005cfe:	68a3      	ldr	r3, [r4, #8]
 8005d00:	3001      	adds	r0, #1
 8005d02:	3b01      	subs	r3, #1
 8005d04:	60a3      	str	r3, [r4, #8]
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	6022      	str	r2, [r4, #0]
 8005d0c:	701f      	strb	r7, [r3, #0]
 8005d0e:	6963      	ldr	r3, [r4, #20]
 8005d10:	4283      	cmp	r3, r0
 8005d12:	d004      	beq.n	8005d1e <__swbuf_r+0x76>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	07db      	lsls	r3, r3, #31
 8005d18:	d5e1      	bpl.n	8005cde <__swbuf_r+0x36>
 8005d1a:	2d0a      	cmp	r5, #10
 8005d1c:	d1df      	bne.n	8005cde <__swbuf_r+0x36>
 8005d1e:	0021      	movs	r1, r4
 8005d20:	0030      	movs	r0, r6
 8005d22:	f7ff fddb 	bl	80058dc <_fflush_r>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d0d9      	beq.n	8005cde <__swbuf_r+0x36>
 8005d2a:	e7d6      	b.n	8005cda <__swbuf_r+0x32>

08005d2c <__swsetup_r>:
 8005d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005de4 <__swsetup_r+0xb8>)
 8005d2e:	b570      	push	{r4, r5, r6, lr}
 8005d30:	0005      	movs	r5, r0
 8005d32:	6818      	ldr	r0, [r3, #0]
 8005d34:	000c      	movs	r4, r1
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d004      	beq.n	8005d44 <__swsetup_r+0x18>
 8005d3a:	6a03      	ldr	r3, [r0, #32]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <__swsetup_r+0x18>
 8005d40:	f7fe ff86 	bl	8004c50 <__sinit>
 8005d44:	230c      	movs	r3, #12
 8005d46:	5ee2      	ldrsh	r2, [r4, r3]
 8005d48:	0713      	lsls	r3, r2, #28
 8005d4a:	d423      	bmi.n	8005d94 <__swsetup_r+0x68>
 8005d4c:	06d3      	lsls	r3, r2, #27
 8005d4e:	d407      	bmi.n	8005d60 <__swsetup_r+0x34>
 8005d50:	2309      	movs	r3, #9
 8005d52:	602b      	str	r3, [r5, #0]
 8005d54:	2340      	movs	r3, #64	@ 0x40
 8005d56:	2001      	movs	r0, #1
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	4240      	negs	r0, r0
 8005d5e:	e03a      	b.n	8005dd6 <__swsetup_r+0xaa>
 8005d60:	0752      	lsls	r2, r2, #29
 8005d62:	d513      	bpl.n	8005d8c <__swsetup_r+0x60>
 8005d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d66:	2900      	cmp	r1, #0
 8005d68:	d008      	beq.n	8005d7c <__swsetup_r+0x50>
 8005d6a:	0023      	movs	r3, r4
 8005d6c:	3344      	adds	r3, #68	@ 0x44
 8005d6e:	4299      	cmp	r1, r3
 8005d70:	d002      	beq.n	8005d78 <__swsetup_r+0x4c>
 8005d72:	0028      	movs	r0, r5
 8005d74:	f7ff f94a 	bl	800500c <_free_r>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d7c:	2224      	movs	r2, #36	@ 0x24
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	4393      	bics	r3, r2
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	2300      	movs	r3, #0
 8005d86:	6063      	str	r3, [r4, #4]
 8005d88:	6923      	ldr	r3, [r4, #16]
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	89a2      	ldrh	r2, [r4, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	81a3      	strh	r3, [r4, #12]
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10b      	bne.n	8005db2 <__swsetup_r+0x86>
 8005d9a:	21a0      	movs	r1, #160	@ 0xa0
 8005d9c:	2280      	movs	r2, #128	@ 0x80
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	0089      	lsls	r1, r1, #2
 8005da2:	0092      	lsls	r2, r2, #2
 8005da4:	400b      	ands	r3, r1
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <__swsetup_r+0x86>
 8005daa:	0021      	movs	r1, r4
 8005dac:	0028      	movs	r0, r5
 8005dae:	f000 f897 	bl	8005ee0 <__smakebuf_r>
 8005db2:	230c      	movs	r3, #12
 8005db4:	5ee2      	ldrsh	r2, [r4, r3]
 8005db6:	2101      	movs	r1, #1
 8005db8:	0013      	movs	r3, r2
 8005dba:	400b      	ands	r3, r1
 8005dbc:	420a      	tst	r2, r1
 8005dbe:	d00b      	beq.n	8005dd8 <__swsetup_r+0xac>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60a3      	str	r3, [r4, #8]
 8005dc4:	6963      	ldr	r3, [r4, #20]
 8005dc6:	425b      	negs	r3, r3
 8005dc8:	61a3      	str	r3, [r4, #24]
 8005dca:	2000      	movs	r0, #0
 8005dcc:	6923      	ldr	r3, [r4, #16]
 8005dce:	4283      	cmp	r3, r0
 8005dd0:	d101      	bne.n	8005dd6 <__swsetup_r+0xaa>
 8005dd2:	0613      	lsls	r3, r2, #24
 8005dd4:	d4be      	bmi.n	8005d54 <__swsetup_r+0x28>
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	0791      	lsls	r1, r2, #30
 8005dda:	d400      	bmi.n	8005dde <__swsetup_r+0xb2>
 8005ddc:	6963      	ldr	r3, [r4, #20]
 8005dde:	60a3      	str	r3, [r4, #8]
 8005de0:	e7f3      	b.n	8005dca <__swsetup_r+0x9e>
 8005de2:	46c0      	nop			@ (mov r8, r8)
 8005de4:	20000018 	.word	0x20000018

08005de8 <_raise_r>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	0004      	movs	r4, r0
 8005dec:	000d      	movs	r5, r1
 8005dee:	291f      	cmp	r1, #31
 8005df0:	d904      	bls.n	8005dfc <_raise_r+0x14>
 8005df2:	2316      	movs	r3, #22
 8005df4:	6003      	str	r3, [r0, #0]
 8005df6:	2001      	movs	r0, #1
 8005df8:	4240      	negs	r0, r0
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <_raise_r+0x24>
 8005e02:	008a      	lsls	r2, r1, #2
 8005e04:	189b      	adds	r3, r3, r2
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	2a00      	cmp	r2, #0
 8005e0a:	d108      	bne.n	8005e1e <_raise_r+0x36>
 8005e0c:	0020      	movs	r0, r4
 8005e0e:	f000 f831 	bl	8005e74 <_getpid_r>
 8005e12:	002a      	movs	r2, r5
 8005e14:	0001      	movs	r1, r0
 8005e16:	0020      	movs	r0, r4
 8005e18:	f000 f81a 	bl	8005e50 <_kill_r>
 8005e1c:	e7ed      	b.n	8005dfa <_raise_r+0x12>
 8005e1e:	2a01      	cmp	r2, #1
 8005e20:	d009      	beq.n	8005e36 <_raise_r+0x4e>
 8005e22:	1c51      	adds	r1, r2, #1
 8005e24:	d103      	bne.n	8005e2e <_raise_r+0x46>
 8005e26:	2316      	movs	r3, #22
 8005e28:	6003      	str	r3, [r0, #0]
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	e7e5      	b.n	8005dfa <_raise_r+0x12>
 8005e2e:	2100      	movs	r1, #0
 8005e30:	0028      	movs	r0, r5
 8005e32:	6019      	str	r1, [r3, #0]
 8005e34:	4790      	blx	r2
 8005e36:	2000      	movs	r0, #0
 8005e38:	e7df      	b.n	8005dfa <_raise_r+0x12>
	...

08005e3c <raise>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	4b03      	ldr	r3, [pc, #12]	@ (8005e4c <raise+0x10>)
 8005e40:	0001      	movs	r1, r0
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	f7ff ffd0 	bl	8005de8 <_raise_r>
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	20000018 	.word	0x20000018

08005e50 <_kill_r>:
 8005e50:	2300      	movs	r3, #0
 8005e52:	b570      	push	{r4, r5, r6, lr}
 8005e54:	4d06      	ldr	r5, [pc, #24]	@ (8005e70 <_kill_r+0x20>)
 8005e56:	0004      	movs	r4, r0
 8005e58:	0008      	movs	r0, r1
 8005e5a:	0011      	movs	r1, r2
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	f7fa ff19 	bl	8000c94 <_kill>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d103      	bne.n	8005e6e <_kill_r+0x1e>
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d000      	beq.n	8005e6e <_kill_r+0x1e>
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	200005e0 	.word	0x200005e0

08005e74 <_getpid_r>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	f7fa ff07 	bl	8000c88 <_getpid>
 8005e7a:	bd10      	pop	{r4, pc}

08005e7c <_malloc_usable_size_r>:
 8005e7c:	1f0b      	subs	r3, r1, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	1f18      	subs	r0, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	da01      	bge.n	8005e8a <_malloc_usable_size_r+0xe>
 8005e86:	580b      	ldr	r3, [r1, r0]
 8005e88:	18c0      	adds	r0, r0, r3
 8005e8a:	4770      	bx	lr

08005e8c <__swhatbuf_r>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	000e      	movs	r6, r1
 8005e90:	001d      	movs	r5, r3
 8005e92:	230e      	movs	r3, #14
 8005e94:	5ec9      	ldrsh	r1, [r1, r3]
 8005e96:	0014      	movs	r4, r2
 8005e98:	b096      	sub	sp, #88	@ 0x58
 8005e9a:	2900      	cmp	r1, #0
 8005e9c:	da0c      	bge.n	8005eb8 <__swhatbuf_r+0x2c>
 8005e9e:	89b2      	ldrh	r2, [r6, #12]
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	0011      	movs	r1, r2
 8005ea4:	4019      	ands	r1, r3
 8005ea6:	421a      	tst	r2, r3
 8005ea8:	d114      	bne.n	8005ed4 <__swhatbuf_r+0x48>
 8005eaa:	2380      	movs	r3, #128	@ 0x80
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	2000      	movs	r0, #0
 8005eb0:	6029      	str	r1, [r5, #0]
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	b016      	add	sp, #88	@ 0x58
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
 8005eb8:	466a      	mov	r2, sp
 8005eba:	f000 f853 	bl	8005f64 <_fstat_r>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	dbed      	blt.n	8005e9e <__swhatbuf_r+0x12>
 8005ec2:	23f0      	movs	r3, #240	@ 0xf0
 8005ec4:	9901      	ldr	r1, [sp, #4]
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	4019      	ands	r1, r3
 8005eca:	4b04      	ldr	r3, [pc, #16]	@ (8005edc <__swhatbuf_r+0x50>)
 8005ecc:	18c9      	adds	r1, r1, r3
 8005ece:	424b      	negs	r3, r1
 8005ed0:	4159      	adcs	r1, r3
 8005ed2:	e7ea      	b.n	8005eaa <__swhatbuf_r+0x1e>
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	2340      	movs	r3, #64	@ 0x40
 8005ed8:	e7e9      	b.n	8005eae <__swhatbuf_r+0x22>
 8005eda:	46c0      	nop			@ (mov r8, r8)
 8005edc:	ffffe000 	.word	0xffffe000

08005ee0 <__smakebuf_r>:
 8005ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee2:	2602      	movs	r6, #2
 8005ee4:	898b      	ldrh	r3, [r1, #12]
 8005ee6:	0005      	movs	r5, r0
 8005ee8:	000c      	movs	r4, r1
 8005eea:	b085      	sub	sp, #20
 8005eec:	4233      	tst	r3, r6
 8005eee:	d007      	beq.n	8005f00 <__smakebuf_r+0x20>
 8005ef0:	0023      	movs	r3, r4
 8005ef2:	3347      	adds	r3, #71	@ 0x47
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	6123      	str	r3, [r4, #16]
 8005ef8:	2301      	movs	r3, #1
 8005efa:	6163      	str	r3, [r4, #20]
 8005efc:	b005      	add	sp, #20
 8005efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f00:	ab03      	add	r3, sp, #12
 8005f02:	aa02      	add	r2, sp, #8
 8005f04:	f7ff ffc2 	bl	8005e8c <__swhatbuf_r>
 8005f08:	9f02      	ldr	r7, [sp, #8]
 8005f0a:	9001      	str	r0, [sp, #4]
 8005f0c:	0039      	movs	r1, r7
 8005f0e:	0028      	movs	r0, r5
 8005f10:	f7ff f8f2 	bl	80050f8 <_malloc_r>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d108      	bne.n	8005f2a <__smakebuf_r+0x4a>
 8005f18:	220c      	movs	r2, #12
 8005f1a:	5ea3      	ldrsh	r3, [r4, r2]
 8005f1c:	059a      	lsls	r2, r3, #22
 8005f1e:	d4ed      	bmi.n	8005efc <__smakebuf_r+0x1c>
 8005f20:	2203      	movs	r2, #3
 8005f22:	4393      	bics	r3, r2
 8005f24:	431e      	orrs	r6, r3
 8005f26:	81a6      	strh	r6, [r4, #12]
 8005f28:	e7e2      	b.n	8005ef0 <__smakebuf_r+0x10>
 8005f2a:	2380      	movs	r3, #128	@ 0x80
 8005f2c:	89a2      	ldrh	r2, [r4, #12]
 8005f2e:	6020      	str	r0, [r4, #0]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	9b03      	ldr	r3, [sp, #12]
 8005f36:	6120      	str	r0, [r4, #16]
 8005f38:	6167      	str	r7, [r4, #20]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00c      	beq.n	8005f58 <__smakebuf_r+0x78>
 8005f3e:	0028      	movs	r0, r5
 8005f40:	230e      	movs	r3, #14
 8005f42:	5ee1      	ldrsh	r1, [r4, r3]
 8005f44:	f000 f820 	bl	8005f88 <_isatty_r>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d005      	beq.n	8005f58 <__smakebuf_r+0x78>
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	89a2      	ldrh	r2, [r4, #12]
 8005f50:	439a      	bics	r2, r3
 8005f52:	3b02      	subs	r3, #2
 8005f54:	4313      	orrs	r3, r2
 8005f56:	81a3      	strh	r3, [r4, #12]
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	9a01      	ldr	r2, [sp, #4]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	81a3      	strh	r3, [r4, #12]
 8005f60:	e7cc      	b.n	8005efc <__smakebuf_r+0x1c>
	...

08005f64 <_fstat_r>:
 8005f64:	2300      	movs	r3, #0
 8005f66:	b570      	push	{r4, r5, r6, lr}
 8005f68:	4d06      	ldr	r5, [pc, #24]	@ (8005f84 <_fstat_r+0x20>)
 8005f6a:	0004      	movs	r4, r0
 8005f6c:	0008      	movs	r0, r1
 8005f6e:	0011      	movs	r1, r2
 8005f70:	602b      	str	r3, [r5, #0]
 8005f72:	f7fa feef 	bl	8000d54 <_fstat>
 8005f76:	1c43      	adds	r3, r0, #1
 8005f78:	d103      	bne.n	8005f82 <_fstat_r+0x1e>
 8005f7a:	682b      	ldr	r3, [r5, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d000      	beq.n	8005f82 <_fstat_r+0x1e>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd70      	pop	{r4, r5, r6, pc}
 8005f84:	200005e0 	.word	0x200005e0

08005f88 <_isatty_r>:
 8005f88:	2300      	movs	r3, #0
 8005f8a:	b570      	push	{r4, r5, r6, lr}
 8005f8c:	4d06      	ldr	r5, [pc, #24]	@ (8005fa8 <_isatty_r+0x20>)
 8005f8e:	0004      	movs	r4, r0
 8005f90:	0008      	movs	r0, r1
 8005f92:	602b      	str	r3, [r5, #0]
 8005f94:	f7fa feec 	bl	8000d70 <_isatty>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d103      	bne.n	8005fa4 <_isatty_r+0x1c>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d000      	beq.n	8005fa4 <_isatty_r+0x1c>
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	bd70      	pop	{r4, r5, r6, pc}
 8005fa6:	46c0      	nop			@ (mov r8, r8)
 8005fa8:	200005e0 	.word	0x200005e0

08005fac <_init>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	46c0      	nop			@ (mov r8, r8)
 8005fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb2:	bc08      	pop	{r3}
 8005fb4:	469e      	mov	lr, r3
 8005fb6:	4770      	bx	lr

08005fb8 <_fini>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fbe:	bc08      	pop	{r3}
 8005fc0:	469e      	mov	lr, r3
 8005fc2:	4770      	bx	lr
